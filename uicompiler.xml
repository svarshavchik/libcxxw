<!--

Copyright 2017-2020 Double Precision, Inc.
See COPYING for distribution information.

XML-based definition of a template-driven object initialization,
used mostly to generate predefined grid layouts.

Transformed by the "parseuicompiler.xsl" stylesheet.

The top level element is <api>.

<api> contains a list of <parser>s.

A <parser> for a layoutmanager has a "layoutmanager=1" attribute, this is
used by get_layoutmanagers.xsl

Each <parser>'s <name> robo-generates a

uicompiler::<name>_parser()

[objectname]_parser()'s first parameter is

const ui::parser_lock &lock

Each <parser> element contains a list of <parameter> elements.
[objectname]_parser() returns a
functionref<void (const [parameter]/[type] &)>, using each <parameter>'s
<type>. An @mutable attribute leaves off the "const" part.


Additionally, a parseconfig wrapper also gets robogenerated:

vector<functionref< ...>>
 <name>_parseconfig(const ui::parser_lock &lock)
{
    auto config=vector<functionref< ... >>::create();

    config->reserve(lock->get_child_element_count());

    if (lock->get_first_element_child())
        do
        {
            config.push_back([objectname]_parser(lock));
        } while (lock->get_next_element_sibling());
}

The parseconfig lock's child elements, and for each
child element, a new value is appended to the vector that's passed as the
second argument.

The contents of <name>_parser() gets generated from the <parser>'s
<function> elements.

The <name>_parser() finds a matching <function> for the current element
as follows:

1. Each <function>'s <name>:

auto name=lock->name();  // lock is the original lock's child element.

if (name == "<function>'s <name>"

Then, if the <function> has any <condition>'s:

    &&

If <condition> has an <exists>:

       single_value_exists(lock, "<exist>'s contents")

Otherwise

       lowercase_single_value(lock, "<condition>'s <name>")
                             == "<condition>'s <value>"

    )
{
     // Parameter code

     return [=]
         ( // List of top level parameters)
         {

            <object>-><invoke>( // Forward list
                                       // List of values
                                     );
         });
}

If the <function>'s <parameter> has a <scalar>, instead of the auto value,
which was not declared, the substitute text in <scalar>

2. If none of the <function>s match, an exception is thrown. The order
of <function>s is the order of the attempted matches.


For each matched function:

Parameter code:

For each one of the <function>'s <parameter>s, generates:

auto <name>_value=<type>(lock, "<name>", "<function>'s <name>");

Does not generate anything if <parameter> has a <scalar>.

List of top level's parameters:

For each <parser>'s <parameter>:
      const <type> &<name>

Forward list:

For each <parser>'s <forward>:
      <forward>'s text

List of values:

      The list of the auto values that were declared.

-->

<api xmlns:xi="http://www.w3.org/2003/XInclude">

  <parser type="layoutmanager">
    <name>layout</name>

    <parameter>
      <type>layoutmanager</type>
      <name>layout</name>
    </parameter>

    <parameter mutable="1">
      <type>uielements</type>
      <name>elements</name>
    </parameter>

    <function>
      <name>creator</name>
      <invoke>invoke_creator</invoke>

      <parameter>
	<scalar>layout</scalar>
      </parameter>

      <parameter>
	<scalar>elements</scalar>
      </parameter>

      <parameter>
	<name>creator</name>
	<xpath>.</xpath>
	<type>single_value</type>
      </parameter>
    </function>
  </parser>

  <parser type="layoutmanager">
    <name>gridlayout</name>
    <category>grid</category>

    <config>new_gridlayout</config>

    <parameter>
      <type>gridlayoutmanager</type>
      <name>layout</name>
    </parameter>

    <parameter mutable="1">
      <type>uielements</type>
      <name>elements</name>
    </parameter>

    <!-- grid_halign -->

    <function>
      <name>halign</name>
      <invoke>col_alignment</invoke>

      <object>layout</object>

      <parameter>
	<name>col</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<name>halign</name>
	<type>to_halign</type>
      </parameter>
    </function>

    <!-- grid_valign -->

    <function>
      <name>valign</name>
      <invoke>row_alignment</invoke>

      <object>layout</object>

      <parameter>
	<name>row</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<name>valign</name>
	<type>to_valign</type>
      </parameter>
    </function>

    <!-- padding -->

    <function>
      <name>padding</name>
      <invoke>col_left_padding</invoke>

      <condition>
	<name>side</name>
	<value>left</value>
      </condition>

      <object>layout</object>

      <parameter>
	<name>col</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<name>padding</name>
	<type>single_value</type>
	<lookup>
	  <function>compiler.generators-&gt;lookup_dim</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <function>
      <name>padding</name>
      <invoke>col_right_padding</invoke>

      <condition>
	<name>side</name>
	<value>right</value>
      </condition>

      <object>layout</object>

      <parameter>
	<name>col</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<name>padding</name>
	<type>single_value</type>
	<lookup>
	  <function>compiler.generators-&gt;lookup_dim</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <function>
      <name>padding</name>
      <invoke>row_top_padding</invoke>

      <condition>
	<name>side</name>
	<value>top</value>
      </condition>

      <object>layout</object>

      <parameter>
	<name>row</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<name>padding</name>
	<type>single_value</type>
	<lookup>
	  <function>compiler.generators-&gt;lookup_dim</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <function>
      <name>padding</name>
      <invoke>row_bottom_padding</invoke>

      <condition>
	<name>side</name>
	<value>bottom</value>
      </condition>

      <object>layout</object>

      <parameter>
	<name>row</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<name>padding</name>
	<type>single_value</type>
	<lookup>
	  <function>compiler.generators-&gt;lookup_dim</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <!-- border -->

    <function>
      <name>default_col_border</name>
      <invoke>default_col_border</invoke>

      <object>layout</object>

      <parameter>
	<name>col</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<name>border</name>
	<type>single_value</type>
	<lookup>
	  <function>compiler.generators-&gt;lookup_border</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <function>
      <name>default_row_border</name>
      <invoke>default_row_border</invoke>

      <object>layout</object>

      <parameter>
	<name>col</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<name>border</name>
	<type>single_value</type>
	<lookup>
	  <function>compiler.generators-&gt;lookup_border</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <!-- percent -->

    <function>
      <name>percent</name>
      <invoke>requested_col_width</invoke>

      <condition>
	<exists>col</exists>
      </condition>

      <object>layout</object>

      <parameter>
	<name>col</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<name>percentage</name>
	<type>to_percentage_t</type>
      </parameter>
    </function>

    <function>
      <name>percent</name>
      <invoke>requested_row_height</invoke>

      <condition>
	<exists>row</exists>
      </condition>

      <object>layout</object>

      <parameter>
	<name>row</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<name>percentage</name>
	<type>to_percentage_t</type>
      </parameter>
    </function>

    <!-- append_row, insert_row, replace_row, append_columns, insert_columns,
	 replace_cell -->

    <function>
      <name>append_row</name>
      <invoke>gridlayout_append_row</invoke>

      <parameter>
	<scalar>layout</scalar>
      </parameter>

      <parameter>
	<scalar>elements</scalar>
      </parameter>

      <parameter>
	<name>name</name>
	<type>compiler.lookup_gridfactory_generators</type>
      </parameter>
    </function>

    <function>
      <name>insert_row</name>
      <invoke>gridlayout_insert_row</invoke>

      <parameter>
	<scalar>layout</scalar>
      </parameter>

      <parameter>
	<name>row</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<scalar>elements</scalar>
      </parameter>

      <parameter>
	<name>name</name>
	<type>compiler.lookup_gridfactory_generators</type>
      </parameter>
    </function>

    <function>
      <name>replace_row</name>
      <invoke>gridlayout_replace_row</invoke>

      <parameter>
	<scalar>layout</scalar>
      </parameter>

      <parameter>
	<name>row</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<scalar>elements</scalar>
      </parameter>

      <parameter>
	<name>name</name>
	<type>compiler.lookup_gridfactory_generators</type>
      </parameter>
    </function>

    <function>
      <name>append_columns</name>
      <invoke>gridlayout_append_columns</invoke>

      <parameter>
	<scalar>layout</scalar>
      </parameter>

      <parameter>
	<name>row</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<scalar>elements</scalar>
      </parameter>

      <parameter>
	<name>name</name>
	<type>compiler.lookup_gridfactory_generators</type>
      </parameter>
    </function>

    <function>
      <name>insert_columns</name>
      <invoke>gridlayout_insert_columns</invoke>

      <parameter>
	<scalar>layout</scalar>
      </parameter>

      <parameter>
	<name>row</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<name>col</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<scalar>elements</scalar>
      </parameter>

      <parameter>
	<name>name</name>
	<type>compiler.lookup_gridfactory_generators</type>
      </parameter>
    </function>

    <function>
      <name>replace_cell</name>
      <invoke>gridlayout_replace_cell</invoke>

      <parameter>
	<scalar>layout</scalar>
      </parameter>

      <parameter>
	<name>row</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<name>col</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<scalar>elements</scalar>
      </parameter>

      <parameter>
	<name>name</name>
	<type>compiler.lookup_gridfactory_generators</type>
      </parameter>
    </function>

    <!-- remove_all -->

    <function>
      <name>remove_all</name>
      <object>layout</object>
      <invoke>remove</invoke>
    </function>

    <!-- remove_row -->

    <function>
      <name>remove_row</name>
      <object>layout</object>
      <invoke>remove_row</invoke>

      <parameter>
	<name>row</name>
	<type>to_size_t</type>
      </parameter>
    </function>

    <!-- remove_rows -->

    <function>
      <name>remove_rows</name>
      <object>layout</object>
      <invoke>remove_rows</invoke>

      <parameter>
	<name>row</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<name>count</name>
	<type>to_size_t</type>
      </parameter>
    </function>

    <!-- remove_cell -->

    <function>
      <name>remove_cell</name>
      <object>layout</object>
      <invoke>remove</invoke>

      <parameter>
	<name>row</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<name>col</name>
	<type>to_size_t</type>
      </parameter>
    </function>


    <!-- background_color -->

    <function>
      <name>background_color</name>
      <object>layout</object>
      <invoke>set_background_color</invoke>

      <parameter>
	<name>color</name>
	<type>single_value</type>
	<lookup>
	  <function>compiler.generators-&gt;lookup_color</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <!-- remove_background_color -->

    <function>
      <name>remove_background_color</name>
      <object>layout</object>
      <invoke>remove_background_color</invoke>
    </function>

    <!-- remove_row_defaults and remove_col_defaults -->

    <function>
      <name>remove_row_defaults</name>
      <invoke>remove_row_defaults</invoke>

      <object>layout</object>

      <parameter>
	<name>row</name>
	<type>to_size_t</type>
      </parameter>
    </function>

    <function>
      <name>remove_col_defaults</name>
      <invoke>remove_col_defaults</invoke>

      <object>layout</object>

      <parameter>
	<name>col</name>
	<type>to_size_t</type>
      </parameter>
    </function>

    <use_common>layout</use_common>
  </parser>

  <parser type="factory">
    <name>gridfactory</name>
    <category>grid</category>

    <parameter>
      <type>gridfactory</type>
      <name>factory</name>
    </parameter>

    <parameter mutable="1">
      <type>uielements</type>
      <name>elements</name>
    </parameter>

    <!-- halign -->

    <function>
      <name>halign</name>
      <invoke>halign</invoke>

      <object>factory</object>

      <parameter>
	<name>halign</name>
	<type>to_halign</type>
	<xpath>.</xpath>
      </parameter>
    </function>

    <!-- valign -->

    <function>
      <name>valign</name>
      <invoke>valign</invoke>

      <object>factory</object>

      <parameter>
	<name>valign</name>
	<type>to_valign</type>
	<xpath>.</xpath>
      </parameter>
    </function>

    <!-- padding -->

    <function>
      <name>padding</name>
      <invoke>padding</invoke>

      <condition>
	<name>side</name>
	<value>all</value>
      </condition>

      <object>factory</object>

      <parameter>
	<name>padding</name>
	<type>single_value</type>
	<lookup>
	  <function>compiler.generators-&gt;lookup_dim</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <function>
      <name>padding</name>
      <invoke>left_padding</invoke>

      <condition>
	<name>side</name>
	<value>left</value>
      </condition>

      <object>factory</object>

      <parameter>
	<name>padding</name>
	<type>single_value</type>
	<lookup>
	  <function>compiler.generators-&gt;lookup_dim</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <function>
      <name>padding</name>
      <invoke>right_padding</invoke>

      <condition>
	<name>side</name>
	<value>right</value>
      </condition>

      <object>factory</object>

      <parameter>
	<name>padding</name>
	<type>single_value</type>
	<lookup>
	  <function>compiler.generators-&gt;lookup_dim</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <function>
      <name>padding</name>
      <invoke>top_padding</invoke>

      <condition>
	<name>side</name>
	<value>top</value>
      </condition>

      <object>factory</object>

      <parameter>
	<name>padding</name>
	<type>single_value</type>
	<lookup>
	  <function>compiler.generators-&gt;lookup_dim</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <function>
      <name>padding</name>
      <invoke>bottom_padding</invoke>

      <condition>
	<name>side</name>
	<value>bottom</value>
      </condition>

      <object>factory</object>

      <parameter>
	<name>padding</name>
	<type>single_value</type>
	<lookup>
	  <function>compiler.generators-&gt;lookup_dim</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <!-- colspan -->

    <function>
      <name>colspan</name>
      <invoke>colspan</invoke>
      <object>factory</object>

      <parameter>
	<name>columns</name>
	<type>to_size_t</type>
      </parameter>
    </function>

    <!-- rowspan -->

    <function>
      <name>rowspan</name>
      <invoke>rowspan</invoke>
      <object>factory</object>

      <parameter>
	<name>rows</name>
	<type>to_size_t</type>
      </parameter>
    </function>

    <!-- border -->

    <function>
      <name>border</name>
      <invoke>border</invoke>

      <condition>
	<name>side</name>
	<value>all</value>
      </condition>

      <object>factory</object>

      <parameter>
	<name>border</name>
	<type>single_value</type>
	<lookup>
	  <function>compiler.generators-&gt;lookup_border</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <function>
      <name>border</name>
      <invoke>left_border</invoke>

      <condition>
	<name>side</name>
	<value>left</value>
      </condition>

      <object>factory</object>

      <parameter>
	<name>border</name>
	<type>single_value</type>
	<lookup>
	  <function>compiler.generators-&gt;lookup_border</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <function>
      <name>border</name>
      <invoke>right_border</invoke>

      <condition>
	<name>side</name>
	<value>right</value>
      </condition>

      <object>factory</object>

      <parameter>
	<name>border</name>
	<type>single_value</type>
	<lookup>
	  <function>compiler.generators-&gt;lookup_border</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <function>
      <name>border</name>
      <invoke>top_border</invoke>

      <condition>
	<name>side</name>
	<value>top</value>
      </condition>

      <object>factory</object>

      <parameter>
	<name>border</name>
	<type>single_value</type>
	<lookup>
	  <function>compiler.generators-&gt;lookup_border</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <function>
      <name>border</name>
      <invoke>bottom_border</invoke>

      <condition>
	<name>side</name>
	<value>bottom</value>
      </condition>

      <object>factory</object>

      <parameter>
	<name>border</name>
	<type>single_value</type>
	<lookup>
	  <function>compiler.generators-&gt;lookup_border</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <!-- remove_when_hidden -->

    <function>
      <name>remove_when_hidden</name>
      <invoke>remove_when_hidden</invoke>

      <object>factory</object>
    </function>

    <use_common>factory</use_common>
  </parser>

  <parser type="factory">
    <name>factory</name>
    <category>factory</category>

    <parameter>
      <type>factory</type>
      <name>generic_factory</name>
    </parameter>

    <parameter mutable="1">
      <type>uielements</type>
      <name>elements</name>
    </parameter>

    <!-- label -->

    <function>
      <name>element</name>
      <new_element>1</new_element>

      <condition>
	<exists>label</exists>
      </condition>

      <parameter_parser_name>create_label_parameters</parameter_parser_name>

      <invoke>create_label</invoke>

      <object>generic_factory</object>

      <parameter>
	<type>compiler.text_param_value</type>
	<name>label</name>
      </parameter>

      <parameter>
	<name>config</name>
	<object>label_config</object>
	<member_name>options</member_name>

	<member>
	  <name>alignment</name>
	  <field>alignment</field>
	  <type>to_halign</type>
	</member>
	<member>
	  <name>widthmm</name>
	  <field>widthmm</field>
	  <type>to_mm</type>
	</member>
	<member>
	  <name>direction</name>
	  <field>direction</field>
	  <type>to_bidi_direction</type>
	</member>
      </parameter>
    </function>

    <!-- focusable_label -->

    <function>
      <name>element</name>
      <new_element>1</new_element>

      <condition>
	<exists>focusable_label</exists>
      </condition>

      <invoke>create_focusable_label</invoke>

      <object>generic_factory</object>

      <parameter>
	<type>compiler.text_param_value</type>
	<name>focusable_label</name>
      </parameter>

      <parameter>
	<name>config</name>
	<object>focusable_label_config</object>
	<member_name>options</member_name>

	<member>
	  <name>alignment</name>
	  <field>alignment</field>
	  <type>to_halign</type>
	</member>

	<member>
	  <name>widthmm</name>
	  <field>widthmm</field>
	  <type>to_mm</type>
	</member>

	<member>
	  <name>focus_border</name>
	  <field>focus_border</field>
	  <type>single_value</type>
	  <lookup>
	    <function>compiler.lookup_appearance&lt;const_focus_border_appearance&gt;</function>
	    <default_params />
	  </lookup>
	</member>
      </parameter>
    </function>

    <!-- canvas -->

    <function>
      <name>element</name>
      <new_element>1</new_element>

      <condition>
	<exists>canvas</exists>
      </condition>

      <invoke>create_canvas</invoke>

      <object>generic_factory</object>

      <parameter>
	<name>canvas</name>
	<object>canvas_config</object>
	<member_name>canvas</member_name>

	<member>
	  <name>background_color</name>
	  <field>background_color</field>
	  <type>single_value</type>
	  <lookup>
	    <function>compiler.generators-&gt;lookup_color</function>
	    <default_params />
	  </lookup>
	</member>

	<member>
	  <name>width</name>
	  <field>width</field>
	  <type>single_value</type>
	  <lookup>
	    <function>compiler.generators-&gt;lookup_dim</function>
	    <default_params />
	  </lookup>
	</member>

	<member>
	  <name>minimum_width</name>
	  <field>width.minimum</field>
	  <type>single_value</type>
	  <lookup>
	    <function>compiler.generators-&gt;lookup_dim</function>
	    <default_params />
	  </lookup>
	</member>

	<member>
	  <name>preferred_width</name>
	  <field>width.preferred</field>
	  <type>single_value</type>
	  <lookup>
	    <function>compiler.generators-&gt;lookup_dim</function>
	    <default_params />
	  </lookup>
	</member>

	<member>
	  <name>maximum_width</name>
	  <field>width.maximum</field>
	  <type>single_value</type>
	  <lookup>
	    <function>compiler.generators-&gt;lookup_dim</function>
	    <default_params />
	  </lookup>
	</member>

	<member>
	  <name>height</name>
	  <field>height</field>
	  <type>single_value</type>
	  <lookup>
	    <function>compiler.generators-&gt;lookup_dim</function>
	    <default_params />
	  </lookup>
	</member>

	<member>
	  <name>minimum_height</name>
	  <field>height.minimum</field>
	  <type>single_value</type>
	  <lookup>
	    <function>compiler.generators-&gt;lookup_dim</function>
	    <default_params />
	  </lookup>
	</member>

	<member>
	  <name>preferred_height</name>
	  <field>height.preferred</field>
	  <type>single_value</type>
	  <lookup>
	    <function>compiler.generators-&gt;lookup_dim</function>
	    <default_params />
	  </lookup>
	</member>

	<member>
	  <name>maximum_height</name>
	  <field>height.maximum</field>
	  <type>single_value</type>
	  <lookup>
	    <function>compiler.generators-&gt;lookup_dim</function>
	    <default_params />
	  </lookup>
	</member>
      </parameter>
    </function>

    <!-- button -->

    <function>
      <name>element</name>
      <new_element>1</new_element>

      <condition>
	<exists>button</exists>
      </condition>

      <invoke>create_button</invoke>

      <object>generic_factory</object>

      <parameter>
	<name>button</name>
	<type>compiler.factory_parseconfig</type>
	<factory_wrapper>generic_factory</factory_wrapper>
      </parameter>

      <!--
	  The button_config and shortcut go into optional_args, use
	  use uniform initialization syntax, { config, shorcut }
      -->

      <parameter>
	<before-passing-parameter>{</before-passing-parameter>
	<name>config</name>
	<member_name>config</member_name>
	<object>button_config</object>

	<member>
	  <name>appearance</name>
	  <field>appearance</field>
	  <type>single_value</type>
	  <lookup>
	    <modify />
	    <function>compiler.get_appearance_base</function>
	  </lookup>
	</member>
      </parameter>

      <parameter>
	<name>shortcut</name>
	<type>compiler.shortcut_value</type>
	<after-passing-parameter>}</after-passing-parameter>
      </parameter>
    </function>

    <!-- input_field -->

    <function>
      <name>element</name>
      <new_element>1</new_element>

      <condition>
	<exists>input_field</exists>
      </condition>

      <invoke>create_input_field</invoke>

      <object>generic_factory</object>

      <parameter>
	<name>input_field</name>
	<type>compiler.text_param_value</type>
      </parameter>

      <parameter>
	<name>config</name>
	<member_name>config</member_name>
	<object>input_field_config</object>

	<member>
	  <name>columns</name>
	  <field>columns</field>
	  <type>to_size_t</type>
	</member>

	<member>
	  <name>rows</name>
	  <field>rows</field>
	  <type>to_size_t</type>
	</member>

	<member>
	  <name>autoselect</name>
	  <field>autoselect</field>
	  <type>optional_constant&lt;true&gt;</type>
	</member>

	<member>
	  <name>autodeselect</name>
	  <field>autodeselect</field>
	  <type>optional_constant&lt;true&gt;</type>
	</member>

	<member>
	  <name>disable_clipboards</name>
	  <field>update_clipboards</field>
	  <type>optional_constant&lt;false&gt;</type>
	</member>

	<member>
	  <name>hint</name>
	  <field>hint</field>
	  <type>compiler.text_param_value</type>
	</member>

	<member>
	  <name>password</name>
	  <field>set_password</field>
	  <method_call />
	</member>

	<member>
	  <name>vertical_scrollbar</name>
	  <field>vertical_scrollbar</field>
	  <type>to_scrollbar_visibility</type>
	</member>

	<member>
	  <name>alignment</name>
	  <field>alignment</field>
	  <type>to_halign</type>
	</member>

	<member>
	  <name>direction</name>
	  <field>direction</field>
	  <type>to_bidi_direction</type>
	</member>

	<member>
	  <name>directional_format</name>
	  <field>directional_format</field>
	  <type>to_bidi_directional_format</type>
	</member>

	<member>
	  <name>maximum_size</name>
	  <field>maximum_size</field>
	  <type>to_size_t</type>
	</member>

	<member>
	  <name>set_default_spin_control_factories</name>
	  <field>set_default_spin_control_factories</field>
	  <method_call />
	</member>

	<member>
	  <name>enable_search</name>
	  <field>enable_search</field>
	  <method_call />
	</member>

	<member>
	  <name>appearance</name>
	  <field>appearance</field>
	  <type>single_value</type>
	  <lookup>
	    <modify />
	    <function>compiler.get_appearance_base</function>
	  </lookup>
	</member>
      </parameter>

    </function>

    <!-- date_input_field -->

    <function>
      <name>element</name>
      <new_element>1</new_element>

      <condition>
	<exists>date_input_field</exists>
      </condition>

      <invoke>create_date_input_field</invoke>

      <object>generic_factory</object>

      <parameter>
	<name>config</name>
	<member_name>config</member_name>
	<object>date_input_field_config</object>

	<member>
	  <name>appearance</name>
	  <field>appearance</field>
	  <type>single_value</type>
	  <lookup>
	    <modify />
	    <function>compiler.get_appearance_base</function>
	  </lookup>
	</member>
	<member>
	  <name>invalid_input</name>
	  <field>invalid_input</field>
	  <type>compiler.text_param_value</type>
	</member>
      </parameter>
    </function>


    <!-- image -->

    <function>
      <name>element</name>
      <new_element>1</new_element>

      <condition>
	<exists>image</exists>
      </condition>

      <invoke>create_image</invoke>

      <object>generic_factory</object>

      <parameter>
	<name>image</name>
	<type>single_value</type>
      </parameter>

      <parameter>
	<member_name>width</member_name>
	<name>width</name>
	<object>dim_arg</object>
	<type>single_value</type>
	<default_constructor_params>0</default_constructor_params>
	<initialize_self />
	<lookup>
	  <function>compiler.generators-&gt;lookup_dim</function>
	  <default_params />
	</lookup>
      </parameter>

      <parameter>
	<member_name>height</member_name>
	<name>height</name>
	<object>dim_arg</object>
	<default_constructor_params>0</default_constructor_params>
	<initialize_self />
	<type>single_value</type>
	<lookup>
	  <function>compiler.generators-&gt;lookup_dim</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <!-- checkbox -->

    <function>
      <name>element</name>
      <new_element>1</new_element>

      <condition>
	<exists>checkbox</exists>
      </condition>

      <invoke>create_checkbox</invoke>

      <object>generic_factory</object>

      <parameter>
	<name>checkbox</name>
	<type>compiler.factory_parseconfig</type>
	<factory_wrapper>generic_factory</factory_wrapper>
      </parameter>

      <parameter>
	<member_name>appearance</member_name>
	<name>appearance</name>
	<object>const_image_button_appearance</object>
	<default_constructor_params>const_image_button_appearance::base::checkbox_theme()</default_constructor_params>
	<initialize_self />
	<type>single_value</type>
	<lookup>
	  <function>compiler.lookup_appearance&lt;const_image_button_appearance&gt;</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <!-- radio -->

    <function>
      <name>element</name>
      <new_element>1</new_element>

      <condition>
	<exists>radio</exists>
      </condition>

      <invoke>create_radio</invoke>

      <object>generic_factory</object>

      <parameter>
	<name>group</name>
	<type>single_value</type>
      </parameter>

      <parameter>
	<name>radio</name>
	<type>compiler.factory_parseconfig</type>
	<factory_wrapper>generic_factory</factory_wrapper>
      </parameter>

      <parameter>
	<member_name>appearance</member_name>
	<name>appearance</name>
	<object>const_image_button_appearance</object>
	<default_constructor_params>const_image_button_appearance::base::radio_theme()</default_constructor_params>
	<initialize_self />
	<type>single_value</type>
	<lookup>
	  <function>compiler.lookup_appearance&lt;const_image_button_appearance&gt;</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <!-- progressbar -->

    <function>
      <name>element</name>
      <new_element>1</new_element>

      <condition>
	<exists>progressbar</exists>
      </condition>

      <invoke>uicompiler::create_progressbar</invoke>

      <parameter>
	<scalar>generic_factory</scalar>
      </parameter>

      <parameter>
	<type>single_value</type>
	<name>type</name>
	<lookup>
	  <function>compiler.lookup_container_generators</function>
	  <parameter>lock</parameter>
	  <parameter>single_value(lock, "progressbar", "container")</parameter>
	  <default_params />
	</lookup>
      </parameter>

      <parameter>
	<scalar>elements</scalar>
      </parameter>

      <parameter>
	<name>config</name>
	<member_name>config</member_name>
	<object>progressbar_config</object>
	<member>
	  <name>value</name>
	  <field>value</field>
	  <type>to_size_t</type>
	</member>
	<member>
	  <name>maximum_value</name>
	  <field>maximum_value</field>
	  <type>to_size_t</type>
	</member>
	<member>
	  <name>appearance</name>
	  <field>appearance</field>
	  <type>single_value</type>
	  <lookup>
	    <modify />
	    <function>compiler.get_appearance_base</function>
	  </lookup>
	</member>
      </parameter>
    </function>

    <!-- color picker -->

    <function>
      <name>element</name>
      <new_element>1</new_element>

      <condition>
	<exists>color_picker</exists>
      </condition>

      <invoke>create_color_picker</invoke>

      <object>generic_factory</object>

      <parameter>
	<name>config</name>
	<member_name>config</member_name>
	<object>color_picker_config</object>

	<member>
	  <name>initial_color</name>
	  <field>initial_color</field>
	  <type>compiler.rgb_value</type>
	</member>

	<member>
	  <name>enable_alpha_channel</name>
	  <field>enable_alpha_channel</field>
	  <type>optional_constant&lt;true&gt;</type>
	</member>

	<member>
	  <name>restore</name>

	  <method_call>
	    <name>invoke_restore</name>
	    <parameter>orig_lock</parameter>
	    <parameter>compiler</parameter>
	  </method_call>
	</member>

	<member>
	  <name>appearance</name>
	  <field>appearance</field>
	  <type>single_value</type>
	  <lookup>
	    <modify />
	    <function>compiler.get_appearance_base</function>
	  </lookup>
	</member>
      </parameter>
    </function>

    <!-- font picker -->

    <function>
      <name>element</name>
      <new_element>1</new_element>

      <condition>
	<exists>font_picker</exists>
      </condition>

      <invoke>create_font_picker</invoke>

      <object>generic_factory</object>

      <parameter>
	<name>config</name>
	<member_name>config</member_name>
	<object>font_picker_config</object>

	<member>
	  <name>initial_font</name>
	  <field>initial_font</field>
	  <type>compiler.font_value</type>
	</member>

	<member>
	  <name>ok_label</name>
	  <field>ok_label</field>
	  <type>compiler.text_param_value</type>
	</member>

	<member>
	  <name>cancel_label</name>
	  <field>cancel_label</field>
	  <type>compiler.text_param_value</type>
	</member>

	<member>
	  <name>optional</name>
	  <field>selection_required</field>
	  <type>optional_constant&lt;false&gt;</type>
	</member>

	<member>
	  <name>select_by_foundry</name>
	  <field>select_by_foundry</field>
	  <type>optional_constant&lt;true&gt;</type>
	</member>

	<member>
	  <name>foundry_required</name>
	  <field>foundry_required</field>
	  <type>optional_constant&lt;true&gt;</type>
	</member>

	<member>
	  <name>restore</name>

	  <method_call>
	    <name>invoke_restore</name>
	    <parameter>orig_lock</parameter>
	    <parameter>compiler</parameter>
	  </method_call>
	</member>

	<member>
	  <name>appearance</name>
	  <field>appearance</field>
	  <type>single_value</type>
	  <lookup>
	    <modify />
	    <function>compiler.get_appearance_base</function>
	  </lookup>
	</member>
      </parameter>
    </function>

    <!-- scrollbar -->

    <function>
      <name>element</name>
      <new_element>1</new_element>

      <condition>
	<exists>scrollbar</exists>
      </condition>

      <invoke>create_scrollbar</invoke>

      <parameter>
	<name>scrollbar</name>
	<type>single_value</type>
	<lookup>
	  <function>compiler.lookup_scrollbar_type</function>
	</lookup>
      </parameter>

      <parameter>
	<scalar>generic_factory</scalar>
      </parameter>

      <parameter>
	<name>config</name>
	<member_name>config</member_name>
	<object>scrollbar_config</object>

	<member>
	  <name>range</name>
	  <field>range</field>
	  <type>to_size_t</type>
	</member>

	<member>
	  <name>page_size</name>
	  <field>page_size</field>
	  <type>to_size_t</type>
	</member>

	<member>
	  <name>increment</name>
	  <field>increment</field>
	  <type>to_size_t</type>
	</member>

	<member>
	  <name>value</name>
	  <field>value</field>
	  <type>to_size_t</type>
	</member>

	<member>
	  <name>minimum_size</name>
	  <field>minimum_size</field>
	  <type>single_value</type>
	  <lookup>
	    <function>compiler.generators-&gt;lookup_dim</function>
	    <default_params />
	  </lookup>
	</member>
      </parameter>

      <parameter>
	<member_name>appearance</member_name>
	<name>appearance</name>
	<object>const_scrollbar_appearance</object>
	<default_constructor_params>const_scrollbar_appearance::base::theme()</default_constructor_params>
	<initialize_self />
	<type>single_value</type>
	<lookup>
	  <function>compiler.lookup_appearance&lt;const_scrollbar_appearance&gt;</function>
	  <default_params />
	</lookup>
      </parameter>

    </function>

    <!-- element -->

    <function>
      <name>element</name>

      <invoke>generate</invoke>

      <condition>
	<exists>name</exists>
      </condition>

      <parameter>
	<scalar>generic_factory</scalar>
      </parameter>

      <parameter>
	<scalar>elements</scalar>
      </parameter>

      <parameter>
	<type>single_value</type>
	<name>name</name>
      </parameter>
    </function>

    <!-- container -->

    <function>
      <name>container</name>
      <invoke>create_container</invoke>

      <new_container>1</new_container>

      <parameter>
	<scalar>generic_factory</scalar>
      </parameter>

      <parameter>
	<scalar>elements</scalar>
      </parameter>

      <parameter>
	<type>single_value</type>
	<name>name</name>
      </parameter>

      <parameter>
	<type>single_value</type>
	<name>type</name>
	<lookup>
	  <function>compiler.lookup_container_generators</function>
	  <parameter>lock</parameter>
	  <parameter>single_value(lock, "name", "container")</parameter>
	  <default_params />
	</lookup>
      </parameter>
    </function>
  </parser>

  <!-- book layout manager parser -->

  <parser type="layoutmanager">
    <name>booklayout</name>
    <category>book</category>

    <config>new_booklayout</config>

    <parameter>
      <type>booklayoutmanager</type>
      <name>layout</name>
    </parameter>

    <parameter mutable="1">
      <type>uielements</type>
      <name>elements</name>
    </parameter>

    <function>
      <name>append_pages</name>
      <invoke>booklayout_append_pages</invoke>

      <parameter>
	<scalar>layout</scalar>
      </parameter>

      <parameter>
	<scalar>elements</scalar>
      </parameter>

      <parameter>
	<name>name</name>
	<type>compiler.lookup_bookpagefactory_generators</type>
      </parameter>
    </function>

    <function>
      <name>insert_pages</name>
      <invoke>booklayout_insert_pages</invoke>

      <parameter>
	<scalar>layout</scalar>
      </parameter>

      <parameter>
	<name>pos</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<scalar>elements</scalar>
      </parameter>

      <parameter>
	<name>name</name>
	<type>compiler.lookup_bookpagefactory_generators</type>
      </parameter>
    </function>

    <function>
      <name>open</name>
      <invoke>open</invoke>
      <object>layout</object>

      <parameter>
	<name>page</name>
	<type>to_size_t</type>
      </parameter>
    </function>

    <function>
      <name>close</name>
      <invoke>close</invoke>
      <object>layout</object>
    </function>

    <function>
      <name>remove</name>
      <invoke>remove</invoke>
      <object>layout</object>

      <parameter>
	<name>page</name>
	<type>to_size_t</type>
      </parameter>
    </function>
    <use_common>layout</use_common>
  </parser>

  <!-- border layout manager parser -->

  <parser type="layoutmanager">
    <name>borderlayout</name>
    <category>border</category>

    <config>new_borderlayout</config>

    <parameter>
      <type>borderlayoutmanager</type>
      <name>layout</name>
    </parameter>

    <parameter mutable="1">
      <type>uielements</type>
      <name>elements</name>
    </parameter>

    <function>
      <name>update_title</name>
      <invoke>update_title</invoke>
      <object>layout</object>

      <parameter>
	<name>update_title</name>
	<xpath>.</xpath>
	<type>compiler.text_param_value</type>
      </parameter>
    </function>

    <function>
      <name>update_border</name>
      <invoke>update_border</invoke>
      <object>layout</object>
      <parameter>
	<name>border</name>
	<type>single_value</type>
	<xpath>.</xpath>
	<lookup>
	  <function>compiler.generators-&gt;lookup_border</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <function>
      <name>update_borders</name>
      <invoke>update_borders</invoke>
      <object>layout</object>
      <parameter>
	<name>left_border</name>
	<type>single_value</type>
	<lookup>
	  <function>compiler.generators-&gt;lookup_border</function>
	  <default_params />
	</lookup>
      </parameter>
      <parameter>
	<name>right_border</name>
	<type>single_value</type>
	<lookup>
	  <function>compiler.generators-&gt;lookup_border</function>
	  <default_params />
	</lookup>
      </parameter>
      <parameter>
	<name>top_border</name>
	<type>single_value</type>
	<lookup>
	  <function>compiler.generators-&gt;lookup_border</function>
	  <default_params />
	</lookup>
      </parameter>
      <parameter>
	<name>bottom_border</name>
	<type>single_value</type>
	<lookup>
	  <function>compiler.generators-&gt;lookup_border</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <use_common>singletonlayout</use_common>
  </parser>

  <parser type="layoutmanager">
    <name>singletonlayout</name>

    <parameter>
      <type>singletonlayoutmanager</type>
      <name>layout</name>
    </parameter>

    <parameter mutable="1">
      <type>uielements</type>
      <name>elements</name>
    </parameter>

    <function>
      <name>replace</name>
      <invoke>singletonlayout_replace</invoke>

      <parameter>
	<scalar>layout</scalar>
      </parameter>

      <parameter>
	<scalar>elements</scalar>
      </parameter>

      <parameter>
	<xpath>.</xpath>
	<name>name</name>
	<type>compiler.lookup_factory_generators</type>
      </parameter>
    </function>
    <use_common>layout</use_common>
  </parser>

  <!-- page factory -->

  <parser type="factory">
    <name>pagefactory</name>
    <category>page</category>

    <parameter>
      <type>pagefactory</type>
      <name>factory</name>
    </parameter>

    <parameter mutable="1">
      <type>uielements</type>
      <name>elements</name>
    </parameter>

    <!-- halign -->

    <function>
      <name>halign</name>
      <invoke>halign</invoke>

      <object>factory</object>

      <parameter>
	<name>halign</name>
	<type>to_halign</type>
	<xpath>.</xpath>
      </parameter>
    </function>

    <!-- valign -->

    <function>
      <name>valign</name>
      <invoke>valign</invoke>

      <object>factory</object>

      <parameter>
	<name>valign</name>
	<type>to_valign</type>
	<xpath>.</xpath>
      </parameter>
    </function>

    <use_common>factory</use_common>
  </parser>

  <!-- book page factory -->

  <parser type="factory">
    <name>bookpagefactory</name>
    <category>bookpage</category>

    <parameter>
      <type>bookpagefactory</type>
      <name>factory</name>
    </parameter>

    <parameter mutable="1">
      <type>uielements</type>
      <name>elements</name>
    </parameter>

    <!-- halign -->

    <function>
      <name>halign</name>
      <invoke>halign</invoke>

      <object>factory</object>

      <parameter>
	<name>halign</name>
	<xpath>.</xpath>
	<type>to_halign</type>
      </parameter>
    </function>

    <!-- valign -->

    <function>
      <name>valign</name>
      <invoke>valign</invoke>

      <object>factory</object>

      <parameter>
	<name>valign</name>
	<xpath>.</xpath>
	<type>to_valign</type>
      </parameter>
    </function>

    <function>
      <name>set_appearance</name>
      <invoke>set_appearance</invoke>
      <object>factory</object>
      <parameter>
	<name>appearance</name>
	<type>single_value</type>
	<lookup>
	  <function>compiler.lookup_appearance&lt;const_bookpage_appearance&gt;</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <function>
      <name>add</name>
      <invoke>add</invoke>
      <object>factory</object>

      <parameter>
	<name>tab</name>
	<type>compiler.factory_parseconfig</type>
	<factory_wrapper>factory</factory_wrapper>
      </parameter>

      <parameter>
	<name>page</name>
	<type>compiler.factory_parseconfig</type>
	<factory_wrapper>factory</factory_wrapper>
      </parameter>

      <parameter>
	<before-passing-parameter>{</before-passing-parameter>
	<name>shortcut</name>
	<type>compiler.shortcut_value</type>
	<after-passing-parameter>}</after-passing-parameter>
      </parameter>
    </function>
  </parser>

  <!-- list layout manager -->

  <parser type="layoutmanager">
    <name>listlayout</name>
    <category>list</category>

    <config>new_listlayout</config>
    <parameter>
      <type>listlayoutmanager</type>
      <name>layout</name>
    </parameter>

    <parameter mutable="1">
      <type>uielements</type>
      <name>elements</name>
    </parameter>

    <function>
      <name>append_copy_cut_paste</name>
      <invoke>append_copy_cut_paste</invoke>

      <parameter>
	<scalar>layout</scalar>
      </parameter>

      <parameter>
	<scalar>elements</scalar>
      </parameter>

      <parameter>
	<name>parent</name>
	<type>single_value</type>
      </parameter>
    </function>

    <function>
      <name>append_items</name>
      <invoke>append_items</invoke>
      <object>layout</object>

      <before_invocation>process_new_items(</before_invocation>
      <after_invocation>, items_value, elements)</after_invocation>
      <parameter>
	<name>items</name>
	<after-passing-parameter>.create(elements)</after-passing-parameter>
	<type>compiler.list_items_param_value</type>
      </parameter>
    </function>

    <function>
      <name>insert_items</name>
      <invoke>insert_items</invoke>
      <object>layout</object>

      <before_invocation>process_new_items(</before_invocation>
      <after_invocation>, items_value, elements)</after_invocation>
      <parameter>
	<name>position</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<name>items</name>
	<after-passing-parameter>.create(elements)</after-passing-parameter>
	<type>compiler.list_items_param_value</type>
      </parameter>
    </function>

    <function>
      <name>replace_items</name>
      <invoke>replace_items</invoke>
      <object>layout</object>

      <before_invocation>process_new_items(</before_invocation>
      <after_invocation>, items_value, elements)</after_invocation>
      <parameter>
	<name>position</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<name>items</name>
	<after-passing-parameter>.create(elements)</after-passing-parameter>
	<type>compiler.list_items_param_value</type>
      </parameter>
    </function>

    <function>
      <name>replace_all_items</name>
      <invoke>replace_all_items</invoke>
      <object>layout</object>

      <before_invocation>process_new_items(</before_invocation>
      <after_invocation>, items_value, elements)</after_invocation>
      <parameter>
	<name>items</name>
	<after-passing-parameter>.create(elements)</after-passing-parameter>
	<type>compiler.list_items_param_value</type>
      </parameter>
    </function>

    <function>
      <name>remove_item</name>
      <invoke>remove_item</invoke>
      <object>layout</object>

      <parameter>
	<name>position</name>
	<type>to_size_t</type>
      </parameter>
    </function>

    <function>
      <name>remove_items</name>
      <invoke>remove_items</invoke>
      <object>layout</object>

      <parameter>
	<name>position</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<name>count</name>
	<type>to_size_t</type>
      </parameter>
    </function>

    <function>
      <name>autoselect</name>
      <invoke>autoselect</invoke>
      <object>layout</object>

      <parameter>
	<name>position</name>
	<type>to_size_t</type>
      </parameter>
    </function>
    <use_common>layout</use_common>
  </parser>

  <!-- standard combobox layout manager -->

  <parser type="layoutmanager">
    <name>standard_comboboxlayout</name>
    <category>standard_combobox</category>

    <config>new_standard_comboboxlayout</config>

    <parameter>
      <type>standard_comboboxlayoutmanager</type>
      <name>layout</name>
    </parameter>

    <parameter mutable="1">
      <type>uielements</type>
      <name>elements</name>
    </parameter>

    <use_common>listlayout</use_common>
  </parser>

  <!-- editable combobox layout manager -->

  <parser type="layoutmanager">
    <name>editable_comboboxlayout</name>
    <category>editable_combobox</category>

    <config>new_editable_comboboxlayout</config>

    <parameter>
      <type>editable_comboboxlayoutmanager</type>
      <name>layout</name>
    </parameter>

    <parameter mutable="1">
      <type>uielements</type>
      <name>elements</name>
    </parameter>

    <use_common>standard_comboboxlayout</use_common>
  </parser>

  <!-- table layout manager -->

  <parser type="layoutmanager">
    <name>tablelayout</name>
    <category>table</category>

    <config>new_tablelayout</config>

    <parameter>
      <type>tablelayoutmanager</type>
      <name>layout</name>
    </parameter>

    <parameter mutable="1">
      <type>uielements</type>
      <name>elements</name>
    </parameter>

    <function>
      <name>replace_header</name>
      <invoke>tablelayout_replace_header</invoke>

      <parameter>
	<scalar>layout</scalar>
      </parameter>

      <parameter>
	<scalar>elements</scalar>
      </parameter>

      <parameter>
	<name>column</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<name>header</name>
	<type>compiler.factory_parseconfig</type>
      </parameter>
    </function>

    <use_common>listlayout</use_common>
  </parser>

  <!-- panelayoutmanager initialization -->

  <parser type="layoutmanager">
    <name>panelayout</name>
    <category>pane</category>

    <config>new_panelayout</config>

    <parameter>
      <type>panelayoutmanager</type>
      <name>layout</name>
    </parameter>

    <parameter mutable="1">
      <type>uielements</type>
      <name>elements</name>
    </parameter>

    <function>
      <name>append_panes</name>
      <invoke>panelayout_append_panes</invoke>

      <parameter>
	<scalar>layout</scalar>
      </parameter>

      <parameter>
	<scalar>elements</scalar>
      </parameter>

      <parameter>
	<name>name</name>
	<type>compiler.lookup_panefactory_generators</type>
      </parameter>
    </function>

    <function>
      <name>insert_panes</name>
      <invoke>panelayout_insert_panes</invoke>

      <parameter>
	<scalar>layout</scalar>
      </parameter>

      <parameter>
	<scalar>elements</scalar>
      </parameter>

      <parameter>
	<name>position</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<name>name</name>
	<type>compiler.lookup_panefactory_generators</type>
      </parameter>
    </function>

    <function>
      <name>replace_panes</name>
      <invoke>panelayout_replace_panes</invoke>

      <parameter>
	<scalar>layout</scalar>
      </parameter>

      <parameter>
	<scalar>elements</scalar>
      </parameter>

      <parameter>
	<name>position</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<name>name</name>
	<type>compiler.lookup_panefactory_generators</type>
      </parameter>
    </function>

    <function>
      <name>remove_pane</name>
      <invoke>remove_pane</invoke>
      <object>layout</object>

      <parameter>
	<name>position</name>
	<type>to_size_t</type>
      </parameter>
    </function>

    <function>
      <name>remove_all_panes</name>
      <invoke>remove_all_panes</invoke>
      <object>layout</object>
    </function>

    <function>
      <name>replace_all_panes</name>
      <invoke>panelayout_replace_all_panes</invoke>

      <parameter>
	<scalar>layout</scalar>
      </parameter>

      <parameter>
	<scalar>elements</scalar>
      </parameter>

      <parameter>
	<name>name</name>
	<type>compiler.lookup_panefactory_generators</type>
      </parameter>
    </function>
    <use_common>layout</use_common>
  </parser>

  <!-- panefactory initialization -->

  <parser type="factory">
    <name>panefactory</name>
    <category>pane</category>

    <parameter>
      <type>panefactory</type>
      <name>factory</name>
    </parameter>

    <parameter mutable="1">
      <type>uielements</type>
      <name>elements</name>
    </parameter>

    <function>
      <name>appearance</name>
      <object>factory</object>
      <invoke>appearance=</invoke>

      <parameter>
	<name>appearance</name>
	<xpath>.</xpath>
	<type>single_value</type>
	<lookup>
	  <function>compiler.lookup_appearance&lt;const_pane_appearance&gt;</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <function>
      <name>configure_for_new_list</name>
      <object>factory</object>
      <invoke>configure_for_new_list</invoke>
    </function>

    <use_common>factory</use_common>
  </parser>

  <!-- toolboxfactory initialization -->

  <parser type="factory">
    <name>toolboxfactory</name>
    <category>toolbox</category>

    <parameter>
      <type>toolboxfactory</type>
      <name>factory</name>
    </parameter>

    <parameter mutable="1">
      <type>uielements</type>
      <name>elements</name>
    </parameter>

    <use_common>factory</use_common>
  </parser>

  <!-- itemlayoutmanager initialization -->

  <parser type="layoutmanager">
    <name>itemlayout</name>
    <category>item</category>

    <config>new_itemlayout</config>

    <parameter>
      <type>itemlayoutmanager</type>
      <name>layout</name>
    </parameter>

    <parameter mutable="1">
      <type>uielements</type>
      <name>elements</name>
    </parameter>

    <function>
      <name>append_item</name>
      <invoke>append_item</invoke>
      <object>layout</object>

      <parameter>
	<name>item</name>
	<type>compiler.factory_parseconfig</type>
	<factory_wrapper>layout</factory_wrapper>
      </parameter>

      <parameter>
	<member_name>appearance</member_name>
	<name>appearance</name>
	<object>const_item_button_appearance</object>
	<type>single_value</type>
	<default_constructor_params>const_item_button_appearance::base::theme()</default_constructor_params>
	<initialize_self />
	<lookup>
	  <function>compiler.lookup_appearance&lt;const_item_button_appearance&gt;</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <function>
      <name>insert_item</name>
      <invoke>insert_item</invoke>
      <object>layout</object>

      <parameter>
	<name>position</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<name>item</name>
	<type>compiler.factory_parseconfig</type>
	<factory_wrapper>layout</factory_wrapper>
      </parameter>

      <parameter>
	<member_name>appearance</member_name>
	<name>appearance</name>
	<object>const_item_button_appearance</object>
	<type>single_value</type>
	<default_constructor_params>const_item_button_appearance::base::theme()</default_constructor_params>
	<initialize_self />
	<lookup>
	  <function>compiler.lookup_appearance&lt;const_item_button_appearance&gt;</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <function>
      <name>remove_item</name>
      <invoke>remove_item</invoke>
      <object>layout</object>

      <parameter>
	<name>position</name>
	<type>to_size_t</type>
      </parameter>
    </function>

    <function>
      <name>remove_items</name>
      <invoke>remove_items</invoke>
      <object>layout</object>

      <parameter>
	<name>position</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<name>count</name>
	<type>to_size_t</type>
      </parameter>
    </function>
    <use_common>layout</use_common>
  </parser>

  <!-- pagelayoutmanager initialization -->

  <parser type="layoutmanager">
    <name>pagelayout</name>
    <category>page</category>

    <config>new_pagelayout</config>

    <parameter>
      <type>pagelayoutmanager</type>
      <name>layout</name>
    </parameter>

    <parameter mutable="1">
      <type>uielements</type>
      <name>elements</name>
    </parameter>


    <function>
      <name>append</name>
      <invoke>pagelayout_append</invoke>

      <parameter>
	<scalar>layout</scalar>
      </parameter>

      <parameter>
	<scalar>elements</scalar>
      </parameter>

      <parameter>
	<name>name</name>
	<type>compiler.lookup_pagefactory_generators</type>
      </parameter>
    </function>

    <function>
      <name>insert</name>
      <invoke>pagelayout_insert</invoke>

      <parameter>
	<scalar>layout</scalar>
      </parameter>

      <parameter>
	<scalar>elements</scalar>
      </parameter>

      <parameter>
	<name>position</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<name>name</name>
	<type>compiler.lookup_pagefactory_generators</type>
      </parameter>
    </function>

    <function>
      <name>remove</name>
      <invoke>remove</invoke>
      <object>layout</object>

      <parameter>
	<name>position</name>
	<type>to_size_t</type>
      </parameter>
    </function>

    <function>
      <name>open</name>
      <invoke>open</invoke>
      <object>layout</object>

      <parameter>
	<name>position</name>
	<type>to_size_t</type>
      </parameter>
    </function>

    <function>
      <name>close</name>
      <invoke>close</invoke>
      <object>layout</object>
    </function>

    <use_common>layout</use_common>
  </parser>

  <!-- toolboxlayoutmanager initialization -->

  <parser type="layoutmanager">
    <name>toolboxlayout</name>
    <category>toolbox</category>

    <config>new_toolboxlayout</config>

    <parameter>
      <type>toolboxlayoutmanager</type>
      <name>layout</name>
    </parameter>

    <parameter mutable="1">
      <type>uielements</type>
      <name>elements</name>
    </parameter>

    <function>
      <name>append_tools</name>
      <invoke>toollayout_append_tools</invoke>

      <parameter>
	<scalar>layout</scalar>
      </parameter>

      <parameter>
	<scalar>elements</scalar>
      </parameter>

      <parameter>
	<name>name</name>
	<type>compiler.lookup_toolboxfactory_generators</type>
      </parameter>
    </function>
    <function>
      <name>insert_tools</name>
      <invoke>toollayout_insert_tools</invoke>

      <parameter>
	<scalar>layout</scalar>
      </parameter>

      <parameter>
	<scalar>elements</scalar>
      </parameter>

      <parameter>
	<name>position</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<name>name</name>
	<type>compiler.lookup_toolboxfactory_generators</type>
      </parameter>
    </function>

    <function>
      <name>remove_tool</name>
      <invoke>remove_tool</invoke>
      <object>layout</object>

      <parameter>
	<name>position</name>
	<type>to_size_t</type>
      </parameter>
    </function>

    <function>
      <name>remove_tools</name>
      <invoke>remove_tools</invoke>
      <object>layout</object>

      <parameter>
	<name>position</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<name>count</name>
	<type>to_size_t</type>
      </parameter>
    </function>
    <use_common>layout</use_common>
  </parser>

  <!-- new_gridlayoutmanager initialization -->

  <parser type="new_layoutmanager">
    <name>new_gridlayout</name>

    <category>grid</category>

    <parameter>
      <type>new_gridlayoutmanager_plainptr</type>
      <name>layout</name>
    </parameter>

    <parameter mutable="1">
      <type>uielements</type>
      <name>elements</name>
    </parameter>

    <function>
      <name>col_padding</name>
      <object>layout</object>
      <invoke>col_padding=</invoke>
      <parameter>
	<name>padding</name>
	<type>single_value</type>
	<xpath>.</xpath>
	<lookup>
	  <function>compiler.generators-&gt;lookup_dim</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <function>
      <name>row_padding</name>
      <object>layout</object>
      <invoke>row_padding=</invoke>
      <parameter>
	<name>padding</name>
	<type>single_value</type>
	<xpath>.</xpath>
	<lookup>
	  <function>compiler.generators-&gt;lookup_dim</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <function>
      <name>synchronized_columns</name>
      <object>layout</object>
      <invoke>synchronized_columns=</invoke>

      <parameter>
	<name>axis</name>
	<type>single_value</type>
	<xpath>.</xpath>
	<before-passing-parameter>uicompiler::lookup_synchronized_axis(elements, </before-passing-parameter>
	<after-passing-parameter>)</after-passing-parameter>
      </parameter>
    </function>

  </parser>

  <!-- new_booklayoutmanager initialization -->

  <parser type="new_layoutmanager">
    <name>new_booklayout</name>
    <category>book</category>

    <parameter>
      <type>new_booklayoutmanager_plainptr</type>
      <name>layout</name>
    </parameter>

    <parameter mutable="1">
      <type>uielements</type>
      <name>elements</name>
    </parameter>

    <function>
      <name>appearance</name>
      <object>layout</object>
      <invoke>appearance=</invoke>

      <parameter>
	<name>appearance</name>
	<xpath>.</xpath>
	<type>single_value</type>
	<lookup>
	  <function>compiler.lookup_appearance&lt;const_book_appearance&gt;</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

  </parser>

  <!-- new_list_or_combobox_layoutmanager initialization -->

  <parser type="new_layoutmanager">
    <name>new_list_or_combobox_layout</name>

    <parameter>
      <type>new_list_or_combobox_layoutmanager_plainptr</type>
      <name>layout</name>
    </parameter>

    <parameter mutable="1">
      <type>uielements</type>
      <name>elements</name>
    </parameter>

    <function>
      <name>columns</name>
      <object>layout</object>
      <invoke>columns=</invoke>

      <parameter>
	<name>columns</name>
	<xpath>.</xpath>
	<type>to_size_t</type>
      </parameter>
    </function>

    <function>
      <name>requested_col_width</name>
      <object>layout</object>
      <invoke>requested_col_widths.emplace</invoke>

      <parameter>
	<name>column</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<name>percentage</name>
	<type>to_percentage_t</type>
      </parameter>
    </function>

    <function>
      <name>col_alignment</name>
      <object>layout</object>
      <invoke>col_alignments.emplace</invoke>

      <parameter>
	<name>column</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<name>halign</name>
	<type>to_halign</type>
      </parameter>
    </function>

    <function>
      <name>row_alignment</name>
      <object>layout</object>
      <invoke>row_alignments.emplace</invoke>

      <parameter>
	<name>column</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<name>valign</name>
	<type>to_valign</type>
      </parameter>
    </function>

    <function>
      <name>column_border</name>
      <object>layout</object>
      <invoke>column_borders.emplace</invoke>

      <parameter>
	<name>column</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<name>border</name>
	<type>single_value</type>
	<lookup>
	  <function>compiler.generators-&gt;lookup_border</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <function>
      <name>minimum_column_width</name>
      <object>layout</object>
      <invoke>minimum_column_widths.emplace</invoke>

      <parameter>
	<name>column</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<name>width</name>
	<type>to_mm</type>
      </parameter>
    </function>

    <function>
      <name>synchronized_columns</name>
      <object>layout</object>
      <invoke>synchronized_columns=</invoke>

      <parameter>
	<name>axis</name>
	<type>single_value</type>
	<xpath>.</xpath>
	<before-passing-parameter>uicompiler::lookup_synchronized_axis(elements, </before-passing-parameter>
	<after-passing-parameter>)</after-passing-parameter>
      </parameter>
    </function>

    <function>
      <name>lr_padding</name>
      <object>layout</object>
      <invoke>lr_paddings.emplace</invoke>

      <parameter>
	<name>column</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<name>left</name>
	<type>single_value</type>
	<before-passing-parameter>std::tuple{</before-passing-parameter>
	<lookup>
	  <function>compiler.generators-&gt;lookup_dim</function>
	  <default_params />
	</lookup>
      </parameter>

      <parameter>
	<name>right</name>
	<type>single_value</type>
	<after-passing-parameter>}</after-passing-parameter>
	<lookup>
	  <function>compiler.generators-&gt;lookup_dim</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>
  </parser>

  <!-- new_listlayoutmanager initialization -->

  <parser type="new_layoutmanager">
    <name>new_listlayout</name>
    <category>list</category>

    <parameter>
      <type>new_listlayoutmanager_plainptr</type>
      <name>layout</name>
    </parameter>

    <parameter mutable="1">
      <type>uielements</type>
      <name>elements</name>
    </parameter>

    <function>
      <name>selection_type</name>
      <object>layout</object>
      <invoke>selection_type=</invoke>

      <parameter>
	<name>columns</name>
	<xpath>.</xpath>
	<type>to_selection_type</type>
      </parameter>
    </function>

    <function>
      <name>width</name>
      <object>layout</object>
      <invoke>default_width</invoke>
      <condition>
	<exists>default</exists>
      </condition>
    </function>

    <function>
      <name>width</name>
      <object>layout</object>
      <invoke>variable_width</invoke>
      <condition>
	<exists>variable</exists>
      </condition>
    </function>

    <function>
      <name>width</name>
      <object>layout</object>
      <invoke>width</invoke>

      <parameter>
	<name>min</name>
	<type>single_value</type>
	<before-passing-parameter>{</before-passing-parameter>
	<lookup>
	  <function>compiler.generators-&gt;lookup_dim</function>
	  <default_params />
	</lookup>
      </parameter>

      <parameter>
	<name>preferred</name>
	<type>single_value</type>
	<lookup>
	  <function>compiler.generators-&gt;lookup_dim</function>
	  <default_params />
	</lookup>
      </parameter>

      <parameter>
	<name>max</name>
	<type>single_value</type>
	<after-passing-parameter>}</after-passing-parameter>
	<lookup>
	  <function>compiler.generators-&gt;lookup_dim</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <function>
      <name>height</name>
      <object>layout</object>
      <invoke>height</invoke>
      <condition>
	<exists>min_rows</exists>
      </condition>
      <parameter>
	<name>min_rows</name>
	<type>to_size_t</type>
      </parameter>
      <parameter>
	<name>max_rows</name>
	<type>to_size_t</type>
      </parameter>
    </function>

    <function>
      <name>height</name>
      <object>layout</object>
      <invoke>variable_height</invoke>
      <condition>
	<exists>variable</exists>
      </condition>
    </function>

    <function>
      <name>height</name>
      <object>layout</object>
      <invoke>height</invoke>

      <parameter>
	<name>min</name>
	<type>single_value</type>
	<before-passing-parameter>{</before-passing-parameter>
	<lookup>
	  <function>compiler.generators-&gt;lookup_dim</function>
	  <default_params />
	</lookup>
      </parameter>

      <parameter>
	<name>preferred</name>
	<type>single_value</type>
	<lookup>
	  <function>compiler.generators-&gt;lookup_dim</function>
	  <default_params />
	</lookup>
      </parameter>

      <parameter>
	<name>max</name>
	<type>single_value</type>
	<after-passing-parameter>}</after-passing-parameter>
	<lookup>
	  <function>compiler.generators-&gt;lookup_dim</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <function>
      <name>horizontal_scrollbar</name>
      <object>layout</object>
      <invoke>horizontal_scrollbar=</invoke>

      <parameter>
	<name>visibility</name>
	<xpath>.</xpath>
	<type>to_scrollbar_visibility</type>
      </parameter>
    </function>

    <function>
      <name>vertical_scrollbar</name>
      <object>layout</object>
      <invoke>vertical_scrollbar=</invoke>

      <parameter>
	<name>visibility</name>
	<xpath>.</xpath>
	<type>to_scrollbar_visibility</type>
      </parameter>
    </function>

    <function>
      <name>appearance</name>
      <object>layout</object>
      <invoke>appearance=</invoke>

      <parameter>
	<name>appearance</name>
	<xpath>.</xpath>
	<type>single_value</type>
	<lookup>
	  <function>compiler.lookup_appearance&lt;const_list_appearance&gt;</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <function>
      <name>configure_for_pane</name>
      <condition>
	<exists>synchronized</exists>
      </condition>
      <invoke>configure_synchronized_list_for_pane</invoke>
      <parameter>
	<scalar>layout</scalar>
      </parameter>
    </function>

    <function>
      <name>configure_for_pane</name>
      <invoke>configure_list_for_pane</invoke>
      <parameter>
	<scalar>layout</scalar>
      </parameter>
    </function>

    <use_common>new_list_or_combobox_layout</use_common>
  </parser>

  <!-- new_custom_comboboxlayoutmanager initialization -->

  <parser type="new_layoutmanager">
    <name>new_custom_comboboxlayout</name>

    <parameter>
      <type>new_custom_comboboxlayoutmanager_plainptr</type>
      <name>layout</name>
    </parameter>

    <parameter mutable="1">
      <type>uielements</type>
      <name>elements</name>
    </parameter>

    <function>
      <name>optional</name>
      <object>layout</object>
      <invoke>selection_required=</invoke>
      <parameter>
	<name>flag</name>
	<xpath>.</xpath>
	<type>optional_constant&lt;false&gt;</type>
      </parameter>
    </function>

    <function>
      <name>synchronized_columns</name>
      <object>layout</object>
      <invoke>synchronized_columns=</invoke>

      <parameter>
	<name>axis</name>
	<type>single_value</type>
	<xpath>.</xpath>
	<before-passing-parameter>uicompiler::lookup_synchronized_axis(elements, </before-passing-parameter>
	<after-passing-parameter>)</after-passing-parameter>
      </parameter>
    </function>

    <function>
      <name>appearance</name>
      <object>layout</object>
      <invoke>appearance=</invoke>

      <parameter>
	<name>appearance</name>
	<xpath>.</xpath>
	<type>single_value</type>
	<lookup>
	  <function>compiler.lookup_appearance&lt;const_combobox_appearance&gt;</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <use_common>new_list_or_combobox_layout</use_common>
  </parser>

  <!-- new_standard_comboboxlayoutmanager initialization -->

  <parser type="new_layoutmanager">
    <name>new_standard_comboboxlayout</name>
    <category>standard_combobox</category>

    <parameter>
      <type>new_standard_comboboxlayoutmanager_plainptr</type>
      <name>layout</name>
    </parameter>

    <parameter mutable="1">
      <type>uielements</type>
      <name>elements</name>
    </parameter>
    <use_common>new_custom_comboboxlayout</use_common>
  </parser>

  <!-- new_editable_comboboxlayoutmanager initialization -->

  <parser type="new_layoutmanager">
    <name>new_editable_comboboxlayout</name>
    <category>editable_combobox</category>

    <parameter>
      <type>new_editable_comboboxlayoutmanager_plainptr</type>
      <name>layout</name>
    </parameter>

    <parameter mutable="1">
      <type>uielements</type>
      <name>elements</name>
    </parameter>

    <function>
      <name>input_appearance</name>
      <object>layout</object>
      <invoke>input_appearance=</invoke>

      <parameter>
	<name>appearance</name>
	<xpath>.</xpath>
	<type>single_value</type>
	<lookup>
	  <function>compiler.lookup_appearance&lt;const_input_field_appearance&gt;</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <use_common>new_custom_comboboxlayout</use_common>
  </parser>

    <!-- new_tablelayoutmanager initialization -->

  <parser type="new_layoutmanager">
    <name>new_tablelayout</name>
    <category>table</category>

    <parameter>
      <type>new_tablelayoutmanager_plainptr</type>
      <name>layout</name>
    </parameter>

    <parameter mutable="1">
      <type>uielements</type>
      <name>elements</name>
    </parameter>

    <function>
      <name>extra_table_appearance</name>
      <object>layout</object>
      <invoke>extra_table_appearance=</invoke>

      <parameter>
	<name>extra_table_appearance</name>
	<xpath>.</xpath>
	<type>single_value</type>
	<lookup>
	  <function>compiler.lookup_appearance&lt;const_table_appearance&gt;</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <function>
      <name>table_width</name>
      <object>layout</object>
      <invoke>table_width=</invoke>
      <parameter>
	<name>table_width</name>
	<xpath>.</xpath>
	<type>to_mm</type>
      </parameter>
    </function>

    <function>
      <name>maximum_table_width</name>
      <object>layout</object>
      <invoke>maximum_table_width=</invoke>
      <parameter>
	<name>maximum_table_width</name>
	<xpath>.</xpath>
	<type>to_mm</type>
      </parameter>
    </function>

    <function>
      <name>unlimited_table_width</name>
      <object>layout</object>
      <invoke>unlimited_table_width</invoke>
    </function>

    <function>
      <name>adjustable_column_widths</name>
      <object>layout</object>
      <invoke>adjustable_column_widths=</invoke>
      <parameter>
	<name>adjustable_column_widths</name>
	<xpath>.</xpath>
	<type>optional_constant&lt;true&gt;</type>
      </parameter>
    </function>

    <function>
      <name>restore</name>
      <object>layout</object>
      <invoke>restore</invoke>
      <parameter>
	<name>restore</name>
	<type>single_value</type>
	<xpath>.</xpath>
	<lookup>
	  <function>restore_tablelayoutmanager_position</function>
	  <prepend-parameter>compiler</prepend-parameter>
	</lookup>
      </parameter>
    </function>

    <use_common>new_listlayout</use_common>
  </parser>

  <!-- new_panelayoutmanager initialization -->

  <parser type="new_layoutmanager">
    <name>new_panelayout</name>
    <category>pane</category>

    <parameter>
      <type>new_panelayoutmanager_plainptr</type>
      <name>layout</name>
    </parameter>

    <parameter mutable="1">
      <type>uielements</type>
      <name>elements</name>
    </parameter>

    <function>
      <name>size</name>
      <object>layout</object>
      <invoke>size=</invoke>
      <parameter>
	<name>size</name>
	<xpath>.</xpath>
	<type>single_value</type>
	<lookup>
	  <function>compiler.generators-&gt;lookup_dim</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <function>
      <name>minimum_size</name>
      <object>layout</object>
      <invoke>size.minimum=</invoke>
      <parameter>
	<name>size</name>
	<xpath>.</xpath>
	<type>single_value</type>
	<lookup>
	  <function>compiler.generators-&gt;lookup_dim</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <function>
      <name>preferred_size</name>
      <object>layout</object>
      <invoke>size.preferred=</invoke>
      <parameter>
	<name>size</name>
	<xpath>.</xpath>
	<type>single_value</type>
	<lookup>
	  <function>compiler.generators-&gt;lookup_dim</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <function>
      <name>maximum_size</name>
      <object>layout</object>
      <invoke>size.maximum=</invoke>
      <parameter>
	<name>size</name>
	<xpath>.</xpath>
	<type>single_value</type>
	<lookup>
	  <function>compiler.generators-&gt;lookup_dim</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <function>
      <name>horizontal</name>
      <object>layout</object>
      <invoke>horizontal</invoke>
    </function>

    <function>
      <name>vertical</name>
      <object>layout</object>
      <invoke>vertical</invoke>
    </function>

    <function>
      <name>appearance</name>
      <object>layout</object>
      <invoke>appearance=</invoke>

      <parameter>
	<name>appearance</name>
	<xpath>.</xpath>
	<type>single_value</type>
	<lookup>
	  <function>compiler.lookup_appearance&lt;const_pane_layout_appearance&gt;</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <function>
      <name>restore</name>
      <object>layout</object>
      <invoke>restore</invoke>
      <parameter>
	<name>restore</name>
	<type>single_value</type>
	<xpath>.</xpath>
	<lookup>
	  <function>restore_panelayoutmanager_position</function>
	  <prepend-parameter>compiler</prepend-parameter>
	</lookup>
      </parameter>
    </function>
  </parser>

  <!-- new_itemlayoutmanager initialization -->

  <parser type="new_layoutmanager">
    <name>new_itemlayout</name>
    <category>item</category>

    <parameter>
      <type>new_itemlayoutmanager_plainptr</type>
      <name>layout</name>
    </parameter>

    <parameter mutable="1">
      <type>uielements</type>
      <name>elements</name>
    </parameter>

    <function>
      <name>appearance</name>
      <object>layout</object>
      <invoke>appearance=</invoke>

      <parameter>
	<name>appearance</name>
	<xpath>.</xpath>
	<type>single_value</type>
	<lookup>
	  <function>compiler.lookup_appearance&lt;const_item_layout_appearance&gt;</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>
  </parser>

  <!-- new_pagelayoutmanager initialization -->

  <parser type="new_layoutmanager">
    <name>new_pagelayout</name>
    <category>page</category>

    <parameter>
      <type>new_pagelayoutmanager_plainptr</type>
      <name>layout</name>
    </parameter>

    <parameter mutable="1">
      <type>uielements</type>
      <name>elements</name>
    </parameter>
  </parser>

  <!-- new_toolboxlayoutmanager initialization -->

  <parser type="new_layoutmanager">
    <name>new_toolboxlayout</name>
    <category>toolbox</category>

    <parameter>
      <type>new_toolboxlayoutmanager_plainptr</type>
      <name>layout</name>
    </parameter>

    <parameter mutable="1">
      <type>uielements</type>
      <name>elements</name>
    </parameter>

    <function>
      <name>default_width</name>
      <object>layout</object>
      <invoke>default_width=</invoke>

      <parameter>
	<name>default_width</name>
	<xpath>.</xpath>
	<type>to_size_t</type>
      </parameter>
    </function>
  </parser>

  <!-- new_borderlayoutmanager initialization -->

  <parser type="new_layoutmanager">
    <name>new_borderlayout</name>
    <category>border</category>

    <parameter>
      <type>new_borderlayoutmanager_plainptr</type>
      <name>layout</name>
    </parameter>

    <parameter mutable="1">
      <type>uielements</type>
      <name>elements</name>
    </parameter>

    <function>
      <name>appearance</name>
      <object>layout</object>
      <invoke>appearance=</invoke>

      <parameter>
	<name>appearance</name>
	<xpath>.</xpath>
	<type>single_value</type>
	<lookup>
	  <function>compiler.lookup_appearance&lt;const_frame_appearance&gt;</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <function>
      <name>title</name>
      <object>layout</object>
      <invoke>title=</invoke>

      <parameter>
	<name>title</name>
	<xpath>.</xpath>
	<type>compiler.text_param_value</type>
      </parameter>
    </function>

    <function>
      <name>no_background</name>
      <object>layout</object>
      <invoke>no_background=</invoke>
      <parameter>
	<name>no_background</name>
	<xpath>.</xpath>
	<type>optional_constant&lt;true&gt;</type>
      </parameter>
    </function>
  </parser>

  <!-- menubarfactory -->

  <parser type="factory">
    <name>menubarfactory</name>
    <category>menubar</category>

    <parameter>
      <type>menubarfactory</type>
      <name>factory</name>
    </parameter>

    <parameter mutable="1">
      <type>uielements</type>
      <name>elements</name>
    </parameter>

    <function>
      <name>add</name>
      <new_element>1</new_element>

      <invoke>add</invoke>

      <object>factory</object>

      <parameter>
	<name>title</name>
	<type>compiler.factory_parseconfig</type>
	<factory_wrapper>factory</factory_wrapper>
      </parameter>

      <parameter>
	<name>menu</name>
	<type>compiler.listlayout_parseconfig</type>
	<factory_wrapper>factory</factory_wrapper>
      </parameter>

      <parameter>
	<name>shortcut</name>
	<type>compiler.shortcut_value</type>
      </parameter>

      <parameter>
	<member_name>appearance</member_name>
	<name>appearance</name>
	<object>const_popup_list_appearance</object>
	<default_constructor_params>popup_list_appearance::base::menu_theme()</default_constructor_params>
	<initialize_self />
	<type>single_value</type>
	<lookup>
	  <modify />
	  <function>compiler.lookup_appearance&lt;const_popup_list_appearance&gt;</function>
	  <default_params />
	</lookup>
      </parameter>

    </function>
  </parser>

  <!-- menubarlayout -->

  <parser type="layoutmanager">
    <name>menubarlayout</name>
    <category>menubar</category>

    <parameter>
      <type>menubarlayoutmanager</type>
      <name>layout</name>
    </parameter>

    <parameter mutable="1">
      <type>uielements</type>
      <name>elements</name>
    </parameter>

    <function>
      <name>append_menus</name>
      <invoke>menubarlayout_append_menus</invoke>

      <parameter>
	<scalar>layout</scalar>
      </parameter>

      <parameter>
	<scalar>elements</scalar>
      </parameter>

      <parameter>
	<name>name</name>
	<type>compiler.lookup_menubarfactory_generators</type>
      </parameter>
    </function>

    <function>
      <name>append_right_menus</name>
      <invoke>menubarlayout_append_right_menus</invoke>

      <parameter>
	<scalar>layout</scalar>
      </parameter>

      <parameter>
	<scalar>elements</scalar>
      </parameter>

      <parameter>
	<name>name</name>
	<type>compiler.lookup_menubarfactory_generators</type>
      </parameter>
    </function>

    <function>
      <name>insert_menus</name>
      <invoke>menubarlayout_insert_menus</invoke>

      <parameter>
	<scalar>layout</scalar>
      </parameter>

      <parameter>
	<scalar>elements</scalar>
      </parameter>

      <parameter>
	<name>position</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<name>name</name>
	<type>compiler.lookup_menubarfactory_generators</type>
      </parameter>
    </function>

    <function>
      <name>insert_right_menus</name>
      <invoke>menubarlayout_insert_right_menus</invoke>

      <parameter>
	<scalar>layout</scalar>
      </parameter>

      <parameter>
	<scalar>elements</scalar>
      </parameter>

      <parameter>
	<name>position</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<name>name</name>
	<type>compiler.lookup_menubarfactory_generators</type>
      </parameter>
    </function>

    <function>
      <name>remove_menu</name>
      <invoke>remove_menu</invoke>
      <object>layout</object>

      <parameter>
	<name>position</name>
	<type>to_size_t</type>
      </parameter>
    </function>

    <function>
      <name>remove_right_menu</name>
      <invoke>remove_right_menu</invoke>
      <object>layout</object>

      <parameter>
	<name>position</name>
	<type>to_size_t</type>
      </parameter>
    </function>
    <use_common>layout</use_common>
  </parser>

  <!-- Parser for uielements -->

  <parser type="elements">
    <name>elements</name>
    <parameter>
      <type>uielements * const</type>
      <name>elements</name>
    </parameter>

    <function>
      <name>get_focus_first</name>
      <invoke>get_focus_first</invoke>
      <object>elements</object>

      <parameter>
	<name>focusable</name>
	<type>single_value</type>
      </parameter>
    </function>

    <function>
      <name>get_focus_before</name>
      <invoke>get_focus_before</invoke>
      <object>elements</object>

      <parameter>
	<name>focusable</name>
	<type>single_value</type>
      </parameter>

      <parameter>
	<name>before_focusable</name>
	<type>single_value</type>
      </parameter>
    </function>

    <function>
      <name>get_focus_after</name>
      <invoke>get_focus_after</invoke>
      <object>elements</object>

      <parameter>
	<name>focusable</name>
	<type>single_value</type>
      </parameter>

      <parameter>
	<name>after_focusable</name>
	<type>single_value</type>
      </parameter>
    </function>

    <function>
      <name>get_focus_before_me</name>
      <invoke>get_focus_before_me</invoke>
      <object>elements</object>

      <parameter>
	<name>focusable</name>
	<type>single_value</type>
      </parameter>

      <parameter>
	<name>other_focusables</name>
	<type>multiple_values</type>
      </parameter>
    </function>

    <function>
      <name>get_focus_after_me</name>
      <invoke>get_focus_after_me</invoke>
      <object>elements</object>

      <parameter>
	<name>focusable</name>
	<type>single_value</type>
      </parameter>

      <parameter>
	<name>other_focusables</name>
	<type>multiple_values</type>
      </parameter>
    </function>

    <function>
      <name>request_focus</name>
      <invoke>request_focus</invoke>
      <object>elements</object>

      <parameter>
	<name>focusable</name>
	<type>single_value</type>
      </parameter>

      <parameter>
	<name>now_or_never</name>
	<type>single_value_exists</type>
      </parameter>
    </function>

    <function>
      <name>show_all</name>
      <invoke>show_all</invoke>
      <object>elements</object>

      <parameter>
	<name>element</name>
	<type>single_value</type>
      </parameter>
    </function>

    <function>
      <name>hide_all</name>
      <invoke>hide_all</invoke>
      <object>elements</object>

      <parameter>
	<name>element</name>
	<type>single_value</type>
      </parameter>
    </function>

    <function>
      <name>show</name>
      <invoke>show</invoke>
      <object>elements</object>

      <parameter>
	<name>element</name>
	<type>single_value</type>
      </parameter>
    </function>

    <function>
      <name>hide</name>
      <invoke>hide</invoke>
      <object>elements</object>

      <parameter>
	<name>element</name>
	<type>single_value</type>
      </parameter>
    </function>

  </parser>

</api>
