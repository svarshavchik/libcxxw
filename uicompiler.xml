<!--

Copyright 2017-2019 Double Precision, Inc.
See COPYING for distribution information.

XML-based definition of a template-driven object initialization,
used mostly to generate predefined grid layouts.

Transformed by the "parseuicompiler.xsl" stylesheet.

The top level element is <api>.

<api> contains a list of <parser>s.

Each <parser>'s <name> robo-generates a

uicompiler::<name>_parser()

[objectname]_parser()'s first parameter is

const theme_parser_lock &lock

Each <parser> element contains a list of <parameter> elements.
[objectname]_parser() returns a
functionref<void (const [parameter]/[type] &)>, using each <parameter>'s
<type>. An @mutable attribute leaves off the "const" part.


Additionally, a parseconfig wrapper also gets robogenerated:

vector<functionref< ...>>
 <name>_parseconfig(const theme_parser_lock &lock)
{
    auto config=vector<functionref< ... >>::create();

    config->reserve(lock->get_child_element_count());

    if (lock->get_first_element_child())
        do
        {
            config.push_back([objectname]_parser(lock));
        } while (lock->get_next_element_sibling());
}

The parseconfig lock's child elements, and for each
child element, a new value is appended to the vector that's passed as the
second argument.

The contents of <name>_parser() gets generated from the <parser>'s
<function> elements.

The <name>_parser() finds a matching <function> for the current element
as follows:

1. Each <function>'s <name>:

auto name=lock->name();  // lock is the original lock's child element.

if (name == "<function>'s <name>"

Then, if the <function> has any <condition>'s:

    &&

If <condition> has an <exists>:

       single_value_exists(lock, "<exist>'s contents")

Otherwise

       lowercase_single_value(lock, "<condition>'s <name>")
                             == "<condition>'s <value>"

    )
{
     // Parameter code

     return [=]
         ( // List of top level parameters)
         {

            <object>-><invoke>( // Forward list
                                       // List of values
                                     );
         });
}

If the <function>'s <parameter> has a <scalar>, instead of the auto value,
which was not declared, the substitute text in <scalar>

2. If none of the <function>s match, an exception is thrown. The order
of <function>s is the order of the attempted matches.


For each matched function:

Parameter code:

For each one of the <function>'s <parameter>s, generates:

auto <name>_value=<type>(lock, "<name>", "<function>'s <name>");

Does not generate anything if <parameter> has a <scalar>.

List of top level's parameters:

For each <parser>'s <parameter>:
      const <type> &<name>

Forward list:

For each <parser>'s <forward>:
      <forward>'s text

List of values:

      The list of the auto values that were declared.

-->

<api xmlns:xi="http://www.w3.org/2003/XInclude">
  <parser>
    <name>gridlayout</name>

    <parameter>
      <type>gridlayoutmanager</type>
      <name>layout</name>
    </parameter>

    <parameter mutable="1">
      <type>uielements</type>
      <name>elements</name>
    </parameter>

    <!-- grid_halign -->

    <function>
      <name>halign</name>
      <invoke>col_alignment</invoke>

      <object>layout</object>

      <parameter>
	<name>col</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<name>halign</name>
	<type>to_halign</type>
      </parameter>
    </function>

    <!-- grid_valign -->

    <function>
      <name>valign</name>
      <invoke>row_alignment</invoke>

      <object>layout</object>

      <parameter>
	<name>row</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<name>valign</name>
	<type>to_valign</type>
      </parameter>
    </function>

    <!-- padding -->

    <function>
      <name>padding</name>
      <invoke>col_left_padding</invoke>

      <condition>
	<name>side</name>
	<value>left</value>
      </condition>

      <object>layout</object>

      <parameter>
	<name>col</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<name>padding</name>
	<type>single_value</type>
	<lookup>
	  <function>generators-&gt;lookup_dim</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <function>
      <name>padding</name>
      <invoke>col_right_padding</invoke>

      <condition>
	<name>side</name>
	<value>right</value>
      </condition>

      <object>layout</object>

      <parameter>
	<name>col</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<name>padding</name>
	<type>single_value</type>
	<lookup>
	  <function>generators-&gt;lookup_dim</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <function>
      <name>padding</name>
      <invoke>row_top_padding</invoke>

      <condition>
	<name>side</name>
	<value>top</value>
      </condition>

      <object>layout</object>

      <parameter>
	<name>row</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<name>padding</name>
	<type>single_value</type>
	<lookup>
	  <function>generators-&gt;lookup_dim</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <function>
      <name>padding</name>
      <invoke>row_bottom_padding</invoke>

      <condition>
	<name>side</name>
	<value>bottom</value>
      </condition>

      <object>layout</object>

      <parameter>
	<name>row</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<name>padding</name>
	<type>single_value</type>
	<lookup>
	  <function>generators-&gt;lookup_dim</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <!-- border -->

    <function>
      <name>default_col_border</name>
      <invoke>default_col_border</invoke>

      <object>layout</object>

      <parameter>
	<name>col</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<name>border</name>
	<type>single_value</type>
	<lookup>
	  <function>generators-&gt;lookup_border</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <function>
      <name>default_row_border</name>
      <invoke>default_row_border</invoke>

      <object>layout</object>

      <parameter>
	<name>col</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<name>border</name>
	<type>single_value</type>
	<lookup>
	  <function>generators-&gt;lookup_border</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <!-- percent -->

    <function>
      <name>percent</name>
      <invoke>requested_col_width</invoke>

      <condition>
	<exists>col</exists>
      </condition>

      <object>layout</object>

      <parameter>
	<name>col</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<name>percentage</name>
	<type>to_percentage_t</type>
      </parameter>
    </function>

    <function>
      <name>percent</name>
      <invoke>requested_row_height</invoke>

      <condition>
	<exists>row</exists>
      </condition>

      <object>layout</object>

      <parameter>
	<name>row</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<name>percentage</name>
	<type>to_percentage_t</type>
      </parameter>
    </function>

    <!-- append_row, insert_row, replace_row, append_columns, insert_columns,
	 replace_cell -->

    <function>
      <name>append_row</name>
      <invoke>gridlayout_append_row</invoke>

      <parameter>
	<scalar>layout</scalar>
      </parameter>

      <parameter>
	<scalar>elements</scalar>
      </parameter>

      <parameter>
	<name>name</name>
	<type>compiler.lookup_gridfactory_generators</type>
      </parameter>
    </function>

    <function>
      <name>insert_row</name>
      <invoke>gridlayout_insert_row</invoke>

      <parameter>
	<scalar>layout</scalar>
      </parameter>

      <parameter>
	<name>row</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<scalar>elements</scalar>
      </parameter>

      <parameter>
	<name>name</name>
	<type>compiler.lookup_gridfactory_generators</type>
      </parameter>
    </function>

    <function>
      <name>replace_row</name>
      <invoke>gridlayout_replace_row</invoke>

      <parameter>
	<scalar>layout</scalar>
      </parameter>

      <parameter>
	<name>row</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<scalar>elements</scalar>
      </parameter>

      <parameter>
	<name>name</name>
	<type>compiler.lookup_gridfactory_generators</type>
      </parameter>
    </function>

    <function>
      <name>append_columns</name>
      <invoke>gridlayout_append_columns</invoke>

      <parameter>
	<scalar>layout</scalar>
      </parameter>

      <parameter>
	<name>row</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<scalar>elements</scalar>
      </parameter>

      <parameter>
	<name>name</name>
	<type>compiler.lookup_gridfactory_generators</type>
      </parameter>
    </function>

    <function>
      <name>insert_columns</name>
      <invoke>gridlayout_insert_columns</invoke>

      <parameter>
	<scalar>layout</scalar>
      </parameter>

      <parameter>
	<name>row</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<name>col</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<scalar>elements</scalar>
      </parameter>

      <parameter>
	<name>name</name>
	<type>compiler.lookup_gridfactory_generators</type>
      </parameter>
    </function>

    <function>
      <name>replace_cell</name>
      <invoke>gridlayout_replace_cell</invoke>

      <parameter>
	<scalar>layout</scalar>
      </parameter>

      <parameter>
	<name>row</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<name>col</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<scalar>elements</scalar>
      </parameter>

      <parameter>
	<name>name</name>
	<type>compiler.lookup_gridfactory_generators</type>
      </parameter>
    </function>

    <!-- remove_all -->

    <function>
      <name>remove_all</name>
      <object>layout</object>
      <invoke>remove</invoke>
    </function>

    <!-- remove_row -->

    <function>
      <name>remove_row</name>
      <object>layout</object>
      <invoke>remove_row</invoke>

      <parameter>
	<name>row</name>
	<type>to_size_t</type>
      </parameter>
    </function>

    <!-- remove_cell -->

    <function>
      <name>remove_cell</name>
      <object>layout</object>
      <invoke>remove</invoke>

      <parameter>
	<name>row</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<name>col</name>
	<type>to_size_t</type>
      </parameter>
    </function>


    <!-- background_color -->

    <function>
      <name>background_color</name>
      <object>layout</object>
      <invoke>set_background_color</invoke>

      <parameter>
	<name>color</name>
	<type>single_value</type>
	<lookup>
	  <function>generators-&gt;lookup_color</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <!-- remove_background_color -->

    <function>
      <name>remove_background_color</name>
      <object>layout</object>
      <invoke>remove_background_color</invoke>
    </function>

    <!-- remove_row_defaults and remove_col_defaults -->

    <function>
      <name>remove_row_defaults</name>
      <invoke>remove_row_defaults</invoke>

      <object>layout</object>

      <parameter>
	<name>row</name>
	<type>to_size_t</type>
      </parameter>
    </function>

    <function>
      <name>remove_col_defaults</name>
      <invoke>remove_col_defaults</invoke>

      <object>layout</object>

      <parameter>
	<name>col</name>
	<type>to_size_t</type>
      </parameter>
    </function>
  </parser>

  <parser>
    <name>gridfactory</name>

    <use_common>factory</use_common>
    <parameter>
      <type>gridfactory</type>
      <name>factory</name>
    </parameter>

    <parameter mutable="1">
      <type>uielements</type>
      <name>elements</name>
    </parameter>

    <!-- halign -->

    <function>
      <name>halign</name>
      <invoke>halign</invoke>

      <object>factory</object>

      <parameter>
	<name>halign</name>
	<type>to_halign</type>
      </parameter>
    </function>

    <!-- valign -->

    <function>
      <name>valign</name>
      <invoke>valign</invoke>

      <object>factory</object>

      <parameter>
	<name>valign</name>
	<type>to_valign</type>
      </parameter>
    </function>

    <!-- padding -->

    <function>
      <name>padding</name>
      <invoke>padding</invoke>

      <condition>
	<name>side</name>
	<value>all</value>
      </condition>

      <object>factory</object>

      <parameter>
	<name>padding</name>
	<type>single_value</type>
	<lookup>
	  <function>generators-&gt;lookup_dim</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <function>
      <name>padding</name>
      <invoke>left_padding</invoke>

      <condition>
	<name>side</name>
	<value>left</value>
      </condition>

      <object>factory</object>

      <parameter>
	<name>padding</name>
	<type>single_value</type>
	<lookup>
	  <function>generators-&gt;lookup_dim</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <function>
      <name>padding</name>
      <invoke>right_padding</invoke>

      <condition>
	<name>side</name>
	<value>right</value>
      </condition>

      <object>factory</object>

      <parameter>
	<name>padding</name>
	<type>single_value</type>
	<lookup>
	  <function>generators-&gt;lookup_dim</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <function>
      <name>padding</name>
      <invoke>top_padding</invoke>

      <condition>
	<name>side</name>
	<value>top</value>
      </condition>

      <object>factory</object>

      <parameter>
	<name>padding</name>
	<type>single_value</type>
	<lookup>
	  <function>generators-&gt;lookup_dim</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <function>
      <name>padding</name>
      <invoke>bottom_padding</invoke>

      <condition>
	<name>side</name>
	<value>bottom</value>
      </condition>

      <object>factory</object>

      <parameter>
	<name>padding</name>
	<type>single_value</type>
	<lookup>
	  <function>generators-&gt;lookup_dim</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <!-- colspan -->

    <function>
      <name>colspan</name>
      <invoke>colspan</invoke>
      <object>factory</object>

      <parameter>
	<name>columns</name>
	<type>to_size_t</type>
      </parameter>
    </function>

    <!-- rowspan -->

    <function>
      <name>rowspan</name>
      <invoke>rowspan</invoke>
      <object>factory</object>

      <parameter>
	<name>rows</name>
	<type>to_size_t</type>
      </parameter>
    </function>

    <!-- border -->

    <function>
      <name>border</name>
      <invoke>border</invoke>

      <condition>
	<name>side</name>
	<value>all</value>
      </condition>

      <object>factory</object>

      <parameter>
	<name>border</name>
	<type>single_value</type>
	<lookup>
	  <function>generators-&gt;lookup_border</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <function>
      <name>border</name>
      <invoke>left_border</invoke>

      <condition>
	<name>side</name>
	<value>left</value>
      </condition>

      <object>factory</object>

      <parameter>
	<name>border</name>
	<type>single_value</type>
	<lookup>
	  <function>generators-&gt;lookup_border</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <function>
      <name>border</name>
      <invoke>right_border</invoke>

      <condition>
	<name>side</name>
	<value>right</value>
      </condition>

      <object>factory</object>

      <parameter>
	<name>border</name>
	<type>single_value</type>
	<lookup>
	  <function>generators-&gt;lookup_border</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <function>
      <name>border</name>
      <invoke>top_border</invoke>

      <condition>
	<name>side</name>
	<value>top</value>
      </condition>

      <object>factory</object>

      <parameter>
	<name>border</name>
	<type>single_value</type>
	<lookup>
	  <function>generators-&gt;lookup_border</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <function>
      <name>border</name>
      <invoke>bottom_border</invoke>

      <condition>
	<name>side</name>
	<value>bottom</value>
      </condition>

      <object>factory</object>

      <parameter>
	<name>border</name>
	<type>single_value</type>
	<lookup>
	  <function>generators-&gt;lookup_border</function>
	  <default_params />
	</lookup>
      </parameter>
    </function>

    <!-- remove_when_hidden -->

    <function>
      <name>remove_when_hidden</name>
      <invoke>remove_when_hidden</invoke>

      <object>factory</object>
    </function>
  </parser>

  <parser>
    <name>factory</name>

    <parameter>
      <type>factory</type>
      <name>generic_factory</name>
    </parameter>

    <parameter mutable="1">
      <type>uielements</type>
      <name>elements</name>
    </parameter>

    <!-- label -->

    <function>
      <name>element</name>
      <new_element>1</new_element>

      <condition>
	<exists>label</exists>
      </condition>

      <parameter_parser_name>label_parameters</parameter_parser_name>

      <invoke>create_label</invoke>

      <object>generic_factory</object>

      <parameter>
	<type>compiler.text_param_value</type>
	<name>label</name>
      </parameter>

      <parameter>
	<name>config</name>
	<object>label_config</object>
	<member_name>options</member_name>

	<member>
	  <name>alignment</name>
	  <field>alignment</field>
	  <type>to_halign</type>
	</member>
	<member>
	  <name>widthmm</name>
	  <field>widthmm</field>
	  <type>to_mm</type>
	</member>
      </parameter>
    </function>

    <!-- focusable_label -->

    <function>
      <name>element</name>
      <new_element>1</new_element>

      <condition>
	<exists>focusable_label</exists>
      </condition>

      <invoke>create_focusable_label</invoke>

      <object>generic_factory</object>

      <parameter>
	<type>compiler.text_param_value</type>
	<name>focusable_label</name>
      </parameter>

      <parameter>
	<name>config</name>
	<object>focusable_label_config</object>
	<member_name>options</member_name>

	<member>
	  <name>alignment</name>
	  <field>alignment</field>
	  <type>to_halign</type>
	</member>

	<member>
	  <name>widthmm</name>
	  <field>widthmm</field>
	  <type>to_mm</type>
	</member>

	<member>
	  <name>focus_border</name>
	  <field>focus_border</field>
	  <type>single_value</type>
	  <lookup>
	    <function>lookup_appearance&lt;const_focus_border_appearance&gt;</function>
	    <default_params />
	  </lookup>
	</member>
      </parameter>
    </function>

    <!-- canvas -->

    <function>
      <name>element</name>
      <new_element>1</new_element>

      <condition>
	<exists>canvas</exists>
      </condition>

      <invoke>create_canvas</invoke>

      <object>generic_factory</object>

      <parameter>
	<name>canvas</name>
	<object>canvas_config</object>
	<member_name>canvas</member_name>

	<member>
	  <name>background_color</name>
	  <field>background_color</field>
	  <type>single_value</type>
	  <lookup>
	    <function>generators-&gt;lookup_color</function>
	    <default_params />
	  </lookup>
	</member>

	<member>
	  <name>width</name>
	  <field>width</field>
	  <type>single_value</type>
	  <lookup>
	    <function>generators-&gt;lookup_dim</function>
	    <default_params />
	  </lookup>
	</member>

	<member>
	  <name>minimum_width</name>
	  <field>width.minimum</field>
	  <type>single_value</type>
	  <lookup>
	    <function>generators-&gt;lookup_dim</function>
	    <default_params />
	  </lookup>
	</member>

	<member>
	  <name>preferred_width</name>
	  <field>width.preferred</field>
	  <type>single_value</type>
	  <lookup>
	    <function>generators-&gt;lookup_dim</function>
	    <default_params />
	  </lookup>
	</member>

	<member>
	  <name>maximum_width</name>
	  <field>width.maximum</field>
	  <type>single_value</type>
	  <lookup>
	    <function>generators-&gt;lookup_dim</function>
	    <default_params />
	  </lookup>
	</member>

	<member>
	  <name>height</name>
	  <field>height</field>
	  <type>single_value</type>
	  <lookup>
	    <function>generators-&gt;lookup_dim</function>
	    <default_params />
	  </lookup>
	</member>

	<member>
	  <name>minimum_height</name>
	  <field>height.minimum</field>
	  <type>single_value</type>
	  <lookup>
	    <function>generators-&gt;lookup_dim</function>
	    <default_params />
	  </lookup>
	</member>

	<member>
	  <name>preferred_height</name>
	  <field>height.preferred</field>
	  <type>single_value</type>
	  <lookup>
	    <function>generators-&gt;lookup_dim</function>
	    <default_params />
	  </lookup>
	</member>

	<member>
	  <name>maximum_height</name>
	  <field>height.maximum</field>
	  <type>single_value</type>
	  <lookup>
	    <function>generators-&gt;lookup_dim</function>
	    <default_params />
	  </lookup>
	</member>
      </parameter>
    </function>

    <!-- button -->

    <function>
      <name>element</name>
      <new_element>1</new_element>

      <condition>
	<exists>button</exists>
      </condition>

      <invoke>create_button</invoke>

      <object>generic_factory</object>

      <parameter>
	<name>button</name>
	<type>compiler.factory_parseconfig</type>
	<factory_wrapper>generic_factory</factory_wrapper>
      </parameter>

      <!--
	  The button_config and shortcut go into optional_args, use
	  use uniform initialization syntax, { config, shorcut }
      -->

      <parameter>
	<before-passing-parameter>{</before-passing-parameter>
	<name>config</name>
	<member_name>config</member_name>
	<object>button_config</object>

	<member>
	  <name>appearance</name>
	  <field>appearance</field>
	  <type>single_value</type>
	  <lookup>
	    <modify />
	    <function>get_appearance_base</function>
	  </lookup>
	</member>
      </parameter>

      <parameter>
	<name>shortcut</name>
	<type>compiler.shortcut_value</type>
	<after-passing-parameter>}</after-passing-parameter>
      </parameter>
    </function>

    <!-- element -->

    <function>
      <name>element</name>

      <invoke>generate</invoke>

      <parameter>
	<scalar>generic_factory</scalar>
      </parameter>

      <parameter>
	<scalar>elements</scalar>
      </parameter>

      <parameter>
	<type>single_value</type>
	<name>name</name>
      </parameter>
    </function>

    <!-- container -->

    <function>
      <name>container</name>
      <invoke>create_container</invoke>

      <parameter>
	<scalar>generic_factory</scalar>
      </parameter>

      <parameter>
	<scalar>elements</scalar>
      </parameter>

      <parameter>
	<type>single_value</type>
	<name>name</name>
      </parameter>

      <parameter>
	<type>single_value</type>
	<name>type</name>
	<lookup>
	  <function>lookup_container_generators</function>
	  <parameter>lock</parameter>
	  <parameter>single_value(lock, "name", "container")</parameter>
	  <default_params />
	</lookup>
      </parameter>
    </function>
  </parser>

  <!-- book layout manager parser -->

  <parser>
    <name>booklayout</name>

    <parameter>
      <type>booklayoutmanager</type>
      <name>layout</name>
    </parameter>

    <parameter mutable="1">
      <type>uielements</type>
      <name>elements</name>
    </parameter>

    <function>
      <name>append_pages</name>
      <invoke>booklayout_append_pages</invoke>

      <parameter>
	<scalar>layout</scalar>
      </parameter>

      <parameter>
	<scalar>elements</scalar>
      </parameter>

      <parameter>
	<name>name</name>
	<type>compiler.lookup_bookpagefactory_generators</type>
      </parameter>
    </function>

    <function>
      <name>insert_pages</name>
      <invoke>booklayout_insert_pages</invoke>

      <parameter>
	<scalar>layout</scalar>
      </parameter>

      <parameter>
	<name>pos</name>
	<type>to_size_t</type>
      </parameter>

      <parameter>
	<scalar>elements</scalar>
      </parameter>

      <parameter>
	<name>name</name>
	<type>compiler.lookup_bookpagefactory_generators</type>
      </parameter>
    </function>

    <function>
      <name>open</name>
      <invoke>open</invoke>
      <object>layout</object>

      <parameter>
	<name>page</name>
	<type>to_size_t</type>
      </parameter>
    </function>

    <function>
      <name>close</name>
      <invoke>close</invoke>
      <object>layout</object>
    </function>

    <function>
      <name>remove</name>
      <invoke>remove</invoke>
      <object>layout</object>

      <parameter>
	<name>page</name>
	<type>to_size_t</type>
      </parameter>
    </function>
  </parser>

  <!-- book page factory -->

  <parser>
    <name>bookpagefactory</name>

    <parameter>
      <type>bookpagefactory</type>
      <name>factory</name>
    </parameter>

    <parameter mutable="1">
      <type>uielements</type>
      <name>elements</name>
    </parameter>

    <!-- halign -->

    <function>
      <name>halign</name>
      <invoke>halign</invoke>

      <object>factory</object>

      <parameter>
	<name>halign</name>
	<type>to_halign</type>
      </parameter>
    </function>

    <!-- valign -->

    <function>
      <name>valign</name>
      <invoke>valign</invoke>

      <object>factory</object>

      <parameter>
	<name>valign</name>
	<type>to_valign</type>
      </parameter>
    </function>

    <function>
      <name>container</name>
      <invoke>create_container</invoke>

      <parameter>
	<scalar>factory</scalar>
      </parameter>

      <parameter>
	<scalar>elements</scalar>
      </parameter>

      <parameter>
	<name>label</name>
	<type>single_value</type>
      </parameter>

      <parameter>
	<name>shortcut</name>
	<type>optional_value</type>
      </parameter>

      <parameter>
	<type>single_value</type>
	<name>name</name>
      </parameter>

      <parameter>
	<type>single_value</type>
	<name>type</name>
	<lookup>
	  <function>lookup_container_generators</function>
	  <parameter>lock</parameter>
	  <parameter>single_value(lock, "name", "container")</parameter>
	  <default_params />
	</lookup>
      </parameter>
    </function>
  </parser>
</api>
