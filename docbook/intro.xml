<!--

Copyright 2014-2017 Double Precision, Inc.
See COPYING for distribution information.

-->

<preface id="index">
  <title>&app;</title>
  <section id="intro">
    <title>Introduction</title>

    <?dbhtml-include href="demoreel.inc.html"?>

    <para>
      &appshort; is an optional add-on library to &libcxx;
      that implements a basic X user interface toolkit with a modern
      C++17 <acronym>API</acronym> and without any dependencies on large
      Gnome (GTK) or QT libraries. The only dependencies are
      toolkit-independent
      libraries that are not tied to any particular desktop environment.
      See <xref linkend="INSTALL" /> for more information.
      &appshort; aims to make it possible to quickly implement a simple,
      basic, no-frills X user interface in C++.
      Notable features:
    </para>

    <itemizedlist>
      <listitem>
	<para>
	  Uses modern C++17 language features:
	  lambdas handle events like mouse button clicks and other
	  user activity; overloaded, variadic-parameter methods offering
	  alternative means of configuring various display elements; and
	  other C++17 features.
	</para>
      </listitem>

      <listitem>
	<para>
	  Implements basic, traditional UI elements: labels, text input fields,
	  lists, combo boxes, menus, and dialogs. The UI elements support
	  basic theming, including scaling -- adjusting the
	  scaled size of the UI.
	</para>

	<para>
	  The default UI elements are scalable, using a
	  <link linkend="sxg">library-specific
	    scalable graphic format</link>. Alternatively, an application
	  may load its own <acronym>GIF</acronym>, <acronym>PNG</acronym>,
	  or <acronym>JPG</acronym> fixed-size images.
	</para>
      </listitem>

      <listitem>
	<para>
	  All display elements have full keyboard navigation, where
	  possible. Even scrollbars have keyboard-based navigation.
	</para>
      </listitem>

      <listitem>
	<para>
	  Unlike other high-level toolkits,
	  &app; does not require the application to use an event-driven
	  design. &app; run an internal execution thread that handles all
	  X events. The main application
	  thread can be working on a dedicated, long-running task that
	  blocks all pointer and keyboard events, but the background thread
	  continues to update the display elements, and process X events
	  as needed, all by itself.
	</para>
      </listitem>

      <listitem>
	<para>
	  All display elements are
	  &libcxx;'s reference-counted objects (based on smart pointers).
	  There are no explicit methods
	  to destroy input fields, buttons, and other display elements.
	  Each display element is a reference-counted object, with
	  containers holding references to the elements in the container.
	  Removing an element from the container results in the last
	  reference to the object going out of scope, which destroyes it.
	  This
	  results in the corresponding display element getting destroyed.
	</para>
      </listitem>

      <listitem>
	<para>
	  &app; is a compositing toolkit. The underlying video hardware
	  must implement the X RENDER extension. This should supported by all
	  modern video hardware.
	</para>
      </listitem>

      <listitem>
	<para>
	  Anti-aliased fonts get rendered by the Freetype library.
	</para>
      </listitem>
    </itemizedlist>

    <para>
      &app; is free software, distributed under the terms of the
      <link linkend="COPYING">GPL, version 3</link>.
    </para>
  </section>

  &install;

</preface>

<!--
Local Variables:
mode: sgml
sgml-parent-document: ("book.xml" "book" "preface")
End:
-->
