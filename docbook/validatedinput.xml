<!--

Copyright 2018 Double Precision, Inc.
See COPYING for distribution information.

-->

<chapter id="validatedinput">
  <title>Validating input fields</title>

  <para>
    An
    <link linkend="inputfields">input field</link> often represents a
    data type that's not just a boring, plain text string.
    An input field, for example, may prompt for an integer that
    should be an <classname>int</classname>. It becomes necessary to take
    the free-form text entered into the input field and parse it into an
    <classname>int</classname>.
  </para>

  <para>
    A validated input field is an input field whose entered text gets
    validated and stored in a
    <classname>std::optional&lt;<replaceable>type</replaceable>&gt;</classname>.
    The <replaceable>type</replaceable> might be
    an <classname>int</classname> or some other data type that represents
    the entered text. The entered text gets successfully validated and
    converted to the <replaceable>type</replaceable>, and stored into the
    <classname>std:optional</classname>.
    A <literal>std::nullopt</literal> <classname>std:optional</classname>
    indicates that no value is yet entered in the input field,
    or the entered text cannot
    be converted into the <replaceable>type</replaceable>.
  </para>

  <blockquote>
    <title><ulink url="examples/validatedinput.C">validatedinput.C</ulink></title>

    <informalexample>
      <programlisting><xi:include href="../examples/validatedinput.C" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
    </informalexample>
  </blockquote>

  <para>
    <methodname>set_validator</methodname>() and
    <methodname>set_string_validator</methodname>() install
    &callback;s that get executed to validate the input field's text
    and convert it to some arbitrary <replaceable>type</replaceable>.
    They take two closures, or callable objects, as parameters.
    The first closure takes the input field's contents.
    <methodname>set_validator</methodname>()'s first closure returns
    the
    <classname>std::optional&lt;<replaceable>type</replaceable>&gt;</classname>
    representing the validated value.
    <methodname>set_string_validator</methodname>'s first closure gets
    a reference to the parsed value as an additional parameter.
    <methodname>set_validator</methodname>() and
    <methodname>set_string_validator</methodname>() return an
    <ulink url="&link-typedef-x--w-validated-input-field;"><classname>&ns;::w::validated_input_field&lt;<replaceable>type</replaceable>&gt;</classname></ulink>.
    This object represents the most recently validated value.
  </para>

  <note>
    <para>
      <methodname>set_validator</methodname>()'s
      closure returns a <classname>std::optional</classname> without
      a value to indicate that the entered text is not valid. The closure
      gets called when leaving the input field. Returning a value-less
      <classname>std::optional</classname> results in the input focus
      staying in the input field, but no other visible action. An appropriate
      error message should appear somewhere to provide usable feedback, to
      clearly indicate that the entered input is not valid.
    </para>

    <para>
      The closure's first parameter is a <classname>std::string</classname> or
      a <classname>std::u32string</classname> containing the entered text,
      and the second parameter is its own
      <classname>&ns;::w::input_field</classname> object.
      <filename>validatedinput.C</filename> shows a simple example of
      using its <methodname>stop_message</methodname>() method, which
      display a modal dialog with a <quote>stop</quote> icon, and an error
      message.
    </para>

    <para>
      <methodname>set_string_validator</methodname>() supplies a first closure
      that uses the <literal>&gt;&gt;</literal> formatted extraction
      operator to convert the input text to the type given as
      <methodname>set_string_validator</methodname>'s first template parameter.
      The first closure gets the resulting
      <classname>std::optional</classname> value as an additional parameter
      (a <literal>std::nullopt</literal> value indicates parsing value).
      The closure can do nothing, resulting in unmodified
      <literal>&gt;&gt;</literal> operator semantics. The closure can also
      modify or adjust the parsed value, and the input field gets automatically
      updated to reflect any changes.
    </para>
  </note>

  <para>
    The second parameter to
    <methodname>set_validator</methodname>() and
    <methodname>set_string_validator</methodname>() is another closure, or a
    callable object, that takes a
    <classname>std::optional&lt;<replaceable>type</replaceable>&gt;</classname>
    and converts it to some standardized, or canonical, format, returning it as
    a <classname>std::string</classname> or a
    <classname>std::u32string</classname> which replaces the typed-in text,
    if it differs from the canonical format.
  </para>

  <note>
    <para>
      The second closure is not a <varname>IN_THREAD</varname> callback.
      <ulink url="&link-typedef-x--w-validated-input-field;"><classname>&ns;::w::validated_input_field&lt;<replaceable>type</replaceable>&gt;</classname></ulink>
      offers a <methodname>set</methodname>() method that sents the input
      field to a <replaceable>type</replaceable> value. This uses the
      second closure to format the value into a text string, so that the
      closure may not necessarily be callable <literal>ONLY IN_THREAD</literal>.
    </para>
  </note>

  <para>
    <link linkend="dateinputfield">Date input fields</link> use this
    to allow only a month and a day to be typed into the date input field,
    which gets supplemented by the default year. Input field validation
    occurs when tabbing out of the date input field, or clicking outside of
    it with the pointer button. The typed in text gets replaced by its
    canonical format that includes the year.
  </para>

  <section id="onvalidate">
    <title>Using <methodname>on_validate</methodname>()</title>

    <para>
      <methodname>set_validator</methodname>() and
      <methodname>set_string_validator</methodname>() implement their
      validation logic using <methodname>on_validate</methodname>(), which
      installs a &callback; that gets invoked by enter <keycap>Enter</keycap>,
      or by attempting to tab out of, or click out of, the text input field.
      <methodname>on_validate</methodname>() is a low-level &callback;;
      <methodname>set_validator</methodname>() and
      <methodname>set_string_validator</methodname>() add their own
      supplemental logic to retrieve the text input's contents, and
      validate it according to their rules.
    </para>

    <para>
      An additional use case for <methodname>on_validate</methodname>() is
      in conjunction with the <link linkend="itemlayoutmanager">item
	layout manager</link>.
    </para>
  </section>

  <section id="inputvalidatereference">
    <title>Understanding references between input field-related objects and avoiding circular references</title>

    <mediaobject>
      <imageobject>
	<imagedata fileref="input_fields.png" format="PNG" />
      </imageobject>
      <textobject>
	<phrase>
	  Input field object relationship
	</phrase>
      </textobject>
      <caption>
	<para>
	  This flowchart shows the relationships between the input field widget
	  objects and various callbacks.
	</para>
      </caption>
    </mediaobject>

    <para>
      A <ulink url="&link-typedef-x--w-validated-input-field;"><classname>&ns;::w::validated_input_field&lt;<replaceable>type</replaceable>&gt;</classname></ulink>
      owns a reference to its <classname>&ns;::w::input_field</classname>
      widget. For that reason it should not be placed in the
      <classname>&ns;::w::input_field</classname>'s
      <link linkend="appdata"><varname>appdata</varname></link>, this
      results in a circular reference.
    </para>

    <para>
      The input field owns references to the
      <ulink url="&link-typedef-x--w-validated-input-field-contents;"><classname>&ns;::w::validated_input_field_contents&lt;<replaceable>type</replaceable>&gt;</classname></ulink>,
      <methodname>on_validate</methodname>() and
      <link linkend="usingspinbuttons"><methodname>on_spin</methodname></link>()
      callbacks. This flowchart clarifies why
      <methodname>on_spin</methodname>() callbacks cannot capture the
      <classname>&ns;::w::validated_input_field</classname>s, as this
      creates a circular reference with the
      <classname>&ns;::w::input_field</classname> widget.
    </para>

    <para>
      <methodname>on_spin</methodname>() callbacks can capture
      <classname>&ns;::w::validated_input_field_contents&lt;<replaceable>type</replaceable>&gt;</classname>
      without creating a circular reference.
    </para>
  </section>

</chapter>
<!--
Local Variables:
mode: sgml
sgml-parent-document: ("book.xml" "book" "chapter")
End:
-->
