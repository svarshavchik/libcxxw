<!--

Copyright 2019 Double Precision, Inc.
See COPYING for distribution information.

-->

<appendix id="uixmldoc">
  <title>&appshort; theme files</title>

  <para>
    A theme UI file automates creation of display elements from an
    <acronym>XML</acronym> document, which
    <link linkend="uixmlgenerate">generates
      the contents of a &layoutmanager; or a factory</link>. The theme UI
    file also creates several supporting objects:
    <link linkend="uixmldimcolorborders"><tag class='element'>dim</tag>s,
      <tag class='element'>color</tag>s,
      and
      <tag class='element'>border</tag>s</link>; as well as custom
    <link linkend="uixmlappearance">appearance objects</link>.
  </para>

  <blockquote>
    <informalexample>
      <programlisting><![CDATA[
<?xml version="1.0" encoding="utf-8"?>
<theme version="1"
       xmlns:xi="http://www.w3.org/2003/XInclude">

  <layout type="grid" id="main-window-grid">

    <!-- ... -->

  </layout>

  <factory type="grid" id="button-row">

    <!-- ... -->

  </layout>

  <layout type="book" id="formatting-options">


    <!-- ... -->

  </layout>

  <factory type="book" id="formatting-generic-options">

    <!-- ... -->

  </layout>
</theme>
]]></programlisting>
    </informalexample>
  </blockquote>

  <para>
    The <acronym>XML</acronym> document's root element is a
    <tag class='element'>theme</tag>
    element. For future compatibility, its
    <tag class='attribute'>version</tag> attribute should be 1.
    The
    <tag class='element'>theme</tag>
    element contains
    <tag class='element'>layout</tag>
    and
    <tag class='element'>factory</tag>
    elements. Their
    <tag class='attribute'>id</tag> attributes must be unique, and serve
    as means of referring to each
    <tag class='element'>layout</tag>
    and
    <tag class='element'>factory</tag>
    element by name.
    Only the first
    <tag class='element'>layout</tag>
    and
    <tag class='element'>factory</tag>
    with a unique id takes effect, second and subsequent
    <tag class='element'>layout</tag>s
    and
    <tag class='element'>factory</tag>s
    with the same
    <tag class='attribute'>id</tag>
    get ignored.
    In all other respects the relative order of
    <tag class='element'>layout</tag>s
    and
    <tag class='element'>factory</tag>s
    doesn't matter,
    and
    together with <application>XInclude</application> this makes it possible
    to implement to create a theme file with shared
    <tag class='element'>layout</tag>s
    and
    <tag class='element'>factory</tag>s, and then
    include it from other theme files, extending and/or
    overriding parts of it.
  </para>

  <para>
    The theme file's <acronym>XML</acronym> document also contains several other
    elements, like
    <link linkend="uixmldimcolorborders"><tag class='element'>dim</tag>s,
      <tag class='element'>color</tag>s,
      <tag class='element'>border</tag>s</link>,
    and
    <link linkend="uixmlappearance"><tag class='element'>appearance</tag></link>,
    with their own
    <tag class='attribute'>id</tag>s that work the same way.
  </para>

  <para>
    The element contents of <tag class='element'>layout</tag>s or a
    <tag class='element'>factory</tag>s depend on their
    <tag class='attribute'>type</tag>.
    The element content effectively translates to invoking the corresponding
    methods of a &layoutmanager; or a &factory;:
  </para>

  <variablelist>
    <varlistentry>
      <term>
	<tag class='element'>layout</tag>s with a
	<tag class='attribute'>type</tag> of <literal>grid</literal>.
      </term>
      <listitem>
	<para>
	  The element contents of this layout invoke the corresponding
	  methods of a
	  <ulink url="&link-typedef-x--w-gridlayoutmanager;">grid
	    layout manager</ulink>.
	</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>
	<tag class='element'>layout</tag>s with a
	<tag class='attribute'>type</tag> of <literal>book</literal>.
      </term>
      <listitem>
	<para>
	  The element contents of this layout invoke the corresponding
	  methods of a
	  <ulink url="&link-typedef-x--w-booklayoutmanager;">book
	    layout manager</ulink>.
	</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>
	<tag class='element'>factory</tag>s with a
	<tag class='attribute'>type</tag> of <literal>grid</literal>.
      </term>
      <listitem>
	<para>
	  The element contents of this layout invoke the corresponding
	  methods of a
	  <ulink url="&link-typedef-x--w-gridfactory;">grid
	    factory</ulink>.
	</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>
	<tag class='element'>factory</tag>s with a
	<tag class='attribute'>type</tag> of <literal>book</literal>.
      </term>
      <listitem>
	<para>
	  The element contents of this layout invoke the corresponding
	  methods of a
	  <ulink url="&link-typedef-x--w-bookpagefactory;">book page
	    factory</ulink>.
	</para>
      </listitem>
    </varlistentry>
  </variablelist>

  <section id="uixmlgenerate">
    <title>Creating display elements from an <acronym>XML</acronym>
      theme file</title>

    <blockquote>
      <informalexample>
	<programlisting>
#include &lt;&ns;/w/uielements.H&gt;
#include &lt;&ns;/w/uigenerators.H&gt;

&ns;::w::gridlayoutmanager grid_layout=container->get_layoutmanager();

&ns;::w::const_uigenerators generators=&ns;::w::uigenerators::create("layouts.xml");

&ns;::w::labelptr created_label;
&ns;::w::buttonptr created_button;

&ns;::w::uielements creators{
    {
          {"label",
           [&amp;]
           (const INSERT_LIBX_NAMESPACE::w::factory &amp;f)
           {
               created_label=f->create_label("Lorem ipsum");
           }
          },
          {"button",
           [&amp;]
           (const INSERT_LIBX_NAMESPACE::w::factory &amp;f)
           {
               created_button=f->create_button("Lorem ipsum");
           }
          },
    }
};</programlisting>
      </informalexample>
    </blockquote>

    <para>
      Creating display elements using a theme file
      is a three step process:
    </para>

    <orderedlist>
      <listitem>
	<para>
	  <methodname>create</methodname>() an
	  <ulink url="&link-typedef-x--w-uigenerators;"><classname>&ns;::w::const_uigenerators</classname></ulink>
	  object.
	  This loads the theme file and effectively
	  compiles it into an internal representation, a
	  <ulink url="&refobj;">reference-counted object</ulink>.
	  <methodname>create</methodname>() returns a
	  <classname>&ns;::w::const_uigenerators</classname> handle, a
	  <ulink url="&constrefobj;">reference to a
	    <literal>const</literal> object</ulink> object. The compiled
	  theme file does does not change after it's created.
	</para>
      </listitem>

      <listitem>
	<para>
	  Create an
	  <ulink url="&link-x--w--uielements;"><classname>&ns;::w::uielements</classname></ulink>
	  object.
	  The
	  <classname>&ns;::w::uielements</classname>
	  gets created in automatic scope, and this individual object
	  is no longer required after the display elements get
	  <methodname>generate</methodname>()d.
	  The
	  <classname>&ns;::w::const_uigenerators</classname>
	  contains multiple layout specifications, is constant, and can
	  be used multiple times.
	</para>

	<para>
	  <classname>&ns;::w::uielements</classname>'s first member,
	  <varname>factories</varname> is a map. The map key's is a
	  text string, a label. The keys' values are lambdas, or callable
	  objects. The lambdas receive a &factory; as their parameter.
	  It's expected that each lambda uses the factory to create a single
	  display element.
	</para>
      </listitem>

      <listitem>
	<para>
	  Invoke a layout manager's
	  <methodname>generate</methodname>() to execute the compiled
	  theme file, and create its contents.
	</para>

	<blockquote>
	  <informalexample>
	    <programlisting>
grid_layout->generate("main-window-grid", generator, creators);</programlisting>
	  </informalexample>
	</blockquote>
	<para>
	  A <link linkend="gridlayoutmanager">grid layout manager</link>'s
	  <methodname>generate</methodname>() generates the contents of the
	  contents of the layout manager from the theme file. The
	  first parameter gives the name of a
	  <tag class='element'>layout</tag> whose
	  <tag class='attribute'>type</tag> must be
	  <quote>grid</quote>, and have a matching
	  <tag class='type'>id</tag> (<quote>main-window-grid</quote>, in
	  this example).
	  This executes the specification for this
	  <tag class='element'>layout</tag> from the compiled theme file.
	</para>
      </listitem>
    </orderedlist>
  </section>

  <section id="uixmldimcolorborders">
    <title><tag class='element'>dim</tag>s,
      <tag class='element'>color</tag>s,
      and
      <tag class='element'>border</tag>s</title>
    <blockquote>
      <informalexample>
	<programlisting><![CDATA[
<dim id="border-size">2.0</dim>

<color id="left-border-color">
  <r>1</r>
  <g>.5</g>
  <b>.0</b>
</color>

<border id="solid-border">
  <color>left-border-color</color>
  <width>border-size</width>
  <height>border-size</height>
</border>]]></programlisting>
      </informalexample>
    </blockquote>

    <para>
      <tag class='element'>dim</tag>ensions specify sizes of various UI
      elements,
      A <tag class='element'>dim</tag> element specifies a size in millimeters,
      which can be fractional, and calculates the number of pixels closest
      to the given size, taking into account the
      <link linkend="cxxwtheme.1">current theme's scale</link>.
      This is the same as setting a
      <ulink url="&link-typedef-x--w-dim-arg;"><classname>&ns;::w::dim_arg</classname></ulink>
      from the given value.
    </para>

    <para>
      <tag class='element'>color</tag>s define colors in terms of their
      <tag class='element'>r</tag>ed,
      <tag class='element'>g</tag>green,
      <tag class='element'>b</tag>blue, and
      <tag class='element'>a</tag>alpha (transparency) values.
      Each component ranges from 0 (none) to 1.0 (maximum intensity).
      This is the same as setting
      <ulink url="&link-typedef-x--w-color-arg;"><classname>&ns;::w::color_arg</classname></ulink>
      from an
      <ulink url="&link-x--w--rgb;"><classname>&ns;::w::rgb</classname></ulink>
      whose values are scaled from 0 to
      <literal>&ns;::w::rgb::maximum</literal> with <literal>1.0</literal>
      as <literal>&ns;::w::rgb::maximum</literal>.
    </para>

    <para>
      Other parts of the theme file refer to dimensions and colors by their
      <tag class='type'>id</tag>s:
    </para>

    <blockquote>
      <informalexample>
	<programlisting><![CDATA[
<border id="solid-border">
  <color>left-border-color</color>
  <width>border-size</width>
  <height>border-size</height>
</border>]]></programlisting>
      </informalexample>
    </blockquote>

    <para>
      A <tag class='element'>border</tag> element defines a border,
      effectively initializing a
      <ulink url="&link-typedef-x--w-border-arg;"><classname>&ns;::w::border_arg</classname></ulink>
      from a
      <ulink url="&link-x--w--border-infomm;"><classname>&ns;::w::border_infomm</classname></ulink>.

      The <tag class='element'>border</tag> contains the following elements:
    </para>
    <variablelist>
      <varlistentry>
	<term><tag class='element'>width</tag></term>
	<listitem>
	  <para>
	    This <tag class='element'>dim</tag>ension sets
	    <classname>&ns;::w::border_infomm</classname>'s
	    <varname>width</varname>.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><tag class='element'>height</tag></term>
	<listitem>
	  <para>
	    This <tag class='element'>dim</tag>ension sets
	    <classname>&ns;::w::border_infomm</classname>'s
	    <varname>height</varname>.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><tag class='element'>rounded</tag></term>
	<listitem>
	  <blockquote>
	    <informalexample>
	      <programlisting><![CDATA[
<rounded />

<rounded>1</rounded>

<rounded>0</rounded>]]></programlisting>
	    </informalexample>
	  </blockquote>

	  <para>
	    This sets
	    <classname>&ns;::w::border_infomm</classname>'s
	    <varname>rounded</varname> (an empty tag is equivalent to 1).
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><tag class='element'>hradius</tag></term>
	<listitem>
	  <para>
	    This <tag class='element'>dim</tag>ension sets
	    <classname>&ns;::w::border_infomm</classname>'s
	    <varname>hradius</varname>.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><tag class='element'>vradius</tag></term>
	<listitem>
	  <para>
	    This <tag class='element'>dim</tag>ension sets
	    <classname>&ns;::w::border_infomm</classname>'s
	    <varname>vradius</varname>.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><tag class='element'>width_scale</tag>,
	  <tag class='element'>height_scale</tag>,
	  <tag class='element'>hradius_scale</tag>, and
	  <tag class='element'>vradius_scale</tag></term>
	<listitem>
	  <para>
	    These elements' values set
	    <classname>&ns;::w::border_infomm</classname>'s
	    corresponding members.
	  </para>
	</listitem>
      </varlistentry>


      <varlistentry>
	<term><tag class='element'>color</tag></term>
	<listitem>
	  <para>
	    This <tag class='element'>color</tag>ension sets
	    <classname>&ns;::w::border_infomm</classname>'s
	    <varname>color1</varname>.
	    This is the border's primary color.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><tag class='element'>color2</tag></term>
	<listitem>
	  <para>
	    This <tag class='element'>color</tag>ension sets
	    <classname>&ns;::w::border_infomm</classname>'s
	    <varname>color2</varname>.
	    This is an optional secondary color for drawing dashed
	    borders.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><tag class='element'>dash</tag></term>
	<listitem>
	  <para>
	    This element can appear more than once, and initializes
	    <classname>&ns;::w::border_infomm</classname>'s
	    <varname>dashes</varname>. This creates a border that's drawn as
	    a dashed line instead of a solid
	    <tag class='element'>color</tag>.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

    <section id="uixmldefaultthemevalues">
      <title>Using <tag class='element'>dim</tag>s,
	<tag class='element'>color</tag>s,
	and
	<tag class='element'>border</tag>s from the default theme</title>

      <para>
	Like with all other elements, the relative order of
	<tag class='element'>dim</tag>s,
	<tag class='element'>color</tag>s,
	and
	<tag class='element'>border</tag>s, relative to each other and other
	elements in the theme file, does not matter, except that the first
	unique
	<tag class='attribute'>id</tag> takes priority over other elements
	with the same
	<tag class='attribute'>id</tag> which get ignored.
      </para>

      <para>
	<tag class='attribute'>id</tag>s that are not defined in the theme
	file are presumed to be referring to the ones specifies by the
	<link linkend="cxxwtheme.1">current default theme</link>.
      </para>
    </section>

    <section id="uixmlderivedvalues">
      <title>Derived<tag class='element'>color</tag>s,
	and
	<tag class='element'>border</tag>s</title>

      <para>
	All theme files can reference the following
	<tag class='element'>color</tag>s:
	<quote>transparent</quote>, with 0
	<tag class='element'>r</tag>,
	<tag class='element'>g</tag>,
	<tag class='element'>b</tag>, and
	<tag class='element'>a</tag> values, and the following standard
	<acronym>HTML</acronym> 3.2 colors:
	<quote><literal>black</literal></quote>,
	<quote><literal>gray</literal></quote>,
	<quote><literal>silver</literal></quote>,
	<quote><literal>white</literal></quote>,
	<quote><literal>maroon</literal></quote>,
	<quote><literal>red</literal></quote>,
	<quote><literal>olive</literal></quote>,
	<quote><literal>yellow</literal></quote>,
	<quote><literal>green</literal></quote>,
	<quote><literal>lime</literal></quote>,
	<quote><literal>teal</literal></quote>,
	<quote><literal>aqua</literal></quote>,
	<quote><literal>navy</literal></quote>,
	<quote><literal>blue</literal></quote>,
	<quote><literal>fuchsia</literal></quote>,
	<quote><literal>purple</literal></quote>.
      </para>

      <blockquote>
	<informalexample>
	  <programlisting><![CDATA[
<color id="bgcolor" scale="gray" />

<color id="bgcolor2" scale="gray">
  <r>1.2</r>
</color>

<border id="dashed-border" from="solid-border">

  <color>green</color>
  <color2>blue</color2>
  <dash>.75</dash>
  <rounded>1</rounded>
</border>

]]>
	  </programlisting>
	</informalexample>
      </blockquote>

      <para>
	Declaring a
	<tag class='element'>color</tag> with a
	<tag class='type'>scale</tag> attribute creates a new alias for another
	color in the theme file. This copies the
	<tag class='element'>r</tag>,
	<tag class='element'>g</tag>,
	<tag class='element'>b</tag>, and
	<tag class='element'>a</tag> values from the other color, and
	multiplies them by the values in the scaled alias, if specified.
	The above example creates a <literal>bgcolor2</literal> from a
	<literal>bgcolor</literal>, with the
	<tag class='element'>r</tag>ed component multiplied by 1.2 (20%
	higher red channel). The scaled component values get automatically
	truncated to the range of 0 to 1.
      </para>

      <para>
	Similarly, declaring a
	<tag class='element'>border</tag> with a
	<tag class='type'>from</tag> attribute creates a new border based
	on another border, with any given values replacing the values from
	the other border, with one exception: declaring a new color
	<tag class='element'>color</tag> replaces the
	<tag class='element'>color</tag> from the original border, and resets
	the new border's <tag class='element'>color2</tag>, unless the new
	border also specifies an explicit <tag class='element'>color2</tag>;
	and specifying the new border's <tag class='element'>color2</tag>
	requires
	explicitly specifying its <tag class='element'>color</tag>, also.
      </para>
      <blockquote>
	<informalexample>
	  <programlisting><![CDATA[
<border id="solid-border" from="dashed-border">

  <dash/>
  <rounded>0</rounded>
</border>]]>
	  </programlisting>
	</informalexample>
      </blockquote>
      <para>
	An empty <tag class='element'>dash</tag> in a derived
	<tag class='element'>border</tag> removes the inherited dashes.
      </para>
    </section>

  </section>
  <section id="uixmldimcolorgradients">
    <title>Gradient <tag class='element'>color</tag>s</title>

    <para>
      Color gradients are allowed only for
      <tag class='element'>color</tag>s that are used as background colors
      of display elements. A background color gradient is a color that
      that transitions across its display element.
    </para>

    <para>
      &appshort;'s gradient colors are directly implemented using the
      &render;'s
      <quote>CreateLinearGradient</quote>
      and <quote>CreateRadialGradient</quote> requests. &appshort; forms
      the &RENDER; request by translating and computing its values
      from a virtualized representation; from virtual
      coordinates. The following is a brief summary of the
      <acronym>XML</acronym> format that forms each request, and a brief
      description, see the &RENDER; specification for more information.
    </para>

    <blockquote>
      <informalexample>
	<programlisting><![CDATA[
<color id="bgcolor" type="linear_gradient">
  <x1>0</x1>
  <y1>0</y1>
  <x2>0</x2>
  <y2>1</y2>

  <gradient>
    <value>0</value>
    <color>gray</color>
  </gradient>
  <gradient>
    <value>1</value>
    <color>silver</color>
  </gradient>
  <gradient>
    <value>2</value>
    <color>white</color>
  </gradient>
</color>

<!-- ... -->

<layout type="grid" id="main-window-grid">

  <background_color>
    <color>bgcolor</color>
  </background_color>

  <!-- ... -->
</layout>]]></programlisting>
      </informalexample>
    </blockquote>

    <para>
      Gradient
      <tag class='element'>color</tag>s contain two or more
      <tag class='element'>gradient</tag>s.
      <tag class='element'>value</tag>s are non-negative integers, one
      of the <tag class='element'>value</tag>s must be 0, and all
      <tag class='element'>value</tag>s must be unique.
      The highest value sets the gradient's range, and each
      <tag class='element'>gradient</tag> specifies a
      <tag class='element'>color</tag> that references another plain
      <tag class='element'>color</tag>.
    </para>

    <para>
      A
      <quote><literal>linear_gradient</literal></quote>
      <tag class='attribute'>type</tag> defines a gradient with a linear
      color
      transition to each
      <tag class='element'>color</tag> across a range of 0
      to the maximum <tag class='element'>value</tag>.
      This is the same as setting
      <ulink url="&link-typedef-x--w-color-arg;"><classname>&ns;::w::color_arg</classname></ulink>
      from an
      <ulink url="&link-x--w--linear-gradient;"><classname>&ns;::w::linear_gradient</classname></ulink>.
      The above example creates a gradient that starts
      with the
      <quote><literal>gray</literal></quote> color,
      becomes a
      <quote><literal>silver</literal></quote> color at exactly the midpoint,
      and reaches the
      <quote><literal>white</literal></quote> color at the end.

      Using  <tag class='element'>value</tag>s of 0, 3, 4 results in a
      linear gradient that transitions to the 3 color at about 75% of the
      way from the starting to the ending color value.
    </para>

    <para>
      The gradient colors transition over virtual coordinates of
      <quote><literal>(x1, y1)</literal></quote> through
      <quote><literal>(x2, y2)</literal></quote>. The coordinate
      <quote><literal>(0, 0)</literal></quote> is the upper-left corner of
      the display element.
      <quote><literal>(1, 1)</literal></quote> is the bottom-right corner.
      Specifying <tag class='element'>x1</tag>,
      <tag class='element'>y1</tag>,
      <tag class='element'>x2</tag>, and
      <tag class='element'>y2</tag> is optional; and they default to
      <quote><literal>(0, 0)</literal></quote> and
      <quote><literal>(1, 1)</literal></quote>; by default, a linear
      gradient transition from the upper-left corner to the bottom-right
      corner.
    </para>

    <blockquote>
      <informalexample>
	<programlisting><![CDATA[
<color id="bgcolor" type="linear_gradient">
  <widthmm>10</widthmm>
  <heightmm>10</heightmm>

  <!-- .... -->

</color>]]></programlisting>
      </informalexample>
    </blockquote>

    <para>
      The virtual gradient range of
      <quote><literal>(0, 0)</literal></quote> to
      <quote><literal>(1, 1)</literal></quote> gets automatically scaled
      to the display element's size, so that
      <quote><literal>(0, 0)</literal></quote> is always the top-left
      corner, and
      <quote><literal>(1, 1)</literal></quote> is always the display
      element's bottom-right corner.
      Specifying
      <tag class='element'>widthmm</tag>,
      <tag class='element'>heightmm</tag> sets a fixed width or height,
      specified in millimeters,
      that gets used to compute the virtual gradient positions, instead
      of automatically adjusting them to the display element's actual size.
      This example creates a gradient for a size of 10x10 millimeters;
      <quote><literal>(0, 0)</literal></quote> is still the top-left
      corner and <quote><literal>(1, 1)</literal></quote> is 10 millimeters
      below and to the right of it.
      If the display element is larger, the additional space gets filled
      with the closest color from the computed gradient; a smaller display
      element results in a clipped gradient.
    </para>

    <para>
      A negative <tag class='element'>widthmm</tag> or
      <tag class='element'>heightmm</tag> value anchors the gradient
      coordinates to the opposite border.
      A
      <tag class='element'>widthmm</tag> and
      <tag class='element'>heightmm</tag> of
      <quote><literal>-10</literal></quote> results in a 10x10 millimeter
      gradient that's anchored at the display element's bottom-right
      corner.
    </para>
    <blockquote>
      <informalexample>
	<programlisting><![CDATA[
<color  id="bgcolor" type="radial_gradient">
  <inner_x>.5</inner_x>
  <inner_y>.5</inner_y>
  <outer_x>.5</outer_x>
  <outer_y>.5</outer_y>
  <inner_radius>0</inner_radius>
  <outer_radius>.5</outer_radius>
  <inner_radius_axis>shortest</inner_radius_axis>
  <outer_radius_axis>longest</outer_radius_axis>

  <gradient>
    <value>0</value>
    <color>gray</color>
  </gradient>
  <gradient>
    <value>1</value>
    <color>white</color>
  </gradient>
</color>]]></programlisting>
      </informalexample>
    </blockquote>

    <para>
      A
      <quote><literal>radial_gradient</literal></quote>
      <tag class='attribute'>type</tag> also defines a gradient from
      a <tag class='element'>value</tag>s of 0 to the maximum
      <tag class='element'>value</tag>.
      The radial gradiant also gets defined in a virtual coordinate range
      <quote><literal>(0, 0)</literal></quote> to
      <quote><literal>(1, 1)</literal></quote>, and also based
      on two coordinates in the range, which are specified as
      <quote><literal>(inner_x, inner_y)</literal></quote> and
      <quote><literal>(outer_x, outer_y)</literal></quote>.
    </para>

    <para>
      <tag class='element'>inner_radius</tag> defines a circle whose
      center is
      <quote><literal>(inner_x, inner_y)</literal></quote> and
      <tag class='element'>outer_radius</tag> defines a circle whose
      center is
      <quote><literal>(outer_x, outer_y)</literal></quote>.
      The actual radius value of 1 is defined by
      <tag class='element'>inner_radius_axis</tag> and
      <tag class='element'>outer_radius_axis</tag>, respectively.
      This is the same as setting
      <ulink url="&link-typedef-x--w-color-arg;"><classname>&ns;::w::color_arg</classname></ulink>
      from an
      <ulink url="&link-x--w--radial-gradient;"><classname>&ns;::w::radial_gradient</classname></ulink>.
    </para>

    <para>
      The above example shows the default values for all these settings,
      if not specified.
    </para>

    <para>
      The inner circle must be contained entirely within the outer circle.
      The
      <tag class='element'>color</tag> value of 0 forms the area inside
      the inner circle, and the color gradient transition accordingly,
      to the maximum
      <tag class='element'>color</tag> value that forms the area outside the
      outer circle.
    </para>

    <para>
      Optional
      <tag class='element'>widthmm</tag> and
      <tag class='element'>heightmm</tag> values work the same way for radial
      gradient as they do for linear gradients.
    </para>
  </section>

  <section id="uixmllayoutgrid">
    <title>
      <tag class='attribute'>type</tag>=<quote>grid</quote>
      <tag class='element'>layout</tag>s
    </title>

    <blockquote>
      <informalexample>
	<programlisting><![CDATA[
<dim id="extra-padding">2.0</dim>

<layout type="grid" id="main-window-grid">

  <halign>
    <col>0</col>
    <halign>left</halign>
  </halign>

  <valign>
    <row>0</row>
    <valign>middle</valign>
  </valign>

  <padding>
    <row>0</row>
    <side>left</side>
    <padding>extra-padding</padding>
  </padding>
</layout>]]>

&ns;::w::gridlayoutmanager glm=container->get_layoutmanager();

glm->generate("main-window-grid", generator, elements);</programlisting>
      </informalexample>
    </blockquote>

    <para>
      The contents of a
      <tag class='element'>layout</tag>s of
      <tag class='attribute'>type</tag>=<quote>grid</quote>
      specify the methods invoked by <link linkend="gridlayoutmanager">grid
	layout manager</link>'s <methodname>generate</methodname>().
    </para>

    <section id="uixmllayoutgridbackgroundcolor">
      <title><tag class='element'>background_color</tag></title>

      <blockquote>
	<informalexample>
	  <programlisting><![CDATA[
<layout type="grid" id="main-window-grid">

<!-- ... -->

  <background_color>
    <color>bgcolor</color>
  </background>

<!-- ... -->

</layout>]]></programlisting>
	</informalexample>
      </blockquote>
      <para>
	<tag class='element'>background_color</tag>
	invokes the grid layout manager's
	<methodname>set_background_color</methodname>() method.
      </para>
    </section>

    <section id="uixmllayoutgridremovebackgroundcolor">
      <title><tag class='element'>remove_background_color</tag></title>

      <blockquote>
	<informalexample>
	  <programlisting><![CDATA[
<layout type="grid" id="main-window-grid">

<!-- ... -->

  <remove_background_color />

<!-- ... -->

</layout>]]></programlisting>
	</informalexample>
      </blockquote>
      <para>
	<tag class='element'>remove_background_color</tag>
	invokes the grid layout manager's
	<methodname>remove_background_color</methodname>() method.
      </para>
    </section>

    <section id="uixmllayoutgridhalign">
      <title><tag class='element'>halign</tag></title>

      <blockquote>
	<informalexample>
	  <programlisting><![CDATA[
<layout type="grid" id="main-window-grid">

<!-- ... -->

  <halign>
    <col>0</col>
    <halign>centered</halign>
  </halign>

<!-- ... -->

</layout>]]></programlisting>
	</informalexample>
      </blockquote>
      <para>
	<tag class='element'>halign</tag>
	invokes the grid layout manager's
	<methodname>col_alignment</methodname>() method.
	The
	<tag class='element'>halign</tag> value is one of:
	<quote><literal>left</literal></quote>,
	<quote><literal>center</literal></quote>,
	<quote><literal>right</literal></quote>, or
	<quote><literal>fill</literal></quote>.
      </para>
    </section>

    <section id="uixmllayoutgridvalign">
      <title><tag class='element'>valign</tag></title>

      <blockquote>
	<informalexample>
	  <programlisting><![CDATA[
<layout type="grid" id="main-window-grid">

<!-- ... -->

  <valign>
    <row>0</row>
    <valign>bottom</valign>
  </valign>

<!-- ... -->

</layout>]]></programlisting>
	</informalexample>
      </blockquote>
      <para>
	<tag class='element'>valign</tag>
	invokes the grid layout manager's
	<methodname>row_alignment</methodname>() method.
	The
	<tag class='element'>valign</tag> value is one of:
	<quote><literal>top</literal></quote>,
	<quote><literal>middle</literal></quote>,
	<quote><literal>bottom</literal></quote>, or
	<quote><literal>fill</literal></quote>.
      </para>
    </section>


    <section id="uixmllayoutgridpadding">
      <title><tag class='element'>padding</tag></title>

      <blockquote>
	<informalexample>
	  <programlisting><![CDATA[
<dim id="cell-padding">4.0</dim>

<layout type="grid" id="main-window-grid">

<!-- ... -->

  <padding>
    <side>top</side>
    <row>0</row>
    <padding>cell-padding</padding>
  </padding>

  <padding>
    <side>bottom</side>
    <row>0</row>
    <padding>cell-padding</padding>
  </padding>

  <padding>
    <side>left</side>
    <col>0</col>
    <padding>cell-padding</padding>
  </padding>

  <padding>
    <side>right</side>
    <col>0</col>
    <padding>cell-padding</padding>
  </padding>

<!-- ... -->

</layout>]]></programlisting>
	</informalexample>
      </blockquote>
      <para>
	<tag class='element'>padding</tag>
	invokes the grid layout manager's
	<methodname>row_top_padding</methodname>(),
	<methodname>row_bottom_padding</methodname>(),
	<methodname>col_left_padding</methodname>(), or
	<methodname>col_right_padding</methodname>() method.
      </para>
    </section>

    <section id="uixmllayoutgridborder">
      <title><tag class='element'>default_col_border</tag>
      and <tag class='element'>default_row_border</tag></title>

      <blockquote>
	<informalexample>
	  <programlisting><![CDATA[

<border id="thick">

<!-- .. -->

</border>

<layout type="grid" id="main-window-grid">

<!-- ... -->

   <default_col_border>
      <col>1</col>
      <border>thick</border>
   </default_col_border>

   <default_row_border>
      <row>1</row>
      <border>thick</border>
   </default_row_border>

<!-- ... -->

</layout>]]></programlisting>
	</informalexample>
      </blockquote>
      <para>
	These elements
	invoke the grid layout manager's
	<methodname>default_col_border()</methodname>() or
	<methodname>default_row_border()</methodname>() method.
      </para>
    </section>

    <section id="uixmllayoutgridpercent">
      <title><tag class='element'>percent</tag></title>

      <blockquote>
	<informalexample>
	  <programlisting><![CDATA[
<layout type="grid" id="main-window-grid">

<!-- ... -->

   <percent>
     <col>0</col>
     <percentage>50</percentage>
   </percent>

   <percent>
     <row>0</row>
     <percentage>50</percentage>
   </percent>

<!-- ... -->

</layout>]]></programlisting>
	</informalexample>
      </blockquote>
      <para>
	<tag class='element'>percent</tag>
	invokes the grid layout manager's
	<methodname>requested_col_width</methodname>() or
	<methodname>requested_row_height</methodname>() method.
      </para>
    </section>

    <section id="uixmllayoutgridremovedefaults">
      <title><tag class='element'>remove_col_defaults</tag> and
	<tag class='element'>remove_row_defaults</tag></title>
      <blockquote>
	<informalexample>
	  <programlisting><![CDATA[
<layout type="grid" id="main-window-grid">

<!-- ... -->

   <remove_col_defaults>
     <col>0</col>
   </remove_col_defaults>

   <remove_row_defaults>
     <row>0</row>
   </remove_row_defaults>


<!-- ... -->

</layout>]]></programlisting>
	</informalexample>
      </blockquote>
      <para>
	These elements
	invoke the grid layout manager's
	<methodname>remove_col_defaults</methodname>() and
	<methodname>remove_row_defaults</methodname>() methods.
      </para>
    </section>

    <section id="uixmllayoutgridremove">
      <title><tag class='element'>remove_all</tag>,
	<tag class='element'>remove_row</tag>, and
	<tag class='element'>remove_cell</tag></title>

      <blockquote>
	<informalexample>
	  <programlisting><![CDATA[
<layout type="grid" id="main-window-grid">

<!-- ... -->

   <remove_all />

   <remove_row>
     <row>0</row>
   </remove_row>

   <remove_cell>
     <row>0</row>
     <col>0</col>
   </remove_cell>
<!-- ... -->

</layout>]]></programlisting>
	</informalexample>
      </blockquote>
      <para>
	These elements
	invoke the grid layout manager overloaded methods that remove
	all existing contents, a single row, or a single cell.
      </para>
    </section>

    <section id="uixmllayoutgridcreaterows">
      <title><tag class='element'>append_row</tag>,
	<tag class='element'>insert_row</tag>,
	<tag class='element'>append_columns</tag>,
	<tag class='element'>insert_columns</tag>,
	<tag class='element'>replace_row</tag>, and
	<tag class='element'>replace_cell</tag></title>

      <blockquote>
	<informalexample>
	  <programlisting><![CDATA[
<layout type="grid" id="main-window-grid">

<!-- ... -->

  <append_row>
    <name>statusbar</name>
  </append_row>

  <insert_row>
    <row>1</row>
    <name>statusbar</name>
  </insert_row>

  <append_columns>
    <row>1</row>
    <name>statusbar</name>
  </append_columns>

  <insert_columns>
    <row>1</row>
    <col>0</col>
    <name>statusbar</name>
  </insert_columns>

  <replace_row>
    <row>1</row>
    <name>statusbar</name>
  </replace_row>

  <replace_cell>
    <row>1</row>
    <col>1</col>
    <name>statusbar</name>
  </replace_cell>

<!-- ... -->

</layout>

<!-- ... -->

<factory type="grid" id="statusbar">

<!-- ... -->

</factory>

]]></programlisting>
	</informalexample>
      </blockquote>
      <para>
      	These methods create a new grid factory using the corresponding
	grid layout manager method; then use the referenced
	<tag class='attribute'>type</tag>=<quote><literal>grid</literal></quote>
	<tag class='element'>factory</tag> element to create new elements
	in the grid layout manager's container using the new grid factory.
      </para>
    </section>
  </section>

  <section id="uixmlfactorygrid">
    <title>
      <tag class='attribute'>type</tag>=<quote>grid</quote>
      <tag class='element'>factory</tag>s
    </title>

    <blockquote>
      <informalexample>
	<programlisting><![CDATA[
<factory type="grid" id="statusrow">

  <padding>
    <side>all</side>
    <padding>2</padding>
  </padding>

  <element>
    <name>label</name>
  </element>

</factory>]]></programlisting>
      </informalexample>
    </blockquote>

    <para>
      The contents of a
      <tag class='element'>factory</tag>s of
      <tag class='attribute'>type</tag>=<quote>grid</quote>
      specify the methods invoked on a
      <ulink url="&link-typedef-x--w-gridfactory;">grid
	    factory</ulink>.
    </para>

    <section id="uixmlfactorygridhalign">
      <title><tag class='element'>halign</tag></title>

      <blockquote>
	<informalexample>
	  <programlisting><![CDATA[
<factory type="grid" id="statusrow">

<!-- ... -->

    <halign>
       <halign>right</halign>
    </halign>

<!-- ... -->

</factory>]]></programlisting>
	</informalexample>
      </blockquote>
      <para>
	<tag class='element'>halign</tag>
	invokes the grid factory's
	<methodname>halign</methodname>()
	method.
	The
	<tag class='element'>halign</tag> value is one of:
	<quote><literal>left</literal></quote>,
	<quote><literal>center</literal></quote>,
	<quote><literal>right</literal></quote>, or
	<quote><literal>fill</literal></quote>.
      </para>
    </section>

    <section id="uixmlfactorygridvalign">
      <title><tag class='element'>valign</tag></title>

      <blockquote>
	<informalexample>
	  <programlisting><![CDATA[
<factory type="grid" id="statusrow">

<!-- ... -->

    <valign>
       <valign>middle</valign>
    </valign>

<!-- ... -->

</factory>]]></programlisting>
	</informalexample>
      </blockquote>
      <para>
	<tag class='element'>valign</tag>
	invokes the grid factory's
	<methodname>valign</methodname>()
	method.
	The
	<tag class='element'>valign</tag> value is one of:
	<quote><literal>top</literal></quote>,
	<quote><literal>middle</literal></quote>,
	<quote><literal>bottom</literal></quote>, or
	<quote><literal>fill</literal></quote>.
      </para>
    </section>

    <section id="uixmlfactorygridpadding">
      <title><tag class='element'>padding</tag></title>

      <blockquote>
	<informalexample>
	  <programlisting><![CDATA[
<factory type="grid" id="statusrow">

<!-- ... -->

  <padding>
    <side>all</side>
    <padding>cell-padding</padding>
  </padding>

<!-- ... -->

</factory>]]></programlisting>
	</informalexample>
      </blockquote>
      <para>
	<tag class='element'>padding</tag>
	invokes the grid factory's
	<methodname>padding</methodname>(),
	<methodname>left_padding</methodname>(),
	<methodname>right_padding</methodname>(),
	<methodname>top_padding</methodname>(), or
	<methodname>bottom_padding</methodname>() method.
	The <tag class='element'>side</tag> value is one of
	<quote><literal>all</literal></quote>,
	<quote><literal>left</literal></quote>,
	<quote><literal>right</literal></quote>,
	<quote><literal>top</literal></quote>, or
	<quote><literal>bottom</literal></quote>.
     </para>
    </section>

    <section id="uixmlfactorygridborder">
      <title><tag class='element'>border</tag></title>

      <blockquote>
	<informalexample>
	  <programlisting><![CDATA[
<factory type="grid" id="statusrow">

<!-- ... -->

  <border>
    <side>all</side>
    <border>thick-border</border>
  </padding>


<!-- ... -->

</factory>]]></programlisting>
	</informalexample>
      </blockquote>
      <para>
	<tag class='element'>border</tag>
	invokes the grid factory's
	<methodname>border</methodname>(),
	<methodname>left_border</methodname>(),
	<methodname>right_border</methodname>(),
	<methodname>top_border</methodname>(), or
	<methodname>bottom_border</methodname>() method.
	The <tag class='element'>side</tag> value is one of
	<quote><literal>all</literal></quote>,
	<quote><literal>left</literal></quote>,
	<quote><literal>right</literal></quote>,
	<quote><literal>top</literal></quote>, or
	<quote><literal>bottom</literal></quote>.
      </para>
    </section>

    <section id="uixmlfactorygridspan">
      <title><tag class='element'>colspan</tag> and
	<tag class='element'>rowspan</tag></title>

      <blockquote>
	<informalexample>
	  <programlisting><![CDATA[
<factory type="grid" id="statusrow">

<!-- ... -->

   <colspan>
     <columns>2</columns>
   </colspan>

   <rowspan>
     <rows>2</rows>
   </rowspan>

<!-- ... -->

</factory>]]></programlisting>
	</informalexample>
      </blockquote>
      <para>
	<tag class='element'>colspan</tag>
	and
	<tag class='element'>rowspan</tag>
	invoke the grid factory's
	<methodname>colspan</methodname>() and
	<methodname>rowspan</methodname>() methods, respectively.
      </para>
    </section>

    <section id="uixmlfactorygridremovewhenhidden">
      <title><tag class='element'>remove_when_hidden</tag></title>

      <blockquote>
	<informalexample>
	  <programlisting><![CDATA[
<factory type="grid" id="statusrow">

<!-- ... -->

  <remove_when_hidden />

<!-- ... -->

</factory>]]></programlisting>
	</informalexample>
      </blockquote>
      <para>
	<tag class='element'>remove_when_hidden</tag>
	invokes the grid factory's
	<methodname>remove_when_hidden</methodname>()
	method.
      </para>
    </section>

    <section id="uixmlfactorygridelement">
      <title><tag class='element'>element</tag></title>

      <blockquote>
	<informalexample>
	  <programlisting><![CDATA[
<factory type="grid" id="statusrow">

<!-- ... -->

  <element>
    <name>label</name>
  </element>

<!-- ... -->

</factory>]]>


&ns;::w::uielements element_factory{
  {
    {"label",
     []
     (const &ns;::w::factory &amp;factory)
     {
         factory-&gt;create_label("Label");
     }
    }
  }
};</programlisting>
	</informalexample>
      </blockquote>
      <para>
	<tag class='element'>element</tag>
	invokes the named callback from the
	<ulink url="&link-x--w--uielements;"><classname>&ns;::w::uielements</classname></ulink>

	parameter to
	<link linkend="uixmlgenerate"><methodname>generate</methodname>()</link>.
	This callback receives a
	<ulink url="&link-typedef-x--w-factory;"><classname>&ns;::w:;factory</classname></ulink>
	parameter which gets used, presumably, to create a display element.
	The first member of the
	<classname>&ns;::w::uielements</classname>
	object is map. The map's key is a <classname>std::string</classname>,
	and the
	<tag class='element'>name</tag>
	value gives the callback's key value. An exception gets thrown
	if the <tag class='element'>name</tag>
	key does not exist.
      </para>

      <para>
	It's possible that the same
	<tag class='element'>name</tag> value appears more than once, in the
	same or different
	<tag class='element'>factory</tag>s. Each occurence of a
	<tag class='element'>name</tag> results in the callback getting
	invoked.
      </para>
    </section>

    <section id="uixmlfactorygridcontainer">
      <title><tag class='element'>container</tag></title>

      <blockquote>
	<informalexample>
	  <programlisting><![CDATA[
<factory type="grid" id="statusrow">

<!-- ... -->

  <container>
    <type>grid</type>
    <name>bottom-container</name>
  </container>

<!-- ... -->

  <container>
    <type>grid</type>
    <name>settings</name>
  </container>

<!-- ... -->

</factory>

<!-- ... -->

<layout type="grid" id="bottom-container">

<!-- ... -->

</layout>

<layout type="book" id="setting">

<!-- ... -->

</layout>]]></programlisting>
	</informalexample>
      </blockquote>
      <para>
	<tag class='element'>container</tag>
	creates a
	<link linkend="uixmlfactorygridelement">new grid element</link>
	by creating a new &container; and then
	<methodname>generate</methodname>()ing the new container from
	another
	<tag class='element'>layout</tag> in the theme file, whose
	<tag class='attribute'>id</tag> is
	<tag class='element'>name</tag>.
	<tag class='element'>type</tag> must be either
	<quote><literal>grid</literal></quote> or
	<quote><literal>book</literal></quote>, and must match the
	<tag class='element'>layout</tag>'s
	<tag class='attribute'>type</tag>.
      </para>

      <para>
	<tag class='element'>container</tag> is
	equivalent to invoking a callback using an
	<tag class='element'>element</tag>, having the callback
	create a new container with the appropriate &layoutmanager;,
	and then <methodname>generate</methodname>()ing its contents
	from the layout specified by the
	<tag class='element'>name</tag> value.
      </para>
    </section>
  </section>

  <section id="uixmllayoutbook">
    <title>
      <tag class='attribute'>type</tag>=<quote>book</quote>
      <tag class='element'>layout</tag>s
    </title>

    <blockquote>
      <informalexample>
	<programlisting><![CDATA[
<layout type="book" id="application-settings">

<!-- ... -->

</layout>]]>

&ns;::w::booklayoutmanager glm=container->get_layoutmanager();

glm->generate("application-settings", generator, elements);</programlisting>
      </informalexample>
    </blockquote>

    <para>
      The contents of a
      <tag class='element'>layout</tag>s of
      <tag class='attribute'>type</tag>=<quote>book</quote>
      specify the methods invoked by <link linkend="booklayoutmanager">book
	layout manager</link>'s <methodname>generate</methodname>().
    </para>


    <section id="uixmllayoutbookappendinsertpages">
      <title><tag class='element'>append_pages</tag>
      and <tag class='element'>insert_pages</tag></title>
      <blockquote>
	<informalexample>
	  <programlisting><![CDATA[
<layout type="book" id="application-settings">

<!-- ... -->

    <append_pages>
      <name>general-settings</name>
    </append_pages>

    <append_pages>
      <name>process-settings</name>
      <pos>0</pos>
    </append_pages>


<!-- ... -->

</layout>

<factory type="book" id="general-settings">

<!-- ... -->

</factory>

<factory type="book" id="process-settings">

<!-- ... -->

</factory>

]]></programlisting>
	</informalexample>
      </blockquote>
      <para>
	<tag class='element'>append_pages</tag> and
	<tag class='element'>insert_pages</tag>
	invoke the book layout manager's
	<methodname>append</methodname>() and
	<methodname>insert</methodname>() methods to create a new
	<link linkend="bookpagefactory"><classname>&ns;::w::bookpagefactory</classname></link>,
	then use the
	<tag class='element'>name</tag>d
	<tag class='attribute'>type</tag>=<quote><literal>book</literal></quote>
	<tag class='element'>factory</tag> element to create new book
	pages.
      </para>
    </section>

    <section id="uixmllayoutbookremove">
      <title><tag class='element'>remove</tag></title>
      <blockquote>
	<informalexample>
	  <programlisting><![CDATA[
<layout type="book" id="application-settings">

<!-- ... -->

  <open>
    <page>0</page>
  </open>

<!-- ... -->

</layout>]]></programlisting>
	</informalexample>
      </blockquote>
      <para>
	<tag class='element'>remove</tag>
	invokes the book layout manager's
	<methodname>remove</methodname>() method.
      </para>
    </section>

    <section id="uixmllayoutbookopen">
      <title><tag class='element'>open</tag></title>
      <blockquote>
	<informalexample>
	  <programlisting><![CDATA[
<layout type="book" id="application-settings">

<!-- ... -->

  <open>
    <page>0</page>
  </open>

<!-- ... -->

</layout>]]></programlisting>
	</informalexample>
      </blockquote>
      <para>
	<tag class='element'>open</tag>
	invokes the book layout manager's
	<methodname>open</methodname>() method.
      </para>
    </section>

    <section id="uixmllayoutbookclose">
      <title><tag class='element'>close</tag></title>
      <blockquote>
	<informalexample>
	  <programlisting><![CDATA[
<layout type="book" id="application-settings">

<!-- ... -->

   <close />

<!-- ... -->

</layout>]]></programlisting>
	</informalexample>
      </blockquote>
      <para>
	<tag class='element'>close</tag>
	invokes the book layout manager's
	<methodname>close</methodname>() method.
      </para>
    </section>
  </section>

  <section id="uixmlfactorybook">
    <title>
      <tag class='attribute'>type</tag>=<quote>book</quote>
      <tag class='element'>factory</tag>s
    </title>

    <blockquote>
      <informalexample>
	<programlisting><![CDATA[
<factory type="book" id="settings">

    <add>
      <label>general-label</label>
      <layout>options</layout>
    </add>

</factory>]]></programlisting>
      </informalexample>
    </blockquote>

    <para>
      The contents of a
      <tag class='element'>factory</tag>s of
      <tag class='attribute'>type</tag>=<quote>book</quote>
      specify the methods invoked on a
      <link linkend="bookpagefactory">book page factory</link>.
    </para>

    <section id="uixmlfactorybookhalign">
      <title><tag class='element'>halign</tag></title>

      <blockquote>
	<informalexample>
	  <programlisting><![CDATA[
<factory type="book" id="settings">

<!-- ... -->

    <halign>
       <halign>right</halign>
    </halign>

<!-- ... -->

</factory>]]></programlisting>
	</informalexample>
      </blockquote>
      <para>
	<tag class='element'>halign</tag>
	invokes the book page factory's
	<methodname>halign</methodname>()
	method.
	The
	<tag class='element'>halign</tag> value is one of:
	<quote><literal>left</literal></quote>,
	<quote><literal>center</literal></quote>,
	<quote><literal>right</literal></quote>, or
	<quote><literal>fill</literal></quote>.
      </para>
    </section>

    <section id="uixmlfactorybookvalign">
      <title><tag class='element'>valign</tag></title>

      <blockquote>
	<informalexample>
	  <programlisting><![CDATA[
<factory type="book" id="settings">

<!-- ... -->

    <valign>
       <valign>middle</valign>
    </valign>

<!-- ... -->

</factory>]]></programlisting>
	</informalexample>
      </blockquote>
      <para>
	<tag class='element'>valign</tag>
	invokes the book page factory's
	<methodname>valign</methodname>()
	method.
	The
	<tag class='element'>valign</tag> value is one of:
	<quote><literal>top</literal></quote>,
	<quote><literal>middle</literal></quote>,
	<quote><literal>bottom</literal></quote>, or
	<quote><literal>fill</literal></quote>.
      </para>
    </section>

    <section id="uixmlfactorybookcontainer">
      <title><tag class='element'>container</tag></title>

      <blockquote>
	<informalexample>
	  <programlisting><![CDATA[
<factory type="book" id="settings">

<!-- ... -->

    <container>
       <label>general-label</label>
       <shortcut>general-shortcut</shortcut>
       <name>general-settings</name>
       <type>grid</type>
    </container>

<!-- ... -->

</factory>

<layout type="grid" id="general-settings">

</layout>

&ns;::w::uielements element_factory{
  {
    {"general-label",
     []
     (const &ns;::w::factory &amp;factory)
     {
         factory-&gt;create_label({"underline"_decoration,
                                   "G",
                                   "no"_decoration,
                                   "eneral"});
     }
    }
  },
  {
    {"general-shortcut",
     {"Alt",'G'}}
  },
};]]></programlisting>
	</informalexample>
      </blockquote>

      <para>
	<tag class='element'>container</tag>
	invokes the book page factory's
	<methodname>add</methodname>()
	method, to create a new &container;.

	<tag class='element'>label</tag>'s value gives the name of a
	factory from
	<link linkend="uixmlgenerate"><classname>&ns;::w::uielements</classname></link>'s
	factories map, this factory gets invoked for the purpose of creating
	the new page tab's label.
	The optional <tag class='element'>shortcut</tag>'s value
	specifies the new page's keyboard shortcut.
      </para>

      <para>
	<ulink url="&link-x--w--uielements;"><classname>&ns;::w::uielements</classname></ulink>'s
	second member is a
	<varname>shortcuts</varname> map. The map key is a text string,
	<tag class='element'>shortcut</tag>'s value references the map key.
	The key's value is a keyboard
	<ulink url="&link-x--w--shortcut;"><classname>&ns;::w::shortcut</classname></ulink>.
      </para>

      <para>
	<tag class='element'>name</tag> and
	<tag class='element'>type</tag> means the same thing as in the
	<link linkend="uixmlfactorygridcontainer">grid factory's
	  <tag class='element'>container</tag></link>.
	<tag class='element'>name</tag>'s value is an
	<tag class='attribute'>id</tag> of a
	<tag class='element'>layout</tag>,
	of a match <tag class='element'>type</tag>, that
	<link linkend="uixmlgenerate">generate</link>()s the contents of the
	new page.
      </para>
    </section>
  </section>

  <section id="uixmlnewlayouts">
    <title>Created <varname>new_layouts</varname></title>
    <blockquote>
      <informalexample>
	<programlisting><![CDATA[
<factory type="grid" id="statusrow">

<!-- ... -->

  <container>
    <type>grid</type>
    <name>bottom-container</name>
  </container>
</factory>

<!-- ... -->

<layout type="grid" id="bottom-container">

<!-- ... -->

</layout>]]>

#include &lt;&ns;/w/uielements.H&gt;
#include &lt;&ns;/w/uigenerators.H&gt;

&ns;::w::labelptr created_label;

&ns;::w::gridlayoutmanager grid_layout=container->get_layoutmanager();

&ns;::w::const_uigenerators generators=&ns;::w::uigenerators::create("layouts.xml");

&ns;::w::uielements elements{
          {"label",
           [&amp;]
           (const INSERT_LIBX_NAMESPACE::w::factory &amp;f)
           {
               created_label=f->create_label("Lorem ipsum");
           }
          },

    // ...

};

&ns;::w::gridlayoutmanager glm=container->get_layoutmanager();

glm->generate("main-window-grid", generator, elements);

auto iter=elements.new_layouts.find("bottom-container");

if (iter != elements.new_layouts.end())
{
    &ns;::w::container bottom_container=iter->second;


// ...
</programlisting>
      </informalexample>
    </blockquote>

    <para>
      Display elements that get <methodname>generate</methodname>()d by
      <link linkend="uixmlgenerate">the element factories</link> can be
      saved directly, by each factory.
      New containers that get created by the theme file's factories get
      placed into
      <classname>&ns;::w::uielements</classname>'s
      <varname>new_layouts</varname> which is a map. The map's key is the
      theme file's layout
      <tag class='attribute'>id</tag>.
    </para>

    <note>
      <para>
	<varname>new_layouts</varname> is a map, and not a multi-map. The
	best way to save multiple containers
	created from the same layout <tag class='attribute'>id</tag>,
	by a single
	<methodname>generate</methodname>(), is to use different
	<tag class='attribute'>id</tag>s for each layout and use
	<application>XInclude</application> to include the same contents
	of all layouts.
      </para>
    </note>
  </section>

  <section id="uixmlappearance">
    <title><tag class='element'>appearance</tag>s</title>

    <mediaobject>
      <imageobject>
	<imagedata fileref="uigenerator3.png" format="PNG"
		   contentwidth="266px" contentdepth="206px" />
      </imageobject>
      <textobject>
	<phrase>
	  Creating custom &appearance_object;s
	</phrase>
      </textobject>
      <caption>
	<para>
	  Each <tag class='element'>appearance</tag> creates a custom
	  &appearance_object;.
	  <ulink url="examples/uigenerator3.C"><filename>uigenerator3.C</filename></ulink>
	  creates a <link linkend="checkradio">checkbox</link> with a custom
	  visual appearance. The default checkbox image gets replaced with
	  a chevron that alternates between pointing left and right, with
	  a large, blocky input focus frame around it.
	</para>
      </caption>
    </mediaobject>

    <blockquote>
      <title><ulink url="examples/uigenerator3.xml">uigenerator3.xml</ulink></title>

      <informalexample>
	<programlisting><xi:include href="../examples/uigenerator3.xml" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
      </informalexample>
    </blockquote>

    <para>
      Each <tag class='element'>appearance</tag> must have a unique
      <tag class='attribute'>id</tag> and a valid
      <tag class='attribute'>type</tag>. The first occurence of an
      <tag class='element'>appearance</tag> with a designated
      <tag class='attribute'>id</tag> takes effect, and subsequent
      <tag class='element'>appearance</tag>s with the same
      <tag class='attribute'>id</tag> get ignored.
    </para>

    <section id="uixmlappearanceusing">
      <title>Creating and using <tag class='element'>appearance</tag> objects</title>
      <blockquote>
	<informalexample>
	  <programlisting>
auto generator=&ns;::w::const_uigenerators::create("uigenerator3.xml");

// ...

factory-&gt;create_checkbox(generator-&gt;lookup_appearance("custom-checkbox"));</programlisting>
	</informalexample>
      </blockquote>

      <para>
	A <link linkend="uixmlgenerate">generator</link>'s
	<methodname>lookup_appearance</methodname> returns an appearance
	object specified by its <quote>id</quote>. This theme file creates
	an appearance object named <quote>custom-checkbox</quote>, and
	<methodname>lookup_appearance</methodname>() returns it. This gets
	passed to a &factory;'s <methodname>create_checkbox</methodname>()
	that takes an optional appearance object as a parameter, and this
	sets the new checkbox's appearance using the specified appearance
	object.
      </para>

      <para>
	<methodname>lookup_appearance</methodname>() returns a generatic
	<classname>&ns;;::w::const_appearance</classname> object from which
	all appearance objects get derived from. The following table lists
	all appearance object classes and the
	<tag class='attribute'>type</tag>s which create them.
      </para>

      <para>
	<tag class='element'>appearance</tag> 's optional
	<tag class='element'>from</tag> attribute specifies another,
	<quote>parent</quote>
	<tag class='element'>appearance</tag> that this
	<tag class='element'>appearance</tag> gets based from.
	The following table lists all available appearance
	<tag class='attribute'>type</tag>s, and the resulting appearance
	object class.
	<tag class='attribute'>from</tag> specifies either:
      </para>

      <itemizedlist>
	<listitem>
	  <para>
	    The <tag class='attribute'>id</tag> of another, parent
	    appearance object.
	  </para>
	</listitem>

	<listitem>
	  <para>
	    One of the built-in themes from the following table.
	    The default built-in theme gets used when a
	    <tag class='attribute'>from</tag> parent does not get
	    specified.
	  </para>
	</listitem>
      </itemizedlist>
      &uixmlappearance_list;
    </section>

    <section id="uixmlappearancefields">
      <title>Contents of <tag class='element'>appearance</tag>s in theme files</title>
      <blockquote>
	<informalexample>
	  <programlisting><![CDATA[
<appearance id="custom-checkbox-focus-border" type="focus_border">
  <focusoff_border>custom-focusoff</focusoff_border>
  <focuson_border>custom-focuson</focuson_border>
</appearance>]]></programlisting>
	</informalexample>
      </blockquote>

      <para>
	Each
	<tag class='element'>appearance</tag> contains elements whose names
	match the names of the fields in the corresponding appearance classes.
	A <ulink url="&link-x--w--focus-border-appearance-properties;">focus
	  border appearance object</ulink> contains two fields,
	<varname>focusoff_border</varname>, and
	<varname>focuson_border</varname>, and an
	<tag class='element'>appearance</tag> with a
	<literal>focus_border</literal> <tag class='attribute'>type</tag>
	specifies their values accordingly.
      </para>

      <para>
	If not explicitly specified,
	the value of each field comes from the parent
	<tag class='element'>appearance</tag>, explicitly specified by the
	<tag class='attribute'>from</tag> attribute, or the default parent.
      </para>

      <para>
	The fields get specified as follows:
      </para>

      <variablelist>
	<varlistentry>
	  <term>
	   <classname>std::string</classname> fields
	  </term>
	  <listitem>
	    <blockquote>
	      <informalexample>
		<programlisting><![CDATA[
<images>scroll-left1</images>
]]></programlisting>
	      </informalexample>
	    </blockquote>
	    <para>
	      <classname>std::string</classname> values get specified directly.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>
	    <ulink url="&link-typedef-x--w-border-arg;"><classname>&ns;::w::border_arg</classname></ulink> fields
	  </term>
	  <listitem>
	    <blockquote>
	      <informalexample>
		<programlisting><![CDATA[
<focuson_border>custom-focuson</focuson_border>
]]></programlisting>
	      </informalexample>
	    </blockquote>
	    <para>
	      <classname>&ns;::w::border_arg</classname> values are
	      are <tag class='attribute'>id</tag>s of
	      <tag class='element'>border</tag>s in the theme file. They
	      may also reference border <tag class='attribute'>id</tag>s
	      from the current display theme, but this is not documented.
	      A more future-proof way of borrowing a standard theme border
	      is to use one of the built-in theme appearance objects as
	      the parent object and
	      not changing the existing
	      <classname>&ns;::w::border_arg</classname> value.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>
	    <ulink url="&link-typedef-x--w-color-arg;"><classname>&ns;::w::color_arg</classname></ulink>
	    and <ulink url="&link-typedef-x--w-text-color-arg;"><classname>&ns;::w::text_color_arg</classname></ulink>
	    fields
	  </term>
	  <listitem>
	    <blockquote>
	      <informalexample>
		<programlisting><![CDATA[
<color2>focuson2</color2>
]]></programlisting>
	      </informalexample>
	    </blockquote>
	    <para>
	      Color values are
	      are <tag class='attribute'>id</tag>s of
	      <tag class='element'>color</tag>s in the theme file. They
	      may also reference border <tag class='attribute'>id</tag>s
	      from the current display theme, but this is not documented.
	      A more future-proof way of borrowing a standard theme border
	      is to use one of the built-in theme appearance objects as
	      the parent object and
	      not changing the existing color value.
	    </para>

	    <para>
	      Color values may also reference
	      <link linkend="uixmlderivedvalues">standard HTML 3.2
		colors</link>.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>
	    <ulink url="&link-typedef-x--w-dim-arg;"><classname>&ns;::w::dim_arg</classname></ulink> fields
	  </term>
	  <listitem>
	    <blockquote>
	      <informalexample>
		<programlisting><![CDATA[
  <dim id="cell-padding">20</dim>
]]></programlisting>
	      </informalexample>
	    </blockquote>
	    <para>
	      <classname>&ns;::w::dim_arg</classname> values are
	      are <tag class='attribute'>id</tag>s of
	      <tag class='element'>dim</tag>s in the theme file. They
	      may also reference border <tag class='attribute'>id</tag>s
	      from the current display theme, but this is not documented.
	      A more future-proof way of borrowing a standard theme border
	      is to use one of the built-in theme appearance objects as
	      the parent object and
	      not changing the existing
	      <classname>&ns;::w::dim_arg</classname> value.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>
	    <ulink url="&link-typedef-x--w-font-arg;"><classname>&ns;::w::font_arg</classname></ulink> fields
	  </term>
	  <listitem>
	    <blockquote>
	      <informalexample>
		<programlisting><![CDATA[
<shortcut_font>small</shortcut_font>
]]></programlisting>
	      </informalexample>
	    </blockquote>
	    <para>
	      <classname>&ns;::w::font_arg</classname> values are
	      are <tag class='attribute'>id</tag>s of
	      <tag class='element'>font</tag>s in the theme file. They
	      may also reference border <tag class='attribute'>id</tag>s
	      from the current display theme, but this is not documented.
	      A more future-proof way of borrowing a standard theme border
	      is to use one of the built-in theme appearance objects as
	      the parent object and
	      not changing the existing
	      <classname>&ns;::w::font_arg</classname> value.
	    </para>

	    <para>
	      See <xref linkend="sxgfonts" /> for more information on how
	      to define custom <tag class='element'>font</tag>s.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>
	    <ulink url="&link-enum-x--w-halign;"><classname>&ns;::w::halign</classname></ulink> fields
	  </term>
	  <listitem>
	    <blockquote>
	      <informalexample>
		<programlisting><![CDATA[
<horizontal_alignment>center</horizontal_alignment>
]]></programlisting>
	      </informalexample>
	    </blockquote>
	    <para>
	      <classname>&ns;::w::halign</classname>'s
	      <link linkend="labels">possible values</link> are:
	      <quote>left</quote>,
	      <quote>right</quote>,
	      <quote>center</quote>,
	      or
	      <quote>fill</quote>.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>
	    <ulink url="&link-enum-x--w-scrollbar-visibility;"><classname>&ns;::w::scrollbar_visibility</classname></ulink> fields
	  </term>
	  <listitem>
	    <blockquote>
	      <informalexample>
		<programlisting><![CDATA[
<pane_scrollbar_visibility>automatic</pane_scrollbar_visibility>
]]></programlisting>
	      </informalexample>
	    </blockquote>
	    <para>
	      <classname>&ns;::w::scrollbar_visibility</classname>'s
	      possible values are:
	      <quote>never</quote>,
	      <quote>always</quote>,
	      <quote>automatic</quote>,
	      or
	      <quote>automatic_reserved</quote>.
	    </para>
	  </listitem>
	</varlistentry>

	<!--
	<varlistentry>
	  <term>
	    <ulink url="&link-x--w--text-param;"><classname>&ns;::w::text_param</classname></ulink> fields
	  </term>
	  <listitem>
	    <blockquote>
	      <informalexample>
		<programlisting><![CDATA[
<font id="ok_font">
  <family>liberation mono</family>
  <point_size>18</point_size>
</font>


<ok_label>${font:ok_font}Ok</ok_label>
]]></programlisting>
	      </informalexample>
	    </blockquote>
	    <para>
	      <classname>&ns;::w::text_param</classname> values contain
	      text strings that initialize the
	      <classname>&ns;::w::text_param</classname> using a
	      <ulink url="&link-x--w--theme-text;"><classname>&ns;::w::theme_text</classname></ulink>-formatted
	      text string.
	    </para>
	  </listitem>
	</varlistentry>
-->
	<varlistentry>
	  <term>
	    <ulink url="&link-enum-x--w-valign;"><classname>&ns;::w::valign</classname></ulink> fields
	  </term>
	  <listitem>
	    <blockquote>
	      <informalexample>
		<programlisting><![CDATA[
<vertical_alignment>middle</vertical_alignment>
]]></programlisting>
	      </informalexample>
	    </blockquote>
	    <para>
	      <classname>&ns;::w::halign</classname>'s
	      possible values are:
	      <quote>top</quote>,
	      <quote>bottom</quote>,
	      <quote>middle</quote>,
	      or
	      <quote>fill</quote>.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>
	    <classname>&ns;::w::const_<replaceable>type</replaceable>_apperance</classname> fields
	  </term>
	  <listitem>
	    <blockquote>
	      <informalexample>
		<programlisting><![CDATA[
<focus_border>custom-checkbox-focus-border</focus_border>
]]></programlisting>
	      </informalexample>
	    </blockquote>
	  </listitem>
	  <para>
	    Appearance object can contain other appearance objects, as their fields.
	    Example: the <varname>focus_border</varname> field in an
	    <ulink url="&link-x--w--image-button-appearance-properties;">image button appearance</ulink>
	    object is a
	    <ulink url="&link-x--w--focus-border-appearance-properties;">focus border appearance</ulink>
	    object.
	    The value of this field ia an
	    <tag class='attribute'>id</tag>s of another
	    <tag class='element'>appearance</tag> element, with the appropriate type,
	    in the theme file.
	  </para>
	</varlistentry>
      </variablelist>
    </section>
    <section id="uixmlappearanceoptionalvectorfields">
      <title><classname>std::optional</classname> and <classname>std::vector</classname> fields</title>
      <blockquote>
	<informalexample>
	  <programlisting><![CDATA[
<images>
  <reset />
</images>

<images>scroll-left1</images>
<images>scroll-right1</images>
]]></programlisting>
	</informalexample>
      </blockquote>

      <para>
	A new
	<tag class='element'>appearance</tag> element starts with the values of all fields
	copied from its parent appearance object, then each value in the
	<tag class='element'>appearance</tag> element replaces the value of the
	corresponding field in the
	new appearance object.
	Some fields in appearance objects are <classname>std::optional</classname> or
	<classname>std::vector</classname>s.
	Each value of a
	<classname>std::vector</classname> field gets appended to a vector.
	Specifying a
	<tag class='element'>reset</tag> for a
	<classname>std::vector</classname> value
	<methodname>erase</methodname>()s its existing contents.
	Specifying a
	<tag class='element'>reset</tag> for a
	<classname>std::optional</classname> <methodname>reset</methodname>()s its value.
      </para>

      <para>
	New values of a <classname>std::vector</classname> usually gets specified after
	<tag class='element'>reset</tag>ing the values it inherited from its parent
	appearance object.
      </para>
    </section>
  </section>
</appendix>

<!--
Local Variables:
mode: sgml
sgml-parent-document: ("book.xml" "book" "appendix")
End:
-->
