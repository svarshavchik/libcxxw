<!--

Copyright 2017 Double Precision, Inc.
See COPYING for distribution information.

-->

<chapter id="inputfieldsandbuttons">
  <title>Input fields and buttons</title>

  <mediaobject>
    <imageobject>
      <imagedata fileref="inputfieldsandbuttons.png" format="PNG"
		 contentwidth="405px" contentdepth="221px" />
    </imageobject>
    <textobject>
      <phrase>
	Hello World!
      </phrase>
    </textobject>
    <caption>
      <para>
	The following program creates a small window with some input fields
	and buttons.
      </para>
    </caption>
  </mediaobject>

  <blockquote>
    <title><ulink url="examples/inputfieldsandbuttons.C">inputfieldsandbuttons.C</ulink></title>

    <informalexample>
      <programlisting><xi:include href="../examples/inputfieldsandbuttons.C" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
    </informalexample>
  </blockquote>

  <section id="inputfields">
    <title>Input fields</title>

    <para>
      A &factory;'s
      <methodname>create_input_field</methodname>() method returns a new
      <ulink url="&link-typedef-x--w-input-field;"><classname>&ns;::w::input_field</classname></ulink>.
      <methodname>create_input_field</methodname>()'s parameters are:
    </para>

    <itemizedlist>
      <listitem>
	<para>
	  A <ulink url="&link-x--w--text-param;"><classname>&ns;::w::text_param</classname></ulink>
	  that sets the initial contents of the text input field.
	</para>
      </listitem>
      <listitem>
	<para>
	  An optional
	  <ulink url="&link-x--w--input-field-config;"><classname>&ns;::w::input_field_config</classname></ulink>
	  parameter sets the number of rows and columns in the
	  new input field.
	</para>
      </listitem>
    </itemizedlist>

    <para>
      <link linkend="inputfieldsandbuttons"><filename>inputfieldsandbuttons.C</filename></link>
      creates two text input
      fields. The first input field is 30 columns wide, and is a single line
      text input field, by default.
    </para>

    <para>
      The <classname>&ns;::w::text_param</classname> parameter
      cannot contain any
      formatting or color options, except that the
      <classname>&ns;::w::text_param</classname>
      can optionally specify an initial font or color.

      <filename>inputfieldsandbuttons.C</filename>'s second text input
      specifies a non-default proportional font. The second text input
      field has four rows, and also 30 columns. However, the second text
      input field's width is smaller because of the
      non-default proportional font.
    </para>

    <para>
      A single line text input field, by definition, accepts a single line
      of text. The <keycap>Enter</keycap> key does nothing. A single line
      text input field scrolls horizontally if more text is entered than can
      fit within its margins.
      A text input field consisting of two or more lines word-wraps instead
      of scrolling horizontally, and inserts a hard line break in
      response to the <keycap>Enter</keycap>; and scroll vertically when
      the text has more rows than can fit into the text input field.
    </para>

    <section id="textclipboards">
      <title>Clipboards</title>

      <para>
	&app;'s text input fields make use of two clipboards.
      </para>

      <variablelist>
	<varlistentry>
	  <term>Primary clipboard</term>

	  <listitem>
	    <para>
	      A primary clipboard selection is made by holding the
	      <keycap>Shift</keycap> while moving the cursor, or by
	      highlighting text while holding the first mouse pointer button
	      down. Releasing the <keycap>Shift</keycap> key or the mouse
	      pointer button copies the highlighted text from the clipboard.
	    </para>

	    <para>
	      The primary clipboard is temporary, and the copied text gets
	      removed from the clipboard after the next keypress.
	      <keycap>Ctrl</keycap>-<keycap>Space</keycap> inserts the text
	      from the primary keyboard at the current cursor position.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>Secondary clipboard</term>

	  <listitem>
	    <para>
	      After making a primary clipboard selection,
	      <keycap>Ctrl</keycap>-<keycap>Insert</keycap> copies the
	      primary clipboard selection to the secondary clipboard.
	      <keycap>Shift</keycap>-<keycap>Delete</keycap> copies it
	      and deletes the selected text
	      (<keycap>Delete</keycap> by itself deletes the selected text
	      without copying it).
	    </para>

	    <para>
	      A secondary clipboard selection remains in place until it's
	      replaced by another secondary clipboard selection; unlike the
	      primary clipboard selection it does not get automatically
	      removed.
	      <keycap>Shift</keycap>-<keycap>Insert</keycap> inserts the text
	      from the secondary clipboard at the current cursor position.
	    </para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </section>

    <section id="input_field">
      <title>Using <classname>&ns;::w::input_field</classname></title>

      <blockquote>
	<informalexample>
	  <programlisting>
f->set("Hello world");

f->on_change([]
             (const &ns;::w::input_change_info_t &amp;info)
             {
             });

f->on_autocomplete([]
                  (&ns;::w::input_autocomplete_info_t &amp;info)
                  {
                        return false;
                  });
</programlisting>
	</informalexample>
      </blockquote>

      <para>
	<methodname>set()</methodname> is overloaded for a
	<classname>std::string</classname> (encoded in UTF-8), and a
	<classname>std::u32string</classname>.
	<methodname>on_change</methodname>() and
	<methodname>on_autocomplete</methodname>() install
	&callback;s.
	These callbacks are mostly for use by
	<link linkend="editable_combobox">combo-boxes</link>, but are
	publicly documented.
      </para>

      <para>
	<methodname>on_change</methodname>() installs a callback that gets
	invoked anytime the contents of the input field get changed.
	This callback receives a
	<ulink url="&link-x--w--input-change-info-t;"><classname>&ns;;:w::input_change_info_t</classname></ulink>
	parameter that provides some context for the change.
      </para>

      <para>
	When the change to the input field results in more text getting
	added to
	the end of the field, the
	<methodname>on_autocomplete</methodname>() callback also gets invoked.
	This callback receives a reference to a
	<ulink url="&link-x--w--input-autocomplete-info-t;"><classname>&ns;;:w::input_autocomplete_info_t</classname></ulink>
	object.
      </para>

      <para>
	The <methodname>on_autocomplete</methodname>() callback returns
	<literal>false</literal> if the contents of the input field cannot
	be auto-completed; otherwise the callback places the requisite
	details into the
	<classname>&ns;;:w::input_autocomplete_info_t</classname> parameter
	and returns <literal>true</literal>.
      </para>

      <blockquote>
	<informalexample>
	  <programlisting>
x::w::input_lock lock{f};</programlisting>
	</informalexample>
      </blockquote>

      <para>
	Constructing a
	<ulink url="&link-x--w--input-lock;"><classname>&ns;::w::input_lock</classname></ulink>
	has the unsurprising result of blocking other execution threads from
	accessing the <classname>&ns;::w::input_field</classname> specified
	by the parameter to
	<classname>&ns;::w::input_lock</classname>'s constructor.
	At that point,
	<classname>&ns;::w::input_lock</classname>'s methods provide access
	to the input field's current contents, and other metadata.
      </para>

      <note>
	<para>
	  <classname>&ns;::w::input_field</classname>'s
	  <methodname>set</methodname>() method replaces the contents of
	  the
	  <classname>&ns;::w::input_field</classname>. Like all other
	  display elements, the
	  <classname>&ns;::w::input_field</classname> actually gets updated
	  by &appshort;'s internal execution thread.
	  <methodname>set</methodname>() does not get blocked directly by an
	  <classname>&ns;::w::input_lock</classname>.
	  All that <methodname>set</methodname>() does is send a message
	  to the execution thread with the new contents of the input field.
	</para>

	<para>
	  As with other locks,
	  <classname>&ns;::w::input_lock</classname>s should not persist
	  for a long time, and should get destroyed quickly;
	  otherwise it'll likely end up blocking
	  &appshort;'s internal execution thread, with the display appearing
	  to freeze.
	</para>

	<para>
	  This also means that acquiring an
	  <classname>&ns;::w::input_lock</classname> immediately after
	  a <methodname>set</methodname>() can still return the
	  input field's former contents from
	  <classname>&ns;::w::input_lock</classname>'s
	  <methodname>get</methodname>(), if the
	  <classname>&ns;::w::input_lock</classname> gets acquired before
	  the internal execution thread gets the opportunity to update the
	  input field's contents.
	</para>
      </note>
    </section>
  </section>

  <section id="tooltips">
    <title>Tooltips</title>

    <blockquote>
      <informalexample>
	<programlisting>
subject_field->create_tooltip("A brief title");

// ...

text_field->create_tooltip("A brief message, a few lines long.", 30);</programlisting>
      </informalexample>
    </blockquote>

    <para>
      <link linkend="inputfieldsandbuttons"><filename>inputfieldsandbuttons.C</filename></link>
      gives an example of creating tooltips.
      A tooltip is a small popup window that appears when the pointer
      gets positioned on top of a display element and doesn't move for a
      few seconds. The tooltip popup appears next to the pointer and goes
      away automatically when the pointer moves again.
    </para>

    <para>
      Tooltip text should be small. The tooltip gets positioned above
      and to the right of the pointer by default. If the pointer is near
      the edge of the screen the tooltip may get repositioned so that its
      entire contents are visible.
    </para>

    <para>
      The first parameter to <methodname>create_tooltip</methodname>()
      is actually a
      <ulink url="&link-x--w--text-param;"><classname>&ns;::w::text_param</classname></ulink>
      object.
      This allows custom fonts and text colors for the tooltip. The
      tooltip's background color is fixed by the current theme.
      An optional second parameter specifies the tooltip's width in
      millimeters. The tooltip's gext gets word-wrapped to fit within the
      given width. The tooltip's text does not get word-wrapped otherwise,
      but may contain <literal>'\n'</literal>s to introduce explicit
      line breaks.
    </para>
  </section>
  <section id="buttons">
    <title>Buttons</title>

    <para>
      <link linkend="inputfieldsandbuttons"><filename>inputfieldsandbuttons.C</filename></link>
      creates three buttons at the bottom of the window,
      using a &factory;'s
      <methodname>create_normal_button_with_label</methodname>() and
      <methodname>create_special_button_with_label</methodname>() methods.
      The only difference between normal and special buttons is the buttons'
      border: a normal border, and a thick border. In all other respects, there
      is no difference between a normal and a special
      <ulink url="&link-typedef-x--w-button;"><classname>&ns;::w::button</classname></ulink>.
    </para>

    <para>
      A &factory; also offers more generic
      <methodname>create_normal_button</methodname>() and
      <methodname>create_special_button</methodname>() methods.
      <filename>inputfieldsandbuttons.C</filename> creates ordinary buttons
      with a simple text label inside them, but a button's contents are
      arbitrary:
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
factory->create_normal_button([]
     (const &ns;::w::factory &amp;f)
     {

     });</programlisting>
      </informalexample>
    </blockquote>

    <para>
      <methodname>create_normal_button</methodname>() and
      <methodname>create_special_button</methodname>() take a single lambda
      as a parameter. The lambda receives another factory as its sole
      argument, and is expected to use that factory to create a single display
      element. This becomes the contents of the button. Like all display
      elements they must be <methodname>show</methodname>()n in order to
      be visible.
    </para>

    <para>
      <methodname>create_normal_button_with_label</methodname>() and
      <methodname>create_special_button_with_label</methodname>() are simply
      wrappers that <link linkend="labels">use
	<methodname>create_label</methodname>()</link> to put the label into
      the button, and <methodname>show</methodname>() it.
    </para>

    <para>
      An optional second parameter specifies the button's keyboard shortcut,
      this is a
      <ulink url="&link-x--w--shortcut;"><classname>&ns;::w::shortcut</classname></ulink>
      object.
      There are several ways to activate a button:
    </para>

    <itemizedlist>
      <listitem>
	<para>
	  Clicking on the button with pointer button 1.
	</para>
      </listitem>
      <listitem>
	<para>
	  <keycap>Enter</keycap> or
	  <keycap>Space</keycap> with the input focus in the button.
	</para>
      </listitem>
      <listitem>
	<para>
	  The keyboard shortcut, with the input focus anywhere in the window.
	</para>
      </listitem>
    </itemizedlist>

    <section id="shortcutactivation">
      <title>Shortcut activation</title>

      <para>
	A keyboard shortcut gets recognized only if the key combination
	does not get processed by the field with the current keyboard input
	focus.
	<link linkend="inputfieldsandbuttons"><filename>inputfieldsandbuttons.C</filename></link>
	sets shortcuts for all three buttons it creates:
	<keycap>Esc</keycap> for the <quote>Cancel</quote> button,
	<keycap>ALT-R</keycap> for the <quote>Reset</quote> button, and
	<keycap>Enter</keycap> for the <quote>Ok</quote> button, but
	the <keycap>Enter</keycap> shortcut only works when the keyboard
	focus is in the first text input field (or no input field has
	keyboard focus).
      </para>

      <para>
	When the current keyboard input focus is in the second text input
	field, <keycap>Enter</keycap> inserts a new row. When it's in any
	button, <keycap>Enter</keycap> activates that button.
	A keyboard shortcut takes effect only if its key does not result
	in any other action.
      </para>
    </section>
  </section>

  <section id="activation">
    <title>Element activation</title>

    <para>
      <link linkend="inputfieldsandbuttons"><filename>inputfieldsandbuttons.C</filename></link>
      shows an example of specifying what action to take in response when
      a button gets activated by a pointer click or a key press, using
      <methodname>on_activate</methodname>().
    </para>

    <para>
      <methodname>on_activate</methodname>()'s parameter is a lambda that
      gets executed when the button gets activated.
      Note that the lambda gets invoked by the execution thread, see
      <xref linkend="callbacks" /> and
      <xref linkend="containerrefs" /> for more information.
    </para>

    <para>
      The lambda receives two parameters:
    </para>

    <itemizedlist>
      <listitem>
	<para>
	  <ulink url="&link-typedef-x--w-callback-trigger-t;"><classname>&ns;::w::callback_trigger_t</classname></ulink>
	  provides additional information about why exactly the callback
	  got invoked, by a button or a key press. It's possible to use this
	  information to take different actions.
	</para>
      </listitem>
      <listitem>
	<para>
	  The
	  <ulink url="&link-x--w--busy;"><classname>&ns;::w::busy</classname></ulink>
	  factory parameter
	  provides the option of suspending keyboard and pointer button
	  processing after the callback returns. Normally &appshort;'s
	  internal execution thread resumes processing keyboard and button
	  clicks after this callback returns. If the application needs to
	  engage in a lengthy task because of this button click, and
	  no more pointer or button clicks should be processed until the
	  application gets done, the callback uses this factory to
	  construct a <quote>mcguffin</quote> for that purpose. An
	  example of this is given in <xref linkend="busy" />.
	</para>
      </listitem>
    </itemizedlist>
  </section>

  <section id="appdata">
    <title>Attaching application data to display elements</title>

    <para>
      All display elements, including the main application window, have
      an opaque <varname>appdata</varname> member that &app; does not use
      itself.
      <varname>appdata</varname> is an opaque
      <classname>&ns;::ptr&lt;&ns;::obj&gt;</classname> object,
      a reference-counted
      object. See &libcxx;'s documentation for more information.
    </para>

    <para>
      <varname>appdata</varname> provides convenient means for an application
      to attach its own data to a display element, by deriving from
      <classname>&ns;::obj</classname>, and saving a
      <classname>&ns;::ref</classname> to it in <classname>appdata</classname>.
    </para>

    <para>
      With application windows having complicated layouts, and a large number of
      display elements, it's more convenient to stash away a direct reference
      to a particular display element, rather than having to drill down and
      find it, each time.
      As explained in <xref linkend="containerrefs" />, &app;'s containers
      own references to their elements, and in order for application
      windows and their elements to be properly destroyed and terminated the
      application must release its own references to them.
      With &app; built on top of &libcxx;'s reference-counted object framework,
      a lingering reference from an application to some display element will
      prevent proper destruction of display elements.
    </para>

    <para>
      The <varname>appdata</varname> provides a convenient way to compile a
      list of all display elements in one place, safely:
    </para>

    <itemizedlist>
      <listitem>
	<para>
	  A list of the display elements gets collected into an object and
	  installed as an <varname>appdata</varname> object, that's attached
	  to the top level main window object.
	  The <varname>appdata</varname> may contain anything that the
	  application wants, not just <classname>&ns;::ref</classname>s to
	  various display elements in the main window.
	</para>
      </listitem>

      <listitem>
	<para>
	  The application only holds a reference to the top level
	  display element, such as an
	  <ulink url="&link-typedef-x--w-main-window;"><classname>&ns;::w::main_window</classname></ulink>.
	  The application always uses the top level display element to access
	  the <varname>appdata</varname>.
	</para>
      </listitem>

      <listitem>
	<para>
	  When the top level display element goes out of scope and gets
	  destroyed, no other reference to the <varname>appdata</varname>
	  remain, so it gets destroyed, together with its references to
	  the display elements in the <varname>appdata</varname>.
	  Because top level elements, and all containers,
	  <link linkend="containerrefs">own references to their
	    child elements</link>, all references to the child elements
	  properly go out of scope and they get properly destroyed.
	</para>
      </listitem>
    </itemizedlist>

    <para>
      The <link linkend="inputfieldsandbuttons">earlier example in this
	chapter</link> gives an example of this approach.
      <ulink url="examples/inputfieldsandbuttons.C">inputfieldsandbuttons.C</ulink>
      creates a window containing, amongst other things, two
      <ulink url="&link-typedef-x--w-input-field;"><classname>&ns;::w::input_field</classname></ulink>.
      Besides being placed into the window, they're also placed into
      an object that's attached to the main window's <varname>appdata</varname>.
      When the window gets closed the application retrieves the main window's
      <varname>appdata</varname>, retrieves the two input fields, and prints
      their contents.
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
#include &lt;&ns;refptr_traits.H>
#include "inputfields.inc.H"

class appdataObj : virtual public &ns;::obj, public inputfields {
public:

	using inputfields::inputfields;
};

typedef &ns;::ref&lt;appdataObj&gt; appdata_t;</programlisting>
      </informalexample>
    </blockquote>

    <para>
      The sample program uses some supporting framework from the
      &libcxx; base classes and templates library.
      The
      <ulink url="examples/Makefile.am">Makefile in the
	<filename>examples</filename> directory</ulink>
      runs a stylesheet to process
      <ulink url="examples/inputfields.xml">inputfields.xml</ulink>, a
      simplistic list of fields and their types.
      This generates a header file that declares two classes. The first one
      has a list of <classname>&ns;::ptr</classname>s for all fields. The
      declared <classname>&ns;::ptr</classname>s are convenient to have when
      creating them, piecemeal.
    </para>

    <para>
      The second class is <classname>inputfields</classname>, with
      the final collection of the listed fields,
      as their natural <classname>&ns;::ref</classname>s.
      This is multiply-inherited with
      <classname>&ns;::obj</classname> to produce a reference-counted
      object, an <classname>appdata_t</classname>. This gets
      <function>create</function>()d and attached as the
      <ulink url="&link-typedef-x--w-main-window;"><classname>&ns;::w::main_window</classname></ulink>'s
      <varname>appdata</varname>.
    </para>

    <para>
      Before exiting, the sample program retrieves the main window's
      <varname>appdata</varname>, and shows the contents of the input
      fields.
    </para>

    <para>
      Every display element has an available <classname>appdata</classname>.
      The application can use this to attach an object to any
      display element; but it is important to understand that the display
      element owns a reference to its <classname>appdata</classname> so this
      object should not have its own reference to the display element or to
      any of its parent container elements (see
      <xref linkend="containerrefs" /> for more information). Otherwise
      this creates a problematic circular reference.
      With some care, it's possible to use
      <ulink url="/weakptr.html">weak pointers</ulink>, though.
    </para>

    <para>
      See <xref linkend="booklayoutmanager" /> for another
      example of using <varname>appdata</varname>.
    </para>
  </section>
</chapter>
<!--
Local Variables:
mode: sgml
sgml-parent-document: ("book.xml" "book" "chapter")
End:
-->
