<!--

Copyright 2017 Double Precision, Inc.
See COPYING for distribution information.

-->

<chapter id="scrollbar">
  <title>Scroll-bars</title>

  <mediaobject>
    <imageobject>
      <imagedata fileref="scrollbar.png" format="PNG"
		 contentwidth="302px" contentdepth="112px" />
    </imageobject>
    <textobject>
      <phrase>
	Scroll-bar
      </phrase>
    </textobject>
    <caption>
      <para>
	Widgets that scroll, such as multi-line
	<link linkend="inputfieldsandbuttons">input fields</link>,
	provide their own scroll-bars.
	Scroll-bars are also useful on their own:
	they are an intuitive way to set a value in some
	specified range.
	A &factory;'s <methodname>create_horizontal_scrollbar</methodname>()
	and <methodname>create_vertical_scrollbar</methodname>() methods
	create new, stand-alone, independent
	<ulink url="&link-typedef-x--w-scrollbar;"><classname>&ns;::w::scrollbar</classname></ulink>s.
      </para>
    </caption>
  </mediaobject>

  <para>
    <filename>scrollbar.C</filename> creates a scroll-bar below a
    <link linkend="checkradio">checkbox</link> and an
    <link linkend="inputfieldsandbuttons">input field</link>.
    The scroll-bar supposedly controls a volume value of some sort, which
    can be set to a range of 0 through 11.
    As the scroll-bar's value gets adjusted, the input field above it
    reflects the updated volume value. A new value can be explicitly typed
    into the input field, and this manually moves the scrollbar.
    The checkbox adds (or removes) a decimal point, making the scrollbar's
    value range from 0.0 through 11.0.
  </para>

  <blockquote>
    <title><ulink url="examples/scrollbar.C">scrollbar.C</ulink></title>

    <informalexample>
      <programlisting><xi:include href="../examples/scrollbar.C" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
    </informalexample>
  </blockquote>

  <section id="createscrollbars">
    <title>Creating and configuring scroll-bars</title>

    <para>
      <filename>scrollbar.C</filename> uses
      a &factory;'s <methodname>create_horizontal_scrollbar</methodname>()'s to
      create a new scroll-bar, and shows some examples of using it.
      An <ulink url="&link-x--w--scrollbar-config;"><classname>&ns;::w::scrollbar_config</classname></ulink>
      parameter
      specifies scroll-bar's configuration, and gets passed to
      <methodname>create_horizontal_scrollbar</methodname>() or
      <methodname>create_vertical_scrollbar</methodname>().
      An existing scroll-bar's <methodname>reconfigure</methodname>() method
      updates its configuration.
    </para>
    <para>
      <methodname>create_horizontal_scrollbar</methodname>() and
      <methodname>create_vertical_scrollbar</methodname>() take the
      following optional parameters. Either parameter is optional, but
      they must appear in the following order if both are present:
    </para>

    <itemizedlist>
      <listitem>
	<para>
	  The scroll-bar's initial
	  &callback; that gets executed to report changes to the scroll-bar's
	  position.
	  An existing scroll-bar's <methodname>on_update</methodname>()
	  method installs a new callback, replacing the previous one.
	</para>
      </listitem>
      <listitem>
	<para>
	  A <link linkend="appearance"><classname>&ns;::w::const_scrollbar_appearance</classname>
	    object</link> that set a custom visual scrollbar
	  appearance.
	</para>
      </listitem>
    </itemizedlist>

    <para>
      <classname>&ns;::w::scrollbar_config</classname>'s
      <varname>minimum_size</varname> sets the scroll-bar's minimum size,
      in millimeters.
      The scroll-bar's &layoutmanager; typically sizes the scroll-bar to
      fit within its assigned cell, and this value instructs the layout
      manager what the minimum size should be.
      If <filename>scrollbar.C</filename> does not specify its scrollbar's
      width, it becomes the size of the short label above it.
      As such, the scroll-bar's minimum width is slightly larger, and
      the <filename>scrollbar.C</filename> creates a larger window on account
      of that.
    </para>

    <para>
      Scroll-bars are &focusable; widgets, and they respond to the following
      keys when they have the keyboard focus:
    </para>

    <itemizedlist>
      <listitem>
	<para>
	  <keycap>Cursor-Left</keycap> and
	  <keycap>Cursor-Up</keycap> keys move the scroll-bar towards
	  its left or upper end (smaller scroll-bar values).
	  <keycap>Cursor-Right</keycap> and
	  <keycap>Cursor-Down</keycap> keys move the scroll-bar towards
	  its right or lower end (larger scroll-bar values).
	  The scroll-bar's value gets adjusted by the
	  <classname>&ns;::w::scrollbar_config</classname>'s
	  <varname>increment</varname>;
	  in combination with the <keycap>Ctrl</keycap> key the scroll-bar's
	  value gets incremented or decremented by 1.
	</para>
      </listitem>

      <listitem>
	<para>
	  <keycap>Page-Up</keycap> and
	  <keycap>Page-Down</keycap> move the scroll-bar in the appropriate
	  direction.
	  The scroll-bar's value gets adjusted by the
	  <classname>&ns;::w::scrollbar_config</classname>'s
	  <varname>page_size</varname>.
	</para>
      </listitem>
    </itemizedlist>

    <note>
      <para>
	It's possible for a
	<classname>&ns;::w::scrollbar_config</classname>'s
	<varname>minimum_size</varname> to be smaller than the
	minimum size that's needed to meaningfully draw all of its
	inner controls, subsequently the scroll-bars can get resized
	to a very small size, accordingly.
	When that happens the scroll-bars temporarily disable
	themselves from receiving keyboard focus.
	The reason for this is to avoid visual confusion when the
	keyboard focus seems
	to disappear (the scroll-bar's keyboard focus frame is so small
	that it's hard to see or there may not be even enough pixels
	to draw them).
      </para>

      <para>
	The small scroll-bars remain disabled until their size is sufficient
	to fully draw them, and they'll automatically reenable themselves.
	This is combined with scroll-bars'
	<methodname>set_enabled</methodname>() method (that all
	&focusable; widgets have). Scroll-bars have enabled keyboard
	focus if they are both <methodname>set_enabled</methodname>() and
	are big enough for their drawn contents.
      </para>
    </note>

  </section>

  <section id="scrollbarvalues">
    <title>Scroll-bar's current value</title>

    <para>
      The scroll-bar's &callback; gets executed whenever the scroll-bar's
      value changes. This is the preferred way to obtain its current value.
      <filename>scrollbar.C</filename> installs a callback that puts the
      new scroll-bar value into the input-field above it.
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
uint32_t v=sb->get_value();

uint32_t v=sb->get_dragged_value();</programlisting>
      </informalexample>
    </blockquote>

    <para>
      <methodname>get_value</methodname>() and
      <methodname>get_dragged_value</methodname>() poll the scroll-bar's
      current values and return them. The values can change at any time,
      a callback is the more reliably way to keep tabs on it.
      <methodname>set</methodname>() explicitly sets the scroll-bar's new
      value. <link linkend="scrollbar"><filename>scrollbar.C</filename></link>
      uses this to update the scroll-bar when it's
      <quote>decimal points</quote> setting changes. The shown logical
      value gets updated in the example's input field by the scroll-bar's
      callback. <methodname>set</methodname>() updates the scroll-bar, which
      causes its callback to get executed, to report the scroll-bar's new
      value.
    </para>
  </section>
</chapter>
<!--
Local Variables:
mode: sgml
sgml-parent-document: ("book.xml" "book" "chapter")
End:
-->
