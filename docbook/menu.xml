<!--

Copyright 2017 Double Precision, Inc.
See COPYING for distribution information.

-->

<chapter id="menu">
  <title>Menus</title>

  <mediaobject>
    <imageobject>
      <imagedata fileref="menu.png" format="PNG"
		 contentwidth="384px" contentdepth="252px" />
    </imageobject>
    <textobject>
      <phrase>
	Menus
      </phrase>
    </textobject>
    <caption>
      <para>
	<ulink url="&link-typedef-x--w-main-window;">Main windows</ulink>
	have an optional menu bar at the top. The menu bar is not
	visible by default, and <methodname>show_all</methodname>() does
	not make it visible. The menu bar requires explicit steps to
	construct it and make it visible.
      </para>

      <para>
	<methodname>get_menubarlayoutmanager</methodname>()
	returns an
	<ulink url="&link-typedef-x--w-menubarlayoutmanager;"><classname>&ns;::w::menubarlayoutmanager</classname></ulink>,
	a &layoutmanager; to create its contents. Once created,
	<methodname>get_menubar</methodname>() returns a
	&container; that represents that menu bar, with a
	<methodname>show</methodname>() method that makes it visible.
	The typical approach to create a fully fleshed out main window:
      </para>

      <itemizedlist>
	<listitem>
	  <para>
	    Use <methodname>get_menubarlayoutmanager</methodname>()
	    to get the menu bar's layout manager.
	  </para>
	</listitem>

	<listitem>
	  <para>
	    Use the layout manager's
	    <methodname>append_menus</methodname>(),
	    <methodname>insert_menus</methodname>(),
	    <methodname>append_right_menus</methodname>() and
	    <methodname>insert_right_menus</methodname>() to construct
	    the main window's menus. These methods return
	    a
	    <ulink url="&link-typedef-x--w-menubarfactory;"><classname>&ns;::w::menubarfactory</classname></ulink>
	    for creating new menus.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Create the rest of the display elements in the main window
	    normally. This can be done before or after the menu.
	  </para>
	</listitem>

	<listitem>
	  <para>
	    Use <methodname>get_menubar</methodname>() to return the
	    menu bar's container
	    (<methodname>get_menubarlayoutmanager</methodname>() is
	    equivalent to
	    <literal>get_menubar()->get_layoutmanager()</literal>) and
	    <methodname>show</methodname>() it.
	  </para>
	</listitem>

	<listitem>
	  <para>
	    <methodname>show_all</methodname>()/<methodname>show</methodname>()
	    the main window.
	  </para>
	</listitem>
      </itemizedlist>

      <para>
	<filename>menu.C</filename> demonstrates how to create menus
	and <link linkend="dialogs">dialogs</link>:
      </para>
    </caption>
  </mediaobject>

  <blockquote>
    <title><ulink url="examples/menu.C">menu.C</ulink></title>

    <informalexample>
      <programlisting><xi:include href="../examples/menu.C" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
    </informalexample>
  </blockquote>

  <para>
    Unlike regular display elements in the main window, display elements
    that make up the menu bar and its menus should not be
    <methodname>show</methodname>()n, except for
    <methodname>show</methodname>()ing the menu bar itself.
    <ulink url="&link-typedef-x--w-menubarlayoutmanager;"><classname>&ns;::w::menubarlayoutmanager</classname></ulink>'s
    method that create menus take a creator callback that gets invoked
    to create the menus.
  </para>

  <para>
    Menus use the
    <ulink url="&link-typedef-x--w-listlayoutmanager;"><classname>&ns;::w::listlayoutmanager</classname></ulink>, and
    the callback's parameter is the list layout manager, the
    &layoutmanager; for the new menu that the callback uses
    to create the new menu's items. The list layout manager takes care of
    showing and hiding all the menu items, when needed.
  </para>

  <section id="menubarlayoutmanager">
    <title>The menu bar layout manager</title>

    <para>
      <ulink url="&link-typedef-x--w-main-window;"><classname>&ns;::w::main_window</classname></ulink>'s
      <methodname>get_menubar</methodname>() method returns a &container; with a
      <ulink url="&link-typedef-x--w-menubarlayoutmanager;"><classname>&ns;::w::menubarlayoutmanager</classname></ulink>
      &layoutmanager;, that represents the main window's menu bar, which
      gets <methodname>show</methodname>()n after its menus get created.
      <methodname>get_menubarlayoutmanager</methodname>() is
      equivalent to
      <literal>get_menubar()->get_layoutmanager()</literal>.</para>

    <para>
      <methodname>append_menus</methodname>() returns a
      <ulink url="&link-typedef-x--w-menubarfactory;"><classname>&ns;::w::menubarfactory</classname></ulink>
      that adds new menus to the menu bar.
      <methodname>insert_menus</methodname>() returns a factory that
      inserts new menus before an existing menu in the menu bar.
      <methodname>remove_menu</methodname>() removes an existing menu from
      the menu bar.
    </para>

    <para>
      As part of creating a new menu, the
      <classname>&ns;::w::menubarfactory</classname> uses a callback that
      takes a
      <classname><ulink url="&link-typedef-x--w-listlayoutmanager;"><classname>&ns;::w::listlayoutmanager</classname></ulink></classname>
      parameter to create the individual items for the new menu.
      The factory also returns the
      <ulink url="&link-typedef-x--w-menu;"><classname>&ns;::w::menu</classname></ulink>
      that represents the new menu in the menu bar.
    </para>

    <para>
      Constructing a
      <ulink url="&link-x--w--menubar-lock;"><classname>&ns;::w::menubar_lock</classname></ulink>
      blocks the menu bar from other execution thread, at which point
      its <methodname>get_menu</methodname>() returns the
      <classname>&ns;::w::menu</classname> elements.
    </para>

    <para>
      The menu bar has a second section that's aligned against the right
      margin, the typical location for a <quote>Help</quote> menu.
      <methodname>append_right_menus</methodname>(),
      <methodname>insert_right_menus</methodname>() and
      <methodname>remove_right_menu</methodname>() are equivalent
      <classname>&ns;::w::menubarfactory</classname> methods for the
      second section (with <methodname>get_right_menu</methodname>() picking
      up the slack in the
      <classname>&ns;:w::menubar_lock</classname>.
    </para>
  </section>

  <section id="menulayoutmanager">
    <title>Using the list layout manager with menus</title>

    <para>
      An <ulink url="&link-typedef-x--w-listlayoutmanager;"><classname>&ns;::w::listlayoutmanager</classname></ulink>
      is a &layoutmanager; for
      <ulink url="&link-typedef-x--w-menu;"><classname>&ns;::w::menu</classname></ulink>s
      in the menu bar, and for any sub-menus.
      This is the same list layout manager that
      <link linkend="list">manages selection lists</link>.
      A <classname>std::vector</classname> of
      <ulink url="&link-x--w--list-item-param;"><classname>&ns;::w::list_item_param</classname></ulink>s
      specifies the new list items for
      the &itemmethods; methods.
    </para>

    <para>
      With selection lists, each
      <classname>&ns;::w::list_item_param</classname> is typically a label.
      It is (derived from) a <classname>std::variant</classname>; and can
      take on additional values, such as:
      the shortcut for a menu item, a &callback;
      to invoke whenever the menu item gets selected, and several other
      menu item specific attributes.
    </para>

    <para>
      This is done by passing all attributes for a menu item as additional
      <classname>&ns;::w::list_item_param</classname> values
      <emphasis>before</emphasis> the new menu item itself:
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
m->append_items(
      {
            &ns;::w::shortcut{"Alt", 'N'},
            []
            (const &ns;::w::list_item_status_info_t &amp;info)
            {
                std::cout &lt;&lt; "File->New selected" &lt;&lt; std::endl;
            },
            "New",

            &ns;::w::shortcut{"Alt", 'O'},
            []
            (const &ns;::w::list_item_status_info_t &amp;info)
            {
                std::cout &lt;&lt; "File->Open selected" &lt;&lt; std::endl;
            },
            "Open",
      });</programlisting>
      </informalexample>
    </blockquote>

    <para>
      <methodname>append_items</methodname>() only needs one parameter,
      a vector of <classname>&ns;::w::list_item_param</classname>.
      Each menu item's attributes must appear before the
      "real" <classname>&ns;::w::list_item_param</classname>.
      This example creates two new menu items, "New" and "Open", specifying
      an optional
      <ulink url="&link-x--w--shortcut;">keyboard short</ulink> for the new
      item and a &callback; that gets invoked whenever the menu item gets
      selected. This is the most common case.
      The callback's parameter is the usual
      <link linkend="list"><classname>&ns;::w::list_item_status_info_t</classname></link> whose
      <varname>item_number</varname> member reports which menu item got
      clicked on, and a
      <varname>selected</varname> flag that reports whether this menu option
      is now drawn with a mark, or not (see below).
    </para>

    <section id="menuattributes">
      <title>Menu item attributes</title>
      <para>
	Multiple attributes may appear in any order, but all attributes precede
	the <classname>&ns;::w::list_item_param</classname> that creates the
	new item. An exception gets thrown if
	&itemmethods; methods receive a vector that ends with one or more
	attributes, and no actual menu item.
      </para>

      <para>
	Other available attributes are:
      </para>

      <variablelist>
	<varlistentry>
	  <term>
	    <classname>&ns;::w::menuoption</classname>
	  </term>

	  <listitem>
	    <para>
	      This value
	      specifies that selecting the following item toggles a mark,
	      typically a bullet, next to the menu item. This is in addition
	      to invoking the item's callback:
	    </para>
	    <blockquote>
	      <informalexample>
		<programlisting>
m->append_items(
      {
		x::w::menuoption{},
		[]
		(const x::w::list_item_status_info_t &amp;info)
		{
			std::cout &lt;&lt; &#34;View->Tools: &#34; &lt;&lt; info.selected
				  &lt;&lt; std::endl;
		},
		"Tools"
      });</programlisting>
	      </informalexample>
	    </blockquote>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>
	    <classname>&ns;::w::submenu</classname>
	  </term>

	  <listitem>
	    <para>
	      This is a wrapper for a &callback; that creates a new sub-menu:
	    </para>
	    <blockquote>
	      <informalexample>
		<programlisting>
m->append_items(
      {
            x::w::submenu{
                [](const x::w::listlayoutmanager &amp;submenu_layoutmanager)
                {
                      // ...
                }},
            "Recent..."
      });</programlisting>
	      </informalexample>
	    </blockquote>

	    <para>
	      This creates a "Recent..." menu item that opens a sub-menu.
	      <ulink url="&link-x--w--submenu;"><classname>&ns;::w::submenu</classname></ulink>
	      specifies a &creator; that receives a
	      <classname>&ns;::w::listlayoutmanager</classname> for the sub-menu.
	      The creator callback uses it to create the sub-menu.
	    </para>

	    <note>
	      <para>
		Sub-menus cannot have keyboard shortcuts.
	      </para>
	    </note>
	  </listitem>
	</varlistentry>
      </variablelist>
    </section>

    <section id="listseparators">
      <title>Separators</title>

      <para>
	<link linkend="menu"><filename>menu.C</filename></link> gives an
	example of passing a
	<classname>&ns;::w::separator</classname> values between the
	"Close" and "Toggle Options" items of its "File" menu.
      </para>

      <para>
	This draws a horizontal line to visually separator groups of items in
	a menu.
	Separators typically appear in menus, but separators can also be
	added to ordinary <link linkend="list">selection list elements</link>
	or <link linkend="combobox">combo-boxes</link>.
	Each separator is considered to be a reserved list item.
	The list layout manager numbers all items in the list consecutively,
	starting with item #0, and a separator takes up a list item number;
	but a separator item cannot actually be selected with a keyboard or
	mouse pointer, which simply skips over the separators.
	Separator items cannot have any
	<link linkend="menuattributes">attributes</link> of their own.
      </para>
    </section>
  </section>

  <section id="menuopenclose">
    <title>Using the mouse pointer or the keyboard with menus</title>

    <para>
      Clicking on a title of a menu in the menu bar opens that menu.
      Clicking on a plain menu item selects and activates it.
      Moving the pointer on top of a menu item with a submenu, then
      pausing, opens the menu item's submenu.
    </para>

    <para>
      &appshort;'s menus are fully keyboard-accessible. The menu titles
      in the menu bar are tabbable. Their tabbing order always precede any
      tabbable display elements in the main window.
      <keycap>Enter</keycap> with a menu title receiving input focus opens
      the submenu, and
      <keycap>Cursor-Down</keycap> selects the menu's first enabled item.
      <keycap>Esc</keycap> closes the opened menu. Up and down cursor
      keys navigate the menu's items, with
      <keycap>Enter</keycap> either selecting the highlighted menu item or
      opening its sub-menu.
      The keyboard focus automatically shifts to the opened sub-menu, and
      <keycap>Cursor-Down</keycap> selects the sub-menu's first enabled item.
      <keycap>Esc</keycap> closes the sub-menu.
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
l->enabled(4, false);</programlisting>
      </informalexample>
    </blockquote>

    <para>
      A disabled menu item is not selectable via the pointer or the keyboard.
      Disabled menu items have a dithered, faint, appearance like all
      disabled display elements.
    </para>
  </section>
</chapter>
<!--
Local Variables:
mode: sgml
sgml-parent-document: ("book.xml" "book" "chapter")
End:
-->
