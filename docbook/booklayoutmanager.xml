<!--

Copyright 2017 Double Precision, Inc.
See COPYING for distribution information.

-->

<chapter id="booklayoutmanager">
  <title>The book layout manager</title>

  <mediaobject>
    <imageobject>
      <imagedata fileref="booklayoutmanager.png" format="PNG"
		 contentwidth="579px" contentdepth="181px" />
    </imageobject>
    <textobject>
      <phrase>
	The book layout manager
      </phrase>
    </textobject>
    <caption>
      <para>
	The
	<ulink url="&link-typedef-x--w-booklayoutmanager;"><classname>&ns;::w::booklayoutmanager</classname></ulink>
	extends the <link linkend="pagelayoutmanager">page layout manager</link>
	by creating a horizontal strip of "tabs" above the paged
	container, containing one tab for each page. Clicking on a
	page's tab automatically opens the tab's page.
      </para>
    </caption>
  </mediaobject>

  <para>
    The following example is a modified version of
    <filename>pagelayoutmanager</filename> that uses the book layout manager.
    The code that creates a button to make each page visible gets removed.
    The book layout manager does that:
  </para>

  <blockquote>
    <title><ulink url="examples/booklayoutmanager.C">booklayoutmanager.C</ulink></title>

    <informalexample>
      <programlisting><xi:include href="../examples/booklayoutmanager.C" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
    </informalexample>
  </blockquote>

  <para>
    The book layout manager has a slightly different process for creating
    new pages.
    Both the page layout manager and the book layout manager have
    <methodname>append</methodname>() and
    <methodname>insert</methodname>() methods.
    <ulink url="&link-typedef-x--w-pagelayoutmanager;"><classname>&ns;::w::pagelayoutmanager</classname></ulink>'s
    <methodname>append</methodname>() and
    <methodname>insert</methodname>() methods return a &factory; that
    directly creates widgets,
    with each widget becoming a new page.
    <ulink url="&link-typedef-x--w-booklayoutmanager;"><classname>&ns;::w::booklayoutmanager</classname></ulink>'s
    <methodname>append</methodname>() and
    <methodname>insert</methodname>() methods return a meta-factory object.
  </para>

  <section id="bookpagefactory">
    <title>The book page factory</title>

    <blockquote>
      <informalexample>
	<programlisting>
&ns;::w::bookpagefactory new_page=layout_manager->append();

new_page->add("Tab",
              []
	      (const &ns;::w::factory &amp;page_factory)
              {

              },
              // Optional shortcut
              {&ns;::w::shortcut{"Alt", 'X'}});</programlisting>
      </informalexample>
    </blockquote>

    <para>
      <ulink url="&link-typedef-x--w-booklayoutmanager;"><classname>&ns;::w::booklayoutmanager</classname></ulink>'s
      <methodname>append</methodname> and
      <methodname>insert</methodname> methods return an
      <ulink url="&link-typedef-x--w-bookpagefactory;"><classname>&ns;::w::bookpagefactory</classname></ulink>
      which is an intermediate object, and not a factory itself.
      Each call to
      <classname>&ns;::w::bookpagefactory</classname>'s
      <methodname>add</methodname>() method creates a new page.
    </para>

    <para>
      There are two overloaded versions of <methodname>add</methodname>().
      The first version creates a plain text label for the tab from an
      <ulink url="&link-x--w--text-param;"><classname>&ns;::w::text_param</classname></ulink>
      parameter, and the
      the second parameter is a callable object or a closure that creates
      the new page.
      The second version takes another callable object, or a closure,
      that takes a factory object instead of the
      <ulink url="&link-x--w--text-param;"><classname>&ns;::w::text_param</classname></ulink>
      first parameter. This factory gets use used to create the
      widget representing the new page's tab. Instead of a
      text string, the tab can be any non-focusable widget.
      The second version of <methodname>add</methodname>()'s parameters are:
    </para>

    <itemizedlist>
      <listitem>
	<para>
	  A factory that creates the widget for the new page's tab.
	</para>
      </listitem>
      <listitem>
	<para>
	  A factory that creates the new page widget
	  (same parameter as the first version of
	  <methodname>add</methodname>()).
	</para>
      </listitem>
    </itemizedlist>

    <para>
      For either version of <methodname>add</methodname>(),
      the closure must create exactly one widget using each one of
      its factory parmeters. For the second version of
      <methodname>add</methodname>() the order in which the factories
      get called is not specified.
    </para>

    <para>
      <methodname>add</methodname>() also takes
      an <ulink url="/optionalargs.html">optional argument
	parameter</ulink>.
    </para>

    <itemizedlist>
      <listitem>
	<para>
	  An overloaded <methodname>add</methodname>() with a
	  a factory callback that creates a tab has one optional argument,
	  the tab's keyboard
	  <ulink url="&link-x--w--shortcut;"><classname>&ns;::w::shortcut</classname></ulink>.
	</para>
      </listitem>
      <listitem>
	<para>
	  An overloaded <methodname>add</methodname>() with a
	  <ulink url="&link-x--w--text-param;"><classname>&ns;::w::text_param</classname></ulink>
	  tab label has two optional parameters:
	  the label's <ulink url="&link-x--w--label-config;"><classname>&ns;::w::label_config</classname></ulink>
	  and the tab's keyboard
	  <ulink url="&link-x--w--shortcut;"><classname>&ns;::w::shortcut</classname></ulink>:
	</para>

	<blockquote>
	  <informalexample>
	    <programlisting>
new_page->add({
                "underline"_decoration,
                U"H",
                "no"_decoration,
                U"elp",
              },
              []
	      (const &ns;::w::factory &amp;page_factory)
              {

              },
              // Optional shortcut
              {&ns;::w::label_config{&ns;::w::center},
               &ns;::w::shortcut{"Alt", 'X'}});</programlisting>
	  </informalexample>
	</blockquote>

	<para>
	  This is a somewhat contrived example. Label alignment only
	  makes a difference with multi-line labels.
	</para>
      </listitem>
    </itemizedlist>
  </section>

  <section id="bookonopened">
    <title>The <methodname>on_opened</methodname> callback</title>

    <blockquote>
      <informalexample>
	<programlisting>
    	pl->on_opened
		([]
		 (ONLY IN_THREAD,
                  const x::w::book_status_info_t &amp;info)
		 {
                     // ...
	         });</programlisting>
      </informalexample>
    </blockquote>

    <para>
      <methodname>on_opened</methodname>() installs a &callback; that
      gets executed whenever the book layout manager makes a new page
      visible. The callback's
      <ulink url="&link-x--w--book-status-info-t;"><classname>&ns;::w::book_status_info_t</classname></ulink>
      parameter provides additional information: which page was opened
      and why.
    </para>
  </section>

  <section id="booklayoutmanagerappdata">
    <title>An <varname>appdata</varname> example</title>

    <blockquote>
      <informalexample>
	<programlisting>
// When creating a page container:

container->appdata=f->create_input_field("", config);

// ...

pl->on_opened([]
     (ONLY IN_THREAD,
      const &ns;::w::book_status_info_t &amp;info)
     {
             size_t n=info.opened;

             auto page=info.lock.layout_manager->get_page(n);
             x::w::input_field f=page->appdata;
             f->request_focus();
     });</programlisting>
      </informalexample>
    </blockquote>

    <para>
      <link linkend="booklayoutmanager"><filename>booklayoutmanager.C</filename></link>
      gives another example of
      <link linkend="appdata">using <varname>appdata</varname></link>.

      <link linkend="booklayoutmanager"><filename>booklayoutmanager.C</filename></link>
      takes the first
      <classname>&ns;::w::input_field</classname> on each page, and puts it
      into the
      <varname>appdata</varname> of each page's
      <classname>&ns;::w::container</classname> widget.
    </para>

    <para>
      The <link linkend="bookonopened"><methodname>on_opened</methodname></link>
      callback only needs to fetch the opened page's widget.
      <methodname>get_page</methodname>()
      returns the
      <ulink url="&link-typedef-x--w-element;"><classname>&ns;::w::element</classname></ulink>
      base class references.
      The callback grabs the
      <classname>&ns;::w::input_field</classname> from the
      <varname>appdata</varname>, and put keyboard input focus into
      the input field every time one of the pages gets opened.
    </para>

    <para>
      As explained in <xref linkend="appdata" />,
      parent containers hold internal references to all objects in the
      container, and in this manner
      <filename>booklayoutmanager.C</filename> also does the same itself,
      storing
      a reference to an <classname>&ns;::w::input_field</classname> in
      its parent container that comprises a page in the book.
    </para>

    <note>
      <para>
	The requirements explained in <xref linkend="callbackrefs" /> do
	not apply here.
	<link linkend="booklayoutmanager"><filename>booklayoutmanager.C</filename></link>'s
	<methodname>on_opened</methodname> callback does not capture any
	references, and only uses its parameters to retrieve the newly-opened
	page.
      </para>

      <para>
	The reference stored in each container's <varname>appdata</varname>
	is not associated with any callback. It's just an ordinary
	reference pointer for an object. The reference pointer to a child
	object gets stored in each parent, like &appshort; normally does;
	and once the parent container gets removed, its references to its
	child widgets also get removed.
      </para>

      <para>
	Only storing a reference to a parent widget, in its child's
	<varname>appdata</varname>,
	creates a circular reference because of the internal reference from
	the container to each child widgets.
      </para>
    </note>
  </section>
</chapter>
<!--
Local Variables:
mode: sgml
sgml-parent-document: ("book.xml" "book" "chapter")
End:
-->
