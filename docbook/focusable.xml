<!--

Copyright 2017 Double Precision, Inc.
See COPYING for distribution information.

-->

<chapter id="focusable">
  <title>Using focusable widgets</title>

  <para>
    <link linkend="inputfieldsandbuttons">Input fields and buttons</link>
    are examples of focusable widgets, or
    <quote>focusables</quote>. Focusables process keyboard
    events when they have keyboard input focus. There are two general
    ways for a focusable to gain input focus: by clicking on it with the
    primary pointer button, or by using the <keycap>Tab</keycap> and
    <keycap>Shift-Tab</keycap> keys, which cycle through the focusable
    fields in the window.
  </para>

  <para>
    A dashed border gets typically drawn around the widget that
    has keyboard input focus.
    <keycap>Tab</keycap> moves the keyboard input focus to the next widget, and
    <keycap>Shift-Tab</keycap> moves the keyboard input focus to the
    previous widget.
  </para>

  <para>
    The tabbing order does not get determined by the widgets'
    position, but rather their creation order. Focusables
    inherit from
    <ulink url="&link-typedef-x--w-focusable;"><classname>&ns;::w::focusable</classname></ulink>
    objects, which implement several methods:
  </para>

  <blockquote>
    <title><ulink url="examples/focusable.C">focusable.C</ulink></title>

    <informalexample>
      <programlisting><xi:include href="../examples/focusable.C" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
    </informalexample>
  </blockquote>

  <para>
    <methodname>get_focus_after</methodname>(),
    <methodname>get_focus_before</methodname>(), and
    <methodname>get_focus_first</methodname>() moves the focusable widget's
    tabbing order to be after another focusable widget, before another
    focusable widget, or the first focusable widget in the window after
    the <link linkend="menu">window's menu</link>, if it has one; or the first
    focusable widget in windows without menu bars.
  </para>

  <para>
    <methodname>set_enabled</methodname>() enables or disables a focusable
    widget. Disabled focusable widgets do not respond to
    pointer clicks, and tabbing the input focus skips them. Disabled
    focusable widgets get drawn with a dithered mask that blends
    them with the background color, making them appear faint compared to
    enabled widgets.
  </para>

  <para>
    <methodname>request_focus</methodname>() explicitly moves the keyboard
    input focus to the given focusable widget.
  </para>

  <note>
    <para>
      A widgets that are disabled or not visible cannot receive keyboard
      focus. In that case the keyboard focus gets moved whenever the
      widget can receive keyboard focus,
      unless a different widget requests keyboard focus first.
    </para>

    <para>
      <methodname>request_focus</methodname>() takes an optional parameter.
      A <literal>true</literal> value results in the keyboard focus
      moving to the focusable widget if it's eligible to receive keyboard
      focus at this time, otherwise this gets ignored and no delayed
      keyboard focus movement takes place.
    </para>

    <para>
      The default behavior makes it possible to create a new widget, make
      it visible and immediately set the keyboard focus to the new widget.
      It takes some time for the &connection_thread; to prepare the new
      widget and draw it; and the default behavior produces the expected
      results.
    </para>
  </note>

  <para>
    <methodname>on_keyboard_focus</methodname>() and
    <methodname>on_key_event</methodname>() install &callback;s that
    provide keyboard focus event feedback.
  </para>

  <para>
    The <methodname>on_keyboard_focus</methodname>() callback gets invoked
    whenever the focusable widget gains or loses keyboard input
    focus. Additionally, the callback gets invoked upon installation to
    report the focusable widget's current focus (which is typically
    no input focus for newly-created widgets).
    The <methodname>on_key_event</methodname>() callback gets invoked
    when a key gets pressed or released, or when a unicode string gets
    composed using the X Input Method server, while the focusable widget receives input focus.
  </para>

  <para>
    The <methodname>on_key_event</methodname>() callback must return
    <literal>true</literal> if the callback recognized and processed the
    key event. Returning <literal>false</literal> results in &app;'s default
    action for the key event; but &app; calls the
    <methodname>on_key_event</methodname>() callback only when the key event
    results in no specific action by the focusable widget.
  </para>

  <para>
    <filename>focusable.C</filename> installs an
    <methodname>on_key_event</methodname>() callback into one of the input
    buttons. This callback does not get called for
    <keycap>Enter</keycap> and <keycap>Space</keycap> keys, but for all
    other keys (that the X display server does not handle itself). This is
    because <keycap>Enter</keycap> and <keycap>Space</keycap> keys have the
    same effect as clicking the button with the pointer, and this specific
    action takes precedence.
  </para>
</chapter>
<!--
Local Variables:
mode: sgml
sgml-parent-document: ("book.xml" "book" "chapter")
End:
-->
