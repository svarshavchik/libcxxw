<!--

Copyright 2019 Double Precision, Inc.
See COPYING for distribution information.

-->

<chapter id="uigenerator">
  <title>Generating UI from an <acronym>XML</acronym> theme file</title>

  <para>
    <filename>uigenerator1.C</filename> is a version of
    <link linkend="combobox"><filename>combobox.C</filename></link>
    that gives an example of creating widgets using an
    <acronym>XML</acronym>-specified layout,
    a <quote>theme file</quote>.
    The <acronym>XML</acronym> content of the theme file gets effectively
    executed as a list of instructions for invoking the various methods of
    layout managers and factories.
    Instead of invoking various methods
    grid rows, factories, and widgets
    and their various grid-related attributes (borders, padding, etc...),
    these methods gets executed via the theme file.
    The default appearance of &appshort; windows comes from the default
    theme file, and this is the same mechanism.
    The application provides only the code to create the individual widgets themselves: in this case a label, a combo-box, and a set of
    buttons.
  </para>

  <para>
    This approach does not really end up saving much code, but it
    makes it possible to adjust the appearance of widgets quickly,
    just by editing and changing the theme file, and
    without recompiling.
  </para>

  <blockquote>
    <title><ulink url="examples/uigenerator1.C">uigenerator1.C</ulink></title>

    <informalexample>
      <programlisting><xi:include href="../examples/uigenerator1.C" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
    </informalexample>
  </blockquote>

  <blockquote>
    <title><ulink url="examples/uigenerator1.xml">uigenerator1.xml</ulink></title>
    <informalexample>
      <programlisting><xi:include href="../examples/uigenerator1.xml" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
    </informalexample>
  </blockquote>

  <para>
    Creating a
    <ulink url="&link-typedef-x--w-uigenerators;"><classname>&ns;::w::uigenerators</classname></ulink>
    object loads specifications of layout managers and factories from the
    theme file.
    A single theme file may contain specifications for more than one layout
    and factory.
    Each layout has a unique identifier.
    The first parameter to a <link linkend="gridlayoutmanager">grid
      layout manager</link>'s generate() names a layout from the
    theme file that gets executed:
  </para>

  <blockquote>
    <informalexample>
      <programlisting>
layout->generate("main-window-grid",
                 generator, element_factory);</programlisting>
    </informalexample>
  </blockquote>

  <para>
    This generates the layout specified by:
  </para>
  <blockquote>
    <informalexample>
      <programlisting><![CDATA[
<layout type="grid" id="main-window-grid">

<!-- ... -->

</layout>]]></programlisting>
      </informalexample>
  </blockquote>

  <para>
    <xref linkend="uixmldoc" /> provides a complete specification of the
    theme files.

    <ulink url="examples/uigenerator2.C">uigenerator2.C</ulink> is another
    example that uses a theme file to create a main window showing
    <link linkend="booklayoutmanager">book tabs</link>, filling out the
    entire contents of the window, the book, and the tabs, from the theme
    file.
  </para>
</chapter>
<!--
Local Variables:
mode: sgml
sgml-parent-document: ("book.xml" "book" "chapter")
End:
-->
