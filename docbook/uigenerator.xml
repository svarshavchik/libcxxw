<!--

Copyright 2019 Double Precision, Inc.
See COPYING for distribution information.

-->

<chapter id="uigenerator">
  <title>Generating widgets from an <acronym>XML</acronym> theme file</title>

  <para>
    <filename>uigenerator1.C</filename> is a version of
    <link linkend="combobox"><filename>combobox.C</filename></link>
    that gives an example of creating widgets using an
    <acronym>XML</acronym>-specified layout,
    that's called a <quote>theme file</quote>.
    The <acronym>XML</acronym> content of the theme file effectively
    execute instructions for invoking various methods of
    layout managers and factories.
    Instead of the methods which create and access containers,
    factories, and widgets
    and their various grid-related attributes (borders, padding, etc...),
    these methods get executed by instructions the theme file.
    The default appearance of &appshort; windows comes from the default
    theme file, and this is the same mechanism.
    The application provides only the code to create custom widgets.
    Most of the standard widgets can be created directly by the theme file.
    <filename>uigenerator1.C</filename> manually creates
    several standard widgets,
    a label, a combo-box, and a set of buttons, as an example; even though
    they could be created directly from the theme file.
  </para>

  <para>
    This approach does not really end up saving much code, but it
    makes it possible to adjust the appearance of widgets quickly,
    just by editing and changing the theme file, and
    without recompiling.
  </para>

  <blockquote>
    <title><ulink url="examples/uigenerator1.C">uigenerator1.C</ulink></title>

    <informalexample>
      <programlisting><xi:include href="../examples/uigenerator1.C" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
    </informalexample>
  </blockquote>

  <blockquote>
    <title><ulink url="examples/uigenerator1.xml">uigenerator1.xml</ulink></title>
    <informalexample>
      <programlisting><xi:include href="../examples/uigenerator1.xml" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
    </informalexample>
  </blockquote>

  <para>
    Creating a
    <ulink url="&link-typedef-x--w-uigenerators;"><classname>&ns;::w::uigenerators</classname></ulink>
    object loads specifications of layout managers and factories from the
    theme file.
    A single theme file may contain specifications for more than one layout
    and factory.
    Each layout has a unique identifier.
    The first parameter to a <link linkend="gridlayoutmanager">grid
      layout manager</link>'s generate() names a layout from the
    theme file that gets executed:
  </para>

  <blockquote>
    <informalexample>
      <programlisting>
layout->generate("main-window-grid",
                 generator, element_factory);</programlisting>
    </informalexample>
  </blockquote>

  <para>
    This generates the layout specified by:
  </para>
  <blockquote>
    <informalexample>
      <programlisting><![CDATA[
<layout type="grid" id="main-window-grid">

<!-- ... -->

</layout>]]></programlisting>
      </informalexample>
  </blockquote>

  <para>
    <xref linkend="uixmldoc" /> provides a complete specification of
    &appshort;'s
    theme files.

    <ulink url="examples/uigenerator2.C">uigenerator2.C</ulink> is another
    example that uses a theme file to create a main window showing
    <link linkend="booklayoutmanager">book tabs</link>, filling out the
    entire contents of the window, the book, and the tabs, from the theme
    file, including all the standard widgets.
    <filename>uigenerator2.C</filename> provides an example of:
  </para>

  <variablelist>
    <varlistentry>
      <term>
	Restoring properties of widgets
      </term>
      <listitem>
	<para>
	  <methodname>create</methodname>() takes an optional parameter:
	</para>

	<itemizedlist>
	  <listitem>
	    <para>
	      An
	      <classname>&ns;::w::const_messages</classname> parameter that
	      gives a
	      <link linkend="uixmlgettext">message catalog</link> for
	      translated
	      <link linkend="uixmltext_paramvalue"><classname>&ns;::w::text_param</classname></link>s.
	    </para>
	  </listitem>
	</itemizedlist>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>
	Specifying <classname>&ns;::w::text_param</classname> values
      </term>
      <listitem>
	<blockquote>
	  <informalexample>
	    <programlisting><![CDATA[
<element>
  <label>${decoration:underline}N${decoration:none}etwork</label>
</element>
]]></programlisting>
	  </informalexample>
	</blockquote>
	<para>
	  Creating
	  <link linkend="uixmlfactorylabelelement">label widgets</link>
	  and using
	  <ulink url="&link-x--w--theme-text;"><classname>&ns;::w::theme_text</classname></ulink>-formatted
	  text to create
	  <classname>&ns;::w::text_param</classname>s.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>
	Creating <link linkend="uixmlfactoryprogressbarelement">progress
	  bar widgets</link>
      </term>
      <listitem>
	<blockquote>
	  <informalexample>
	    <programlisting><![CDATA[
<element id="progressbar_element">
  <progressbar>progressbar_label_layout</progressbar>
  <type>grid</type>
</element>
]]></programlisting>
	  </informalexample>
	</blockquote>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>
	<para>
	  <methodname>get_element</methodname>()
	</para>
      </term>
      <listitem>
	<blockquote>
	  <informalexample>
	    <programlisting><![CDATA[
element_factory.get_element("progressbar_element"),
]]></programlisting>
	  </informalexample>
	</blockquote>
	<para>
	  Using <methodname>get_element</methodname>() to retrieve the
	  widget that was <methodname>generate</methodname>() from the theme
	  file.
	</para>
      </listitem>
    </varlistentry>
  </variablelist>
</chapter>
<!--
Local Variables:
mode: sgml
sgml-parent-document: ("book.xml" "book" "chapter")
End:
-->
