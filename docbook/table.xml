<!--

Copyright 2018 Double Precision, Inc.
See COPYING for distribution information.

-->

<chapter id="tables">
  <title>Tables</title>

  <mediaobject>
    <imageobject>
      <imagedata fileref="table.png" format="PNG"
		 contentwidth="659px" contentdepth="153px" />
    </imageobject>
    <textobject>
      <phrase>
	Using the table with the table layout manager.
      </phrase>
    </textobject>
    <caption>
      <para>
	A table is a list with a header row. Tables are derived from lists,
	and inherit list functions.
      </para>
    </caption>
  </mediaobject>

  <blockquote>
    <title><ulink url="examples/table.C">table.C</ulink></title>

    <informalexample>
      <programlisting><xi:include href="../examples/table.C" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
    </informalexample>
  </blockquote>

  <section id="tablelayoutmanager">
    <title>Creating a table layout manager</title>

    <blockquote>
      <informalexample>
	<programlisting>
#include &lt;&ns;/w/focusable_container.H&gt;
#include &lt;&ns;/w/tablelayoutmanager.H&gt;

&ns;::w::new_tablelayoutmanager new_table{
    []
    (const x::w::factory &amp;f, size_t i)
    {
          // ...
    }};

new_table.columns=2;

&ns;::w::focusable_container list=f->create_focusable_container(
       []
       (const &ns;::w::focusable_container &amp;c)
       {
            &ns;::w::tablelayoutmanager tbl=c->get_layoutmanager();
       },
       new_table);

&ns;::w::tablelayoutmanager tblmanager=list->get_layoutmanager();</programlisting>
      </informalexample>
    </blockquote>

    <para>
      Passing a
      <ulink url="&link-x--w--new-tablelayoutmanager;"><classname>&ns;::w::new_tablelayoutmanager</classname></ulink>
      to a &factory;'s <methodname>create_focusable_container</methodname>()
      creates a table. The resulting &container; returned by
      <methodname>create_focusable_container</methodname>(), and passed
      as a parameter to its &creator;, uses the
      <ulink url="&link-typedef-x--w-tablelayoutmanager;"><classname>&ns;::w::tablelayoutmanager</classname></ulink>.
    </para>

    <para>
      <classname>&ns;::w::new_tablelayoutmanager</classname> is derived from
      a <link linkend="list"><classname>&ns;::w::new_listlayoutmanager</classname></link>,
      and a
      <classname>&ns;::w::tablelayoutmanager</classname> is derived from
      a <classname>&ns;::w::listlayoutmanager</classname>. A table is a list
      with a header row.
      The required parameter to
      <classname>&ns;::w::new_tablelayoutmanager</classname>'s constructor
      is a &creator; for the list's header.
      <methodname>create_focusable_container</methodname> calls this closure
      to create the header for each column. The clouse receives
      a &factory; parameter and the column number. The closure uses the
      factory to create exactly one widget that represents the column's
      header. The closure must call <methodname>show</methodname>()
      to make the new header widget visible.
    </para>

    <note>
      <para>
	The header widget should not have a custom background color.
	The table sets a custom background color for the header row for
	visual effects when <link linkend="adjustabletables">adjusting the
	  table column widths</link>. The table layout manager expects the
	headers' widgets to inherit their background color from the
	header row.
      </para>
    </note>
  </section>

  <section id="adjustabletables">
    <title>Adjustable tables</title>

    <mediaobject>
      <imageobject>
	<imagedata fileref="table2.png" format="PNG"
		   contentwidth="876px" contentdepth="153px" />
      </imageobject>
      <textobject>
	<phrase>
	  Adjustable tables.
	</phrase>
      </textobject>
      <caption>
	<para>
	  Tables' default width gets computed based on the width of the
	  tables' items. An optional table setting enables adjustable
	  tables. Adjustable tables allow their width to expand, and their
	  individual columns' relative width to be manually adjusted using
	  the mouse pointer.
	</para>
      </caption>
    </mediaobject>

    <para>
      <ulink url="examples/table.C">table2.C</ulink> is a modified version
      of the example from this chapter that enables adjustable table features:
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
ntlm.adjustable("main_table");
ntlm.table_width=200;
ntlm.maximum_table_width=500;</programlisting>
      </informalexample>
    </blockquote>

    <para>
      <ulink url="&link-x--w--new-tablelayoutmanager;"><classname>&ns;::w::new_tablelayoutmanager</classname></ulink>'s
      <methodname>adjustable</methodname>() enables adjustable table columns
      and assigns the table's label for
      <link linkend="preservetablecolumnwidths">saving the adjustable
	table column widths</link> and restoring them the next time the
      table window gets opened.
      Moving the mouse pointer on top of a dividing border
      <emphasis>in the header row</emphasis> changes the pointer to
      a bi-directional horizontal arrow. Pressing pointer button #1 drags
      the border under the pointer horizontally and adjusts the relative
      widths of the columns on both sides of the border.
      Pressing pointer button #1 while holding down the
      <keycap>Alt</keycap> key restores all columns to their initial
      unadjusted width.
    </para>

    <para>
      Setting <varname>table_width</varname> and
      <varname>maximum_table_width</varname> specifies the initial and the
      maximum width of the table, in millimeters.
      <filename>table2.C</filename>'s window's width is expandable, this
      adjusts the size of its table until its table reaches its maximum
      width.
      Calling <methodname>unlimited_table_width</methodname>() removes the
      maximum limit for the table's width, completely.
    </para>

    <note>
      <para>
	Other widgets in the same window affect the table's actual
	and maximum widths. The main window's grid layout manager
	(or the table's container's layout manager) has to calculate the
	other window elements' metrics. Unless the other widgets
	in the window can be sized accordingly, the table may not end up
	being sizable to its maximum width.
      </para>
    </note>

    <section id="adjustabletableskeyboard">
      <title>Adjusting table column widths using the keyboard</title>

      <para>
	Each border between the columns in an adjustable table is
	draggable directly, by the pointer. This adjusts the relative sizes
	of the two columns on either sides of the border. The column sizes
	are also adjustable using the keyboard.
      </para>

      <para>
	When <link linkend="focusable">the keyboard focus is on the
	  table's list</link> the <keycap>Tab</keycap> key highlights each
	border in the header row in turn
	the <keycap>Tab</keycap> key moves the keyboard focus out of the
	talbe list, as with other focusable widgets
	(<keycap>Shift-Tab</keycap> highlights the previous border in this
	mode).
	<keycap>Cursor-Left</keycap> and
	<keycap>Cursor-Right</keycap> move the highlighted border by a
	moderate amount, and by one precise pixel together with the
	<keycap>Ctrl</keycap> key.
      </para>

      <para>
	Column width adjusting mode gets terminated immediately by the
	<keycap>Esc</keycap> key, or by repeatedly tabbing until the keyboard
	focus leaves the table list, or the header row.
	Pressing <keycap>Esc</keycap> while holding down the
	<keycap>Alt</keycap> key goes one step further and
	restores all columns to their initial
	unadjusted width.
      </para>
    </section>
    <section id="preservetablecolumnwidths">
      <title>Preserving table columns' widths</title>

      <para>
	It's natural to expect that reopening an application opens the
	table and its columns using their original size. This behavior
	is enabled by assigning a unique label to each table in the window,
	and passing this label to <methodname>adjustable</methodname>().
	<ulink url="examples/table2.C">table2.C</ulink> gives an example of
	enabling adjustable table columns:
      </para>

      <blockquote>
	<informalexample>
	  <programlisting>
&ns;::w::new_tablelayoutmanager ntlm{
                    // ...
    };

ntlm.adjustable("main_table");

f->create_focusable_container
    ([&amp;]
     (const &ns;::w::focusable_container &amp;)
     {
         // ...
     }, ntlm);
</programlisting>
	</informalexample>
      </blockquote>

      <para>
	A unique identifier must get assigned to each table in a window that
	has adjustable columns.
	<filename>table2.C</filename> calls its sole table, unimaginatively,
	<quote>main_table</quote>.
      </para>

      <blockquote>
	<informalexample>
	  <programlisting>ntlm.adjustable();</programlisting>
	</informalexample>
      </blockquote>

      <para>
	Calling <methodname>adjustable</methodname>() without any parameters
	enables adjustable table column widths, but they do not get preserved
	and each time the window gets opened the column widths get reset
	to their default values.
      </para>

      <blockquote>
	<informalexample>
	  <programlisting>ntlm.adjustable("main_table", false);</programlisting>
	</informalexample>
      </blockquote>

      <para>
	Passing a <literal>false</literal> as the optional 2nd parameter
	enables adjustable column widths, but resets all column widths to their
	default values. They'll still get preserved and the next time the
	window gets opened the column widths will get restored to what they
	were, once more.
      </para>
    </section>
  </section>
</chapter>
<!--
Local Variables:
mode: sgml
sgml-parent-document: ("book.xml" "book" "chapter")
End:
-->
