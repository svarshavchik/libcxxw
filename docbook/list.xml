<!--

Copyright 2017 Double Precision, Inc.
See COPYING for distribution information.

-->

<chapter id="list">
  <title>Selection lists</title>

  <mediaobject>
    <imageobject>
      <imagedata fileref="listlayoutmanager.png" format="PNG"
		 contentwidth="361px" contentdepth="316px" />
    </imageobject>
    <textobject>
      <phrase>
	Selection lists, using the list layout manager.
      </phrase>
    </textobject>
    <caption>
      <para>
	A selection list is a vertical list, typically containing text labels.
	One or more items in the list are selected by clicking on them or
	by using the keyboard.
      </para>
    </caption>
  </mediaobject>

  <blockquote>
    <title><ulink url="examples/listlayoutmanager.C">listlayoutmanager.C</ulink></title>

    <informalexample>
      <programlisting><xi:include href="../examples/listlayoutmanager.C" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
    </informalexample>
  </blockquote>

  <section id="listlayoutmanager">
    <title>Creating a list layout manager</title>

    <blockquote>
      <informalexample>
	<programlisting>
#include &lt;&ns;/w/focusable_container.H&gt;
#include &lt;&ns;/w/listlayoutmanager.H&gt;

&ns;::w::new_listlayoutmanager new_list;

&ns;::w::focusable_container list=f->create_focusable_container(
       []
       (const &ns;::w::focusable_container &amp;c)
       {
            &ns;::w::listlayoutmanager l=c->get_layoutmanager();
       },
       new_list);

&ns;::w::listlayoutmanager llmanager=list->get_layoutmanager();</programlisting>
      </informalexample>
    </blockquote>

    <para>
      A &factory;'s
      <methodname>create_focusable_container</methodname>() creates
      a &container; that processes &focusable; events.
      The first parameter to a
      <methodname>create_focusable_container</methodname>() is a
      &creator;.
      Passing a
      <ulink url="&link-x--w--new-listlayoutmanager;"><classname>&ns;::w::new_listlayoutmanager</classname></ulink>
      for the second parameter results in a <quote>selection list</quote>.
      The newly-created
      <ulink url="&link-typedef-x--w-focusable-container;"><classname>&ns;::w::focusable_container</classname></ulink>'s
      <methodname>get_layoutmanager</methodname>() returns an
      <ulink url="&link-typedef-x--w-listlayoutmanager;"><classname>&ns;::w::listlayoutmanager</classname></ulink>.
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
new_list.height=6;
	</programlisting>
      </informalexample>
    </blockquote>

    <para>
      A typical selection list consists of rows of items. The selection list
      automatically sizes itself to be wide enough to show its widest item.
      The selection list provides a vertical scrollbar for scrolling the
      list vertically when the selection list has more items than its set
      number of rows.
      <ulink url="examples/listlayoutmanager.C"><filename>listlayoutmanager.C</filename></ulink>'s
      <option>--rows</option> option sets the number of rows in the shown
      list.
    </para>

    <para>
      An item in a list is selected by clicking on it, or by tabbing
      to the selection list, pressing <keycap>Cursor-Down</keycap> to
      highlight the first item in the list, then using
      <keycap>Cursor-Down</keycap> and <keycap>Cursor-Up</keycap> to
      highlight the list item, and <keycap>Enter</keycap> to select it.
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
&ns;::w::new_listlayoutmanager new_list{&ns;::w::bulleted_list};
	</programlisting>
      </informalexample>
    </blockquote>

    <para>
      The default list style changes the background color of selected list
      items.
      Setting
      <ulink url="&link-x--w--new-listlayoutmanager;"><classname>&ns;::w::new_listlayoutmanager</classname></ulink>'s
      constructor's optional parameter to
      <literal>&ns;::w::bulleted_list</literal> reserves some room to the left
      of each item, and draws a bullet there next to each item when it's
      selected.
      <ulink url="examples/listlayoutmanager.C"><filename>listlayoutmanager.C</filename></ulink>'s
      <option>--bullets</option> option does that.
    </para>
  </section>

  <section id="listcallbacks">
    <title>Selecting multiple items in a list, and callbacks</title>

    <blockquote>
      <informalexample>
	<programlisting>
&ns;::w::new_listlayoutmanager new_list;

new_list.selection_type=&ns;::w::multiple_selection_type;

new_list.selection_type=[]
       (const &ns;::w::listlayoutmanagerbase &amp; l,
        size_t item_number)
       {
       };

new_list.selection_changed=[]
       (const &ns;::w::list_item_status_info_t &amp;info)
       {
       };
	</programlisting>
      </informalexample>
    </blockquote>

    <para>
      The default behavior of a selection list is that selecting a
      different list item
      automatically unselects the previously-selected list item.
      Selecting the same list item again unselects it.
      Setting <varname>selection_type</varname>
      to <literal>&ns;::w::multiple_selection_type</literal> results
      in each list item getting selected and unselected individually.
      Clicking on a list item with a pointer, or tabbing to the list,
      moving the cursor to the item's row, and pressing <keycap>Enter</keycap>
      selects and unselects that item only.
    </para>

    <para>
      Setting <varname>selection_type</varname> to a lambda results in
      custom selection
      <link linkend="callbacks">callback</link> lambda.
      Clicking on an item executes the lambda,
      and the lambda has full control over which list items get selected
      or unselected. The <varname>selection_type</varname> lambda's parameters
      are: the list layout manager, given as a
      <ulink url="&link-typedef-x--w-listlayoutmanager;"><classname>&ns;::w::listlayoutmanager</classname></ulink>, the index of which
      item was clicked on, and the <classname>busy</classname> mcguffin. The
      lambda is responsible for selecting or
      unselecting the list's items, as it sees fit.
    </para>

    <para>
      <varname>selection_changed</varname> is an optional
      <link linkend="callbacks">callback</link> that gets invoked whenever
      any item in the list gets selected or unselected, individually.
      The callback's
      <ulink url="&link-x--w--list-item-status-info-t;"><classname>&ns;::w::list_item_status_info_t</classname></ulink>
      reports which item was changed, and its new status is.
      Each individual list item can also have its own individual callback
      that gets invoked only when that item's status changes. This is invoked
      in addition to the list-wide <varname>selection_changed</varname>
      callback. This is used in <link linkend="menu">menus</link>, but
      may also be used in selection lists as well.
    </para>

    <note>
      <para>
	The usual rules for <link linkend="callbackrefs">captured
	  references</link> apply. Callbacks cannot capture references
	to their list's container, or any of its parent elements.
	The callbacks conveniently receive their list layout manager
	as one of their parameters, which should take care of most of their
	needs.
      </para>
    </note>

    <note>
      <para>
	The library obtains an <link linkend="listlock">internal lock</link>
	on the underlying list, that's held for the duration of the callback;
	and the callback must acquire its own lock, if it needs one. In any
	case, the underlying list is locked for the duration of the callback,
	and cannot be accessed by other execution threads.
      </para>
    </note>

    <blockquote>
      <informalexample>
	<programlisting>
std::optional&lt;size_t&gt; selection=list->selected();
if (selection)
{
     auto v=selection.value();
}

std::vector&lt;size_t&gt; all_selections=list->all_selected();

if (lm->selected(1))
{
   // ...
}</programlisting>
      </informalexample>
    </blockquote>

    <para>
      The <methodname>selected</methodname>() method makes an ad-hoc query
      to retrieve the currently-selected item, if there is one.
      This approach is suitable with single selection lists.
      With <classname>&ns;::w::multiple_selection_type</classname> lists
      <methodname>all_selected</methodname>() gives the list of all items
      that are currently selected;
      or an overloaded <methodname>selected</methodname>() takes a parameter
      and returns an indication whether the given item is currently selected.
    </para>

    <para>
      Given &appshort;'s multi-threaded nature, the internal library thread
      can end up selecting or unselecting a list item at any time in response
      to pointer or keyboard activity, so what's
      <methodname>selected</methodname>() can change at any time.
      Use a <link linkend="listlock">list lock</link> to freeze the contents
      of the list, examine what's <methodname>selected</methodname>(), at
      a given time, and perhaps add or remove items from the list while
      blocking all other threads from accessing the list.
    </para>

    <para>
      An alternative approach involves attaching callbacks to individual
      list items. A list item's callback gets invoked whenever the
      list item gets
      selected or unselected. Other items may be added or removed from the
      list, but the callback stays with its paired item, and gets invoked
      only for its item.
    </para>
  </section>

  <section id="listitemenable">
    <title>Enabling and disabling list items</title>

    <blockquote>
      <informalexample>
	<programlisting>
bool flag=llmanager->enabled(2);

llmanager->enabled(2, !flag);</programlisting>
      </informalexample>
    </blockquote>

    <para>
      Disabling a list item prevents it from being selected with the mouse
      pointer or the keyboard. Keyboard navigation skips over disabled
      list items, and clicking on a disabled list item with the mouse pointer
      has no effect.
    </para>

    <note>
      <para>
	<methodname>selected</methodname>() provides the means for manually
	selecting or unselecting list items, whether they're enabled or
	disabled.
      </para>
    </note>
  </section>

  <section id="listitemmethods">
    <title>Modifying the contents of a list</title>

    <para>
      The
      <ulink url="&link-typedef-x--w-listlayoutmanager;"><classname>&ns;::w::listlayoutmanager</classname></ulink>:
      does not manage discrete display elements, but a vertical list of text
      labels in <link linkend="list">selection lists</link>,
      <link linkend="combobox">combo-boxes</link>, and
      <link linkend="menu">menus</link>.
      The &itemmethods; items add new items to the list, combo-box, or a menu,
      whatever the case may be. These methods receive
      a <classname>std::vector</classname> containing the new list items.
    </para>

    <para>
      This vector contains
      <ulink url="&link-x--w--list-item-param;"><classname>&ns;::w::list_item_param</classname></ulink>s.
      <ulink url="&link-x--w--list-item-param;"><classname>&ns;::w::list_item_param</classname></ulink>
      is a (subclass-of a) <classname>std::variant</classname>.
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
llmanager->append_items(
    {
        "Lorem",
        "Ipsum",
        &ns;::w::separator{},
        "Dolor sit amet"
    });</programlisting>
      </informalexample>
    </blockquote>

    <para>
      This is an example of passing a
      <classname>std::vector&lt;&ns;::w::list_item_param&gt;</classname>
      to <methodname>append_items</methodname>(), adding new items to the list.
      The basic values of <classname>&ns;::w::list_item_param</classname>
      are:
    </para>

    <itemizedlist>
      <listitem>
	<para>
	  A UTF-8 <classname>std::string</classname> or a unicode
	  <classname>std::u32string</classname>.
	</para>
      </listitem>

      <listitem>
	<para>
	  A constructed <ulink url="&link-x--w--text-param;"><classname>&ns;::w::text_param</classname></ulink>
	  label, specifying custom fonts and colors, instead of the default
	  list font.
	</para>
      </listitem>
      <listitem>
	<para>
	  A <classname>&ns;::w::separator</classname> value visually draws
	  a separator value between groups of list items.
	</para>
      </listitem>
    </itemizedlist>

    <para>
      All items in a selection list are numbered starting with 0, and get
      automatically renumbered whenever list items get added or removed from
      the list.
      <methodname>size</methodname>() returns the number of items in the list.
      Each list item is specified by its item number,
      when using
      <methodname>selected</methodname>(),
      <methodname>enabled</methodname>(), and other list methods.
      A <classname>&ns;::w::separator</classname> is a discrete list item,
      and merits an item number of its own, in that regard.
      The above example creates items #0 through #3, if the selection list
      was empty.
    </para>

    <note>
      <para>
	The height of the selection list gets specified as the number of list
	rows. The actual height gets computed using the default list label
	font. Using custom fonts and separators results in a selection list
	with rows of varying height.
      </para>
    </note>
  </section>

  <section id="listlock">
    <title>List locks</title>

    <blockquote>
      <informalexample>
	<programlisting>
&ns;::w::list_lock lock{l};</programlisting>
      </informalexample>
    </blockquote>

    <para>
      The library's internal execution thread invokes all
      <link linkend="listcallbacks">list callbacks</link>.
      These callbacks, if needed, may construct their own independent
      <ulink url="&link-x--w--list-lock;"><classname>&ns;::w::list_lock</classname></ulink>
      by passing a
      <ulink url="&link-typedef-x--w-listlayoutmanager;"><classname>&ns;::w::listlayoutmanager</classname></ulink>
      to its constructor.
    </para>

    <para>
      Constructing the list lock blocks other execution threads from accessing
      the contents of the list until the list lock goes out of scope and
      gets destroyed. The list lock is available to the application's main
      execution thread, making a consistent snapshot of the list's
      items, and blocking the library's execution thread from changing the
      list items' selection status in the interim. Similarly the callbacks
      invoked by the internal execution threads can acquire a list lock to
      prevent the application from accessing the lists' items while they're
      being modified.
    </para>

    <note>
      <para>
	If the library's internal execution thread gets blocked by the list
	lock it won't be able to process any other messages from the
	display server until the list lock gets released.
      </para>
    </note>
  </section>

  <section id="listcolumns">
    <title>Lists with multiple columns</title>

    <blockquote>
      <informalexample>
	<programlisting>
&ns;::w::new_listlayoutmanager new_list;

new_list.columns=3;

&ns;::w::focusable_container list=f->create_focusable_container(
       []
       (const &ns;::w::focusable_container &amp;c)
       {
       },
       new_list);

&ns;::w::listlayoutmanager llmanager=list->get_layoutmanager();

llmanager->append_items(
    {
        "Lorem",
        "Ipsum",
        "Dolor",
        &ns;::w::separator{},
        "Sit",
        "Amet",
        "consectetur",
    });</programlisting>
      </informalexample>
    </blockquote>

    <para>
      This is an example of creating a list with three columns.

      <classname>&ns;::w::new_listlayoutmanager</classname> initializes
      <varname>columns</varname> to a default value of 1, resulting in one
      list item per row.
      All previous examples in this chapter used this default
      configuration. This example sets <varname>columns</varname> to 3,
      resulting in three columns per list item. This example creates a list
      with two rows, and a
      <classname>&ns;::w::separator</classname> between them.
      The resulting list's <methodname>size</methodname>() is 3: a list item
      with three columns, a separator, and another list item with three
      columns.
    </para>

    <para>
      The results of creating a list with more than one column are as follows.
      Using the example of a list with three columns:
    </para>

    <itemizedlist>
      <listitem>
	<para>
	  When creating new list items (using
	  <methodname>append_items</methodname>(),
	  <methodname>insert_items</methodname>(), et. al.)
	  what goes into each column is individually specified.
	  The number of consecutive text strings is always a multiple of three.
	</para>
      </listitem>

      <listitem>
	<para>
	  Each consecutive sequence of text strings creates one new list item.
	  <varname>size</varname>() increases by 1.
	</para>
      </listitem>

      <listitem>
	<para>
	  However, an <classname>&ns;::w::separator</classname> only
	  appears once.
	</para>
      </listitem>

      <listitem>
	<para>
	  The list layout manager automatically aligns list columns. Each
	  column gets sized wide enough for the widest contents of the
	  column, in all list rows.
	</para>

	<para>
	  It's also possible to synchronized the widths of columns of
	  two or more selection lists, so if they're positioned above
	  each other, and their enclosing container sizes them to the
	  same width, their respective columns also align with each other.
	  See <xref linkend="panesynclists" /> for an example of doing
	  this.
	</para>
      </listitem>

      <listitem>
	<para>
	  Each consecutive sequence of three text strings (and each
	  individual <classname>&ns;::w::separator</classname>, as usual),
	  forms one new logical list item, increasing the list's
	  <varname>size</varname>() by 1, as usual.
	  The list layout manager continues to automatically number
	  all logical items in the list. All other list methods,
	  such as <methodname>enabled</methodname>() or
	  <methodname>selected</methodname>(), still reference each
	  logical item using its numbered index.
	</para>
      </listitem>
    </itemizedlist>
  </section>
</chapter>
<!--
Local Variables:
mode: sgml
sgml-parent-document: ("book.xml" "book" "chapter")
End:
-->
