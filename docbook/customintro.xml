<!--

Copyright 2018 Double Precision, Inc.
See COPYING for distribution information.

-->

<chapter id="custom_overview">
  <title>Introduction</title>

  <para>
    This is a guide for creating &appshort; display elements with
    custom functionality, by taking the classes and templates
    the library uses to represent display elements and subclassing them.
    For typical use cases
    &appshort;'s display elements offer installable
    &callback;s that provide sufficient functionality.
    These callbacks provide the means for executing actions
    in response to pointer and button clicks, and other activity and events.
    This is sufficient for most needs, but subclassing offers additional
    customization beyond that.
  </para>

  <para>
    At this time, only the following display elements are fully exposed to
    the public API, and are subclassable:
  </para>

  <variablelist>>
    <varlistentry>
      <term><link linkend="customelement"><classname>&ns;::w::element</classname></link></term>
      <listitem>
	<para>
	  A basic display element, that does nothing.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><link linkend="customcanvas"><classname>&ns;::w::canvas</classname></link></term>
      <listitem>
	<para>
	  A little bit more than just an
	  <classname>&ns;::w::element</classname>. A display element with a
	  fixed size, specified in millimeters, and actual size computed
	  and updated based on the display's resolution and the current theme's
	  scaling factor.
	</para>
      </listitem>
    </varlistentry>
  </variablelist>

  <para>
    Subclasses can use
    the following <link linkend="mixintemplates">mixin templates</link>
    for inheriting
    common functionality:
  </para>

  <variablelist>>
    <varlistentry>
      <term><ulink url="&link-typedef-x--w-background-color-elementObj;"><classname>&ns;::w::background_color_elementObj</classname></ulink></term>
      <listitem>
	<para>
	  Defines one or more colors; based on the current theme and/or
	  based on the display element's size (color gradients).
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><ulink url="&link-x--w--scratch-and-mask-buffer-draw;"><classname>&ns;::w::scratch_and_mask_buffer_draw</classname></ulink></term>
      <listitem>
	<para>
	  Implements a simplified interface for drawing the contents of the
	  display element. Rather than updating only the rectangular areas
	  of the display element that require updating, the entire contents
	  of the display element get updated in one fell swoop.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><ulink url="&link-x--w--focusable-elementObj;"><classname>&ns;::w::focusable_elementObj</classname></ulink></term>
      <listitem>
	<para>
	  Adds support for handling keyboard focus and key press/release
	  events.
	</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><ulink url="&link-x--w--container-elementObj;"><classname>&ns;::w::container_elementObj</classname></ulink></term>
      <listitem>
	<para>
	  Creates an implementation class for a
	  <link linkend="customcontainer">generic container</link>.
	</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><ulink url="&link-x--w--focusframecontainer-elementObj;"><classname>&ns;::w::focusframecontainer_elementObj</classname></ulink></term>

      <listitem>
	<para>
	  Creates a specialized &container; that draws a
	  <link linkend="standard_focusframe">keyboard
	    input focus frame</link> around the container's contents
	  whenever a display element in the container has keyboard input focus.
	</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><ulink url="&link-x--w--nonrecursive-visibilityObj;"><classname>&ns;::w::nonrecursive_visibilityObj</classname></ulink></term>
      <listitem>
	<para>
	  Overrides <methodname>show_all</methodname>() and
	  <methodname>hide_all</methodname>() to make them
	  <link linkend="nonrecursive_visibility">equivalent to
	    <methodname>show</methodname>() and
	    <methodname>hide</methodname>()</link>.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><ulink url="&link-x--w--always-visibleObj;"><classname>&ns;::w::always_visibleObj</classname></ulink></term>
      <listitem>
	<para>
	  This container becomes immediately visible.
	  <methodname>show_all</methodname>() and
	  <methodname>hide_all</methodname>() are ignored, but
	  <link linkend="always_visible">continue to get processed by the
	  display elements in the container</link>.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><ulink url="&link-x--w--container-visible-elementObj;"><classname>&ns;::w::container_visible_elementObj</classname></ulink></term>
      <listitem>
	<para>
	  The entire container
	  <link linkend="container_visible"> always gets scrolled into view
	    instead of one element in the container</link>.
	</para>
      </listitem>
    </varlistentry>
  </variablelist>

  <para>
    The desired properties inherited by a custom display elements are formed
    by combining these mixin templates. For example:
    <classname>&ns;::w::nonrecursive_visibilityObj&lt;&ns;::w::container_elementObj&lt;child_elementObj&gt;&gt;</classname>.
    This chapter gives a brief overview and examples of subclassing these
    display elements and
    using these mixins.
  </para>

  <para>
    The most useful aspect of creating a custom class of &appshort;'s
    display elements is attaching some custom data to a display element
    in situations where the
    <link linkend="appdata">generic <varname>appdata</varname>
    object</link>
    is not convenient. Implementing actions in response to pointer and button
    click events is also slightly faster than using the corresponding callbacks,
    but it takes more work.
  </para>

  <section id="pubimpl">
    <title>Public and implementation objects</title>

    <para>
      As <link linkend="refobjelements">described in the introductory
	tutorial</link>
      all &appshort; objects are reference-counted objects, represented
      by reference handles.
      Each &appshort; display element consists of two objects.
      The <quote>public</quote> object is the object that's visible to
      the application, such as
      <link linkend="inputfieldsandbuttons"><classname>&ns;::w::input_field</classname></link>.
      &appshort; follows LibCXX's <ulink url="/constrefobj.html">naming
	convention</ulink>; and
      <classname>&ns;::w::input_field</classname> is an
      <classname>&ns;::ref</classname> to the
      <classname>&ns;::w::input_fieldObj</classname>
      class. All other display
      element classes follow the same naming convention.
    </para>

    <para>
      The public object (usually) has a reference to the second object,
      an internal
      <quote>implementation</quote> object.
      <classname>&ns;::w::input_fieldObj::implObj</classname> is
      <classname>&ns;::w::input_fieldObj</classname>'s implementation class.
      This is the usual naming convention (with some isolated exceptions).
    </para>

    <para>
      A brief, very brief, example of subclassing:
      the public object inherits from
      <ulink url="&link-typedef-x--w-element;"><classname>&ns;::w::elementObj</classname></ulink> (<classname>&ns;::w::elementObj</classname>
      implements shared functionality that's common to all display elements);
      and the implementation object is a subclass
      of <ulink url="&link-x--w--elementObj--implObj;"><classname>&ns;::w::elementObj::implObj</classname></ulink>.
    </para>

    <para>
      But it turns out that only the main application window
      directly subclasses <classname>&ns;::w::elementObj::implObj</classname>.
      All regular display elements are subclasses of
      <ulink url="&link-x--w--child-elementObj;"><classname>&ns;::w::child_elementObj</classname></ulink>.
      This class represents an implementation object for a
      display element in a &container;.
      All ordinary display elements always get placed inside some
      &container; and controlled by their container's &layoutmanager;.
      This results in all display elements using implementation objects
      that are subclasses of <classname>&ns;::w::child_elementObj</classname>.
    </para>
  </section>

  <section id="customimpl">
    <title>Implementing a custom display element</title>

    <para>
      Implementing a custom display element involves several steps.
    </para>

    <itemizedlist>
      <listitem>
	<para>
	  Define a subclass of the selected
	  &implementation_class;.
	</para>
      </listitem>
      <listitem>
	<para>
	  Define a subclass of the selected
	  public class. It is not necessary to subclass both the public
	  and the &implementation_class;, but this is the typical use case.
	</para>
      </listitem>
    </itemizedlist>

    <para>
      Creating each custom display element requires obtaining a
      &factory; from an
      existing container, then:
    </para>

    <itemizedlist>
      <listitem>
	<para>
	  Use the
	  &factory;'s <methodname>get_container_impl</methodname>() method.
	  This returns an
	  <ulink url="&link-typedef-x--w-container-impl;"><classname>&ns;::w::container_impl</classname></ulink>
	  that refers the parent container element's &implementation_object;.
	  The custom &implementation_class;'s parent class is
	  <classname>&ns;::w::child_elementObj</classname> whose constructor
	  takes the parent container element's &implementation_object; as
	  a parameter.
	  The custom subclass's constructor typically takes the parent container
	  element reference as the first parameter
	  to its constructor, and the subclass's
	  constructor typically passes it to its parent class together with
	  any other parameters.
	</para>
      </listitem>
      <listitem>
	<para>
	  The custom &public_class; gets constructed with the custom
	  &implementation_class; as its parameter. This typically gets forwarded
	  to the public class's parent class.
	  The implementation subclass is typically a subclass of the public
	  object's implementation class. The public parent class's
	  constructor's first parameter is usually its &implementation_object;.
	  Because of this, the custom public object subclass's
	  constructor simply forwards
	  its implementation class to the public object's parent class's
	  constructor.
	</para>
      </listitem>

      <listitem>
	<para>
	  The constructed &public_object; gets passed to the &factory;'s
	  <methodname>created_internally</methodname>() method. This method
	  places the new display element into its container.
	  Just creating the &implementation_object; and the &public_object;
	  is not the entire story. The story doesn't end until the
	  &factory;'s
	  <methodname>created_internally</methodname>() gets called.
	</para>
      </listitem>
    </itemizedlist>
  </section>
</chapter>

<!--
Local Variables:
mode: sgml
sgml-parent-document: ("book.xml" "book" "chapter")
End:
-->
