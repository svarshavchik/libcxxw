<!--

Copyright 2018 Double Precision, Inc.
See COPYING for distribution information.

-->

<chapter id="printdialog">
  <title>Print Dialog</title>

  <mediaobject>
    <imageobject>
      <imagedata fileref="printdialog.png" format="PNG"
		 contentwidth="537px" contentdepth="396px" />
    </imageobject>
    <textobject>
      <phrase>
	Print dialog
      </phrase>
    </textobject>
    <caption>
      <para>
	<filename>printdialog.C</filename> demonstrates the basics of using
	a
	<ulink url="&link-typedef-x--w-print-dialog;"><classname>&ns;::w::print_dialog</classname></ulink>.
	This dialog shows a list of printers, and each printer's options.
      </para>

      <note>
	<para>
	  Using this dialog requires linking with
	  <literal>-lcxxwcups</literal> and <literal>-lcxxcups</literal>
	  in addition to the default libraries.
	  See the sample
	  <ulink url="examples/Makefile.am"><filename>Makefile.am</filename></ulink>
	  for more information.
	</para>
      </note>
    </caption>
  </mediaobject>

  <blockquote>
    <title><ulink url="examples/printdialog.C">printdialog.C</ulink></title>

    <informalexample>
      <programlisting><xi:include href="../examples/printdialog.C" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
    </informalexample>
  </blockquote>

  <section id="printdialoguse">
    <title>Using the print dialog</title>

    <para>
      <filename>printdialog.C</filename> calls the
      <ulink url="&link-typedef-x--w-main-window;"><classname>&ns;::w::main_window</classname></ulink>'s
      <methodname>create_print_dialog</methodname>()'s method to create the
      print dialog in advance, during the program's initialization phase.
      Clicking the sole <quote>Print</quote> button in the window opens
      a <link linkend="filedialog">file dialog</link> first, this select the
      file to print. Afterwards the print dialog's
      <methodname>initial_show</methodname>() makes it visible.
    </para>

    <para>
      <methodname>initial_show</methodname>() returns immediately, so it can
      be called from some other &callback;, in this case the file dialog's
      callback.
      <methodname>create_print_dialog</methodname>()'s
      <ulink url="&link-x--w--print-dialog-config;"><classname>&ns;::w::print_dialog_config</classname></ulink>
      parameter specifies a &callback; that gets invoked in response to the
      <quote>Print</quote> button.
    </para>

    <para>
      The callback receives a
      <ulink url="&link-x--w--print-callback-info;"><classname>&ns;:;w::print_callback_info</classname></ulink>
      parameter with a pre-configured
      <ulink url="/cups_job.html"><classname>&ns;::cups::job</classname></ulink>
      based on the options selected in the print dialog.
      <filename>printdialog.C</filename> saves the file after it gets selected
      in the initially-shown file open dialog, then use the
      <classname>&ns;::cups::job</classname> to submit the print job.
    </para>
  </section>

  <section id="printdialogsingleton">
    <title>Another singleton example</title>

    <para>
      <link linkend="printdialog"><filename>printdialog.C</filename></link>
      gives another example of using <link linkend="singletonptr">global
	singleton pointers</link>.
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
class my_appObj : virtual public &ns;::obj {

public:

// ...
};

typedef &ns;::singletonptr&lt;my_appObj&gt; my_app;

// ..............

&ns;::ptr&lt;my_appObj&gt; app_ptr;

auto main_window=&ns;::w::main_window::create(
    []
    (const auto &amp;main_window)
    {
        // ...

        app_ptr=x::ref&lt;my_appObj&gt;::create(main_window);
    });

my_app app{app_ptr};</programlisting>
      </informalexample>
    </blockquote>

    <para>
      <filename>printdialog.C</filename> uses a global singleton
      pointer object for:
    </para>

    <itemizedlist>
      <listitem>
	<para>The main application window itself.</para>
      </listitem>
      <listitem>
	<para>The main window's dialogs.</para>
      </listitem>
      <listitem>
	<para>
	  The name of the file selected by the <quote>file open</quote>
	  dialog. The file to print gets selected from this dialog and saved
	  in the application object, then the print dialog opens. If the
	  print dialog is not get cancelled, if the dialog's
	  <quote>Print</quote> button gets selected, the name of the previously
	  selected file is retrieved, and printed.
	</para>
      </listitem>
    </itemizedlist>
  </section>
</chapter>
<!--
Local Variables:
mode: sgml
sgml-parent-document: ("book.xml" "book" "chapter")
End:
-->
