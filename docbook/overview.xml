<!--

Copyright 2018 Double Precision, Inc.
See COPYING for distribution information.

-->

<chapter id="libcxx_overview">
  <title>&libcxx; overview</title>

  <para>
    &app; is built using the &libcxx; library, a library of classes and
    templates based on reference-counted objects. Some existing familiarity
    with &libcxx; will be helpful in understanding how to use
    &appshort;'s classes, but is not strictly necessary.
    A brief overview follows.
  </para>

  <para>
    All &appshort; classes and templates are defined in the
    <literal>&ns;::w</literal> namespace.
  </para>

  <section id="referencehier">
    <title>References</title>

    <para>
      It's important to understand the relationship between the various
      objects and classes.

      All classes and templates, like
      <ulink url="&link-typedef-x--w-connection;"><classname>&ns;::w::connection</classname></ulink>
      and
      <ulink url="&link-typedef-x--w-screen;"><classname>&ns;::w::screen</classname></ulink>
      are reference-counted objects, based on
      <ulink url="&refobj;"><classname>&ns;::ref</classname> and
      <classname>&ns;::ptr</classname></ulink>.
      <classname>&ns;::w::connection</classname>,
      <classname>&ns;::w::screen</classname> and others,
      are just reference handles, similar to
      <classname>std::shared_ptr</classname>.
    </para>

    <para>
      The &app; takes care of creating the actual, underlying objects, and
      when the last reference, last handle, to the underlying object goes
      out of scope, the underlying object gets destroyed. This includes
      both the explicit references, and the internal references the underlying
      objects have to each other.
    </para>

    <para>
      Except as stated, the &app;'s internal references are generally
      as follows:
    </para>

    <itemizedlist>
      <listitem>
	<para>
	  The &app; does not maintain its own internal references to top
	  level widgets, like
	  <ulink url="&link-typedef-x--w-main-window;"><classname>&ns;::w::main_window</classname></ulink>.
	</para>
      </listitem>

      <listitem>
	<para>
	  <classname>&ns;::w::main_window</classname> holds a reference on
	  its
	  <classname>&ns;::w::screen</classname>, which holds a reference on
	  its
	  <classname>&ns;::w::connection</classname>.
	</para>
      </listitem>

      <listitem>
	<para>
	  A <ulink url="&link-typedef-x--w-container;">container</ulink>
	  holds a reference to its
	  <ulink url="&link-typedef-x--w-layoutmanager;">layout
	  manager</ulink>, and the layout manager holds reference to
	  all elements in the container.
	</para>
      </listitem>
    </itemizedlist>

    <para>
      A main window is a container. Typically, an application
      creates its main window, and stores its
      <classname>&ns;::w::main_window</classname> somewhere. The application
      procedes and creates the various widgets, putting them in their
      containers, which now hold a reference on them.
    </para>

    <para>
      In this manner, all references end up being rooted in their main
      window object.
      When the application destroys its
      <classname>&ns;::w::main_window</classname> handle, the cascading
      effect from that destroys all widgets and internal objects.
    </para>

    <para>
      This works correctly as long as no other references to any widgets, or other related objects, exist. If the application has
      a reference to a widget, or some other &app; object that's
      tied to the main application window, directly, or indirectly, this is
      going to prevent the main application window from getting properly
      destroyed.
    </para>
  </section>
</chapter>

<!--
Local Variables:
mode: sgml
sgml-parent-document: ("book.xml" "book" "chapter")
End:
-->
