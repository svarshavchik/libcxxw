<!--

Copyright 2017 Double Precision, Inc.
See COPYING for distribution information.

-->

<chapter id="wordwraplabel">
  <title>Word-wrapping labels</title>

  <mediaobject>
    <imageobject>
      <imagedata fileref="wordwraplabel.png" format="PNG"
		 contentwidth="394px" contentdepth="268px"/>
    </imageobject>
    <textobject>
      <phrase>
	Hello World!
      </phrase>
    </textobject>
    <caption>
      <para>
	This example follows up
	on the <link linkend="helloworld"><quote>hello world</quote>
	program</link>.
	It uses <link linkend="labels">a
	<methodname>create_label()</methodname> overload</link> to
	create a label that word-wraps its text to the given width.
	A word-wrapping label gets created by setting
	<ulink url="&link-x--w--label-config;"><classname>&ns;::w::label_config</classname></ulink>'s
	<varname>widthmm</varname> value.
      </para>

      <para>
	See <xref linkend="examples" /> for more information on building
	this example:
      </para>
    </caption>
  </mediaobject>

  <blockquote>
    <title><ulink url="examples/wordwraplabel.C">wordwraplabel.C</ulink></title>

    <informalexample>
      <programlisting><xi:include href="../examples/wordwraplabel.C" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
    </informalexample>
  </blockquote>

  <para>
    Notes:
  </para>

  <itemizedlist>
    <listitem>
      <para>
	<link linkend="creator"><classname>&ns;::w::main_window</classname>
	  creator lambda</link> is factored out, in this example, into
	a separate function, for clarity.
	<function>create_mainwindow</function>() sets the main window's
	background to light yellow, then just like
	<link linkend="helloworld"><filename>helloworld.C</filename></link>
	it uses the main window's grid layout manager to
	<methodname>create_label</methodname>() inside it.
      </para>
    </listitem>
    <listitem>
      <para>
	A word-wrapped label gets created by setting
	<varname>widthmm</varname>. This sets the width of the label
	in millimeters, and not pixels.
	The estimated width gets scaled by the display screen's resolution
	automatically, to compute the targeted width in pixels.
	Furthermore, the eventual width of the word-wrapped label may differ,
	because its container's layout manager may end up adjusting its
	width based on other display elements in the containjer.
      </para>
    </listitem>
    <listitem>
      <para>
	Newline characters create multi-line text in a regular, unsized, label.
	Specifying
	an estimated width essentially turns the newline characters into
	paragraph breaks, and the label gets word-wrapped.
      </para>

      <para>
	The estimated width parameter sets the initial text label width, in most
	cases; but this is only a suggestion.
	The label automatically adjusts the width of the
	word-wrapped text to fit whatever space is available. When a window
	has other elements the grid layout manager typically computes
	the width of the label's columns based on other display elements'
	requirements. The label then adjusts its width accordingly.
      </para>
    </listitem>
    <listitem>
      <para>
	The above example does not create any other display elements, so
	the window does not have any other requirements. The resulting
	window's width becomes resizable. The window's width can be increased
	or decreased. The text flows to fit the window's width; in turn
	adjusting the window's height as well.
      </para>
    </listitem>
    <listitem>
      <para>
	Setting <varname>alignment</varname> together with
	<varname>widthmm</varname> sets the
	horizontal alignment of each line. If not specified the text is
	shown left-aligned, normally.
      </para>
    </listitem>
  </itemizedlist>

  <para>
    <filename>wordwraplabel.C</filename> also demonstrates several other
    formatting options for the text parameter:
  </para>

  <itemizedlist>
    <listitem>
      <para>
	An <ulink url="&link-x--w--rgb;"><classname>&ns;::w::rgb</classname></ulink>
	parameter sets the color for the following text. A second
	<classname>&ns;::w::rgb</classname> parameter in a row sets the
	text's background color.
      </para>
    </listitem>

    <listitem>
      <para>
	An <ulink url="&link-x--w--font;"><classname>x::w::font</classname></ulink>
	parameter sets the font for the following text.
	<literal>#include &lt;&ns;/w/font_literals.H&gt;</literal> allows
	specifying the font as a
	<ulink url="&link-function-x--w-operatorQQ--font;">"<replaceable>description</replaceable>"<literal>_font</literal>
	  decorator</ulink>.
      </para>
    </listitem>
  </itemizedlist>

  <section id="screen_positions">
    <title>Preserving window positions</title>

    <para>
      Running
      <link linkend="wordwraplabel"><filename>wordwraplabel.C</filename></link>
      again
      should open its window in the same position where it was previously,
      This stickiness needs some additional coding, and the actual behavior may
      vary depending upon the display screen's window manager, the ultimate
      judge where new windows open and how big they are.
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
#include &lt;&ns;/config.H&gt;
#include &lt;&ns;/w/screen_positions.H&gt;

std::string configfile=
   &ns;::configdir("wordwraplabel@examples.w.libcxx.com")
		+ "/windows";

&ns;::w::screen_positions pos;

// ...

main_window->save("main", pos);
pos->save(configfile);</programlisting>
      </informalexample>
    </blockquote>

    <para>
      <ulink url="&link-typedef-x--w-main-window;"><classname>&ns;::w::main_window</classname></ulink>'s
      <methodname>save</methodname>() gets called before
      the program ends. This records the window's last known position on
      the screening an
      <ulink url="&link-x--w--screen-positions;"><classname>&ns;::w::screen_positions</classname></ulink>.
      More than one window's position may be recorded, and each position
      is identified by a unique label. The application may put more than one
      window's position in the container, using a unique identifier for each
      window.
      <ulink url="&link-x--w--screen-positions;"><classname>&ns;::w::screen_positions</classname></ulink>'s
      <methodname>save</methodname>() saves all positions
      in a file.
      This example program uses &libcxx;'s base library's
      <ulink url="/configdir.html"><function>&ns;::configdir</function></ulink>
      function to initialize a configuration directory for
      <filename>wordwraplabel</filename>'s use, where the window's position
      get saved.
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
&ns;::w::screen_positions pos{configfile};

auto main_window=
    &ns;::w::main_window::create(pos, "main",
                              [&amp;]
                              (const &ns;::w::main_window)
                              {
                                 // ...</programlisting>
      </informalexample>
    </blockquote>

    <para>
      Passing a filename to
      <ulink url="&link-x--w--screen-positions;"><classname>&ns;::w::screen_positions</classname></ulink>'s
      constructor
      reads the previously saved positions from the file, if the file exists.
      The <classname>&ns;::w::screen_positions</classname> object
      and the application-assigned label for the
      main window gets passed to the overloaded main window
      <function>create</function>()or.
      If the named window's position
      were saved the last time
      <filename>wordwraplabel</filename> ran, the same position and size
      gets set for the new window.
    </para>

    <note>
      <para>
	It's possible that application windows will open in their last known
	position even without explicitly saving them this way. Some
	window managers try to remember application windows, and open them
	in the same location. It's also possible that an application's
	requested window position gets ignored by the window manager, and
	the application window still opens in some other location
	on the screen.
      </para>
    </note>
  </section>
</chapter>
<!--
Local Variables:
mode: sgml
sgml-parent-document: ("book.xml" "book" "chapter")
End:
-->
