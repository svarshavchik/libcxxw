<!--

Copyright 2017 Double Precision, Inc.
See COPYING for distribution information.

-->

<chapter id="wordwraplabel">
  <title>Word-wrapping labels</title>

  <mediaobject>
    <imageobject>
      <imagedata fileref="wordwraplabel.png" format="PNG"
		 contentwidth="394px" contentdepth="268px"/>
    </imageobject>
    <textobject>
      <phrase>
	Hello World!
      </phrase>
    </textobject>
    <caption>
      <para>
	This example follows up
	on the <link linkend="helloworld"><quote>hello world</quote>
	program</link>.
	It uses <link linkend="labels">a
	<methodname>create_label()</methodname> overload</link> to
	create a label that word-wraps its text to the given width.
	A word-wrapping label gets created by setting
	<ulink url="&link-x--w--label-config;"><classname>&ns;::w::label_config</classname></ulink>'s
	<varname>widthmm</varname> value.
      </para>

      <para>
	See <xref linkend="examples" /> for more information on building
	this example:
      </para>
    </caption>
  </mediaobject>

  <blockquote>
    <title><ulink url="examples/wordwraplabel.C">wordwraplabel.C</ulink></title>

    <informalexample>
      <programlisting><xi:include href="../examples/wordwraplabel.C" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
    </informalexample>
  </blockquote>

  <para>
    Notes:
  </para>

  <itemizedlist>
    <listitem>
      <para>
	<link linkend="creator"><classname>&ns;::w::main_window</classname>
	  creator lambda</link> is factored out, in this example, into
	a separate function, for clarity.
	Setting <varname>background_color</varname> in the
	<classname>&ns;::w::main_window_config</classname> and using it to
	create the main window (see <xref linkend="screen_positions" />
	for more information) with
	<function>create_mainwindow</function>() sets the main window's
	background to light yellow, then just like
	<link linkend="helloworld"><filename>helloworld.C</filename></link>
	it uses the main window's grid layout manager to
	<methodname>create_label</methodname>() inside it.
      </para>
    </listitem>
    <listitem>
      <para>
	A word-wrapped label gets created by setting
	<varname>widthmm</varname>. This sets the width of the label
	in millimeters, and not pixels.
	The estimated width gets scaled by the display screen's resolution
	automatically, to compute the targeted width in pixels.
	Furthermore, the eventual width of the word-wrapped label may differ,
	because its container's layout manager may end up adjusting its
	width based on other widgets in the containjer.
      </para>
    </listitem>
    <listitem>
      <para>
	Newline characters create multi-line text in a regular, unsized, label.
	Specifying
	an estimated width essentially turns the newline characters into
	paragraph breaks, and the label gets word-wrapped.
      </para>

      <para>
	The estimated width parameter sets the initial text label width, in most
	cases; but this is only a suggestion.
	The label automatically adjusts the width of the
	word-wrapped text to fit whatever space is available. When a window
	has other elements the grid layout manager typically computes
	the width of the label's columns based on other widgets'
	requirements. The label then adjusts its width accordingly.
      </para>
    </listitem>
    <listitem>
      <para>
	The above example does not create any other widgets, so
	the window does not have any other requirements. The resulting
	window's width becomes resizable. The window's width can be increased
	or decreased. The text flows to fit the window's width; in turn
	adjusting the window's height as well.
      </para>
    </listitem>
    <listitem>
      <para>
	Setting <varname>alignment</varname> together with
	<varname>widthmm</varname> sets the
	horizontal alignment of each line. If not specified the text is
	shown left-aligned, normally.
      </para>
    </listitem>
  </itemizedlist>

  <para>
    <filename>wordwraplabel.C</filename> also demonstrates several other
    formatting options for the text parameter:
  </para>

  <itemizedlist>
    <listitem>
      <para>
	An <ulink url="&link-x--w--rgb;"><classname>&ns;::w::rgb</classname></ulink>
	parameter sets the color for the following text. A second
	<classname>&ns;::w::rgb</classname> parameter in a row sets the
	text's background color.
	The <filename>rgb.H</filename> header file defines
	<link linkend="html32colors">standard HTML 3.2 colors</link> as
	<classname>&ns;::w::rgb</classname>s, for convenience.
      </para>

    </listitem>

    <listitem>
      <para>
	An <ulink url="&link-x--w--font;"><classname>x::w::font</classname></ulink>
	parameter sets the font for the following text.
      </para>
    </listitem>
  </itemizedlist>

  <section id="fontliterals">
    <title>Using font literals</title>

    <para>
      <filename>wordwraplabel.C</filename> demonstrates using font literals.
      <literal>#include &lt;&ns;/w/font_literals.H&gt;</literal>
      enables
      <ulink url="&link-function-x--w-operatorQQ-font;">"<replaceable>description</replaceable>"<literal>_font</literal>
	decorators</ulink> that construct a
      <ulink url="&link-x--w--font;"><classname>x::w::font</classname></ulink>.
    </para>
    <para>
      <literal>#include &lt;&ns;/w/text_param_literals.H&gt;</literal>
      enables
      <ulink url="&link-function-x--w-operatorQQ-theme-font;">"<replaceable>description</replaceable>"<literal>_theme_font</literal>
	decorators</ulink> that construct <classname>theme_font</classname>s
      for creating
      <ulink url="&link-x--w--text-param;"><classname>&ns;::w::text_param</classname></ulink>s.
    </para>
  </section>

  <section id="appearance">
    <title>Customizing visual appearance of widgets</title>

    <para>
      <link linkend="wordwraplabel"><filename>wordwraplabel.C</filename></link>
      gives an example of using so-called <quote>appearance objects</quote>
      to adjust a widget's visual appearance. The visual appearance
      of &appshort;'s widgets defaults to the
      current <link linkend="cxxwtheme.1">display theme</link>.
      <filename>wordwraplabel.C</filename> overrides the default window
      background color to light yellow for showing text
      in blue and black colors.
    </para>


    <para>
      An appearance object is a
      <link linkend="refobjelements">reference-counted object</link>
      accessed using &libcxx;'s
      <ulink url="&refobj;">smart pointers</ulink>.
      The appearance objects are constant objects, and their smart pointer
      handles follow the default &libcxx; naming conventions. A main window's
      appearance object handle is named
      <classname>&ns;::w::const_main_window_appearance</classname>.
      Each &appshort;'s class that gets used to create a widget
      has an appearance object attached to it, and the appearance object
      remains attached to the widget for the duration of its
      existence.
    </para>

    <section id="appearancemodify">
      <title>Modifying an appearance object</title>

      <para>
	The &connection_thread; uses appearance objects for rendering.
	The appearance objects are thread-safe by the virtue of them being
	constant objects.
	An existing appearance object never gets modified directly.
	Each appearance object's <methodname>modify</methodname>() method
	creates a duplicate copy of the
	original appearance object which then gets
	modified, and <methodname>modify</methodname>() returns a new, constant, appearance object.
      </para>


      <para>
	A new main window gets created using a
	<ulink url="&link-x--w--main-window-config;"><classname>&ns;::w::main_window_config</classname></ulink>
	whose <varname>appearance</varname> member specifies the main window's
	default visual appearance. This is a design pattern that's universally
	shared by all widgets.
	For example,
	an <ulink url="&link-x--w--new-listlayoutmanager;"><classname>&ns;::w::new_listlayoutmanager</classname></ulink>'s
	<varname>appearance</varname> object specifies the visual appearance
	of a new list.
      </para>

      <para>
	The <varname>appearance</varname> is always a
	<classname>&ns;::const_ref</classname>.
	It gets dereferenced to a constant object that cannot be modified.
	The initial, default <varname>appearance</varname> is always a
	cached, constant object that sets the visual appearance from the
	current display theme.
	Implementing a custom appearance involves using the appearance
	object's <methodname>modify</methodname>() to create a modifiable copy
	of itself. The resulting object gets modified, and placed back into
	the original object where the appearance came from:
      </para>

      <blockquote>
	<informalexample>
	  <programlisting>
#include &lt;&ns;/w/main_window_appearance.H&gt;
#include &lt;&ns;/w/rgb.H&gt;

&ns;::w::main_window_config config;

&ns;::w::const_main_window_appearance appearance=config.appearance;

appearance=appearance->modify
    ([]
     (const &ns;::w::main_window_appearance &amp;appearance)
     {
         appearance->background_color=&ns;::w::white;
     });

config.appearance=appearance;</programlisting>
	</informalexample>
      </blockquote>

      <para>
	<classname>&ns;::w::main_window_config</classname>'s default
	constructor installs the default, cached, <varname>appearance</varname>
	reflecting the current display theme.
        Its handle name is
	<classname>&ns;::w::const_main_window_appearance</classname>
	reflecting that it's a reference to a <literal>const</literal> object.
      </para>

      <para>
	An appearance object's <methodname>modify</methodname>() method takes
	a callable object, or a closure, as its parameter. The closure
	receives a modifiable copy of the original appearance object,
	an
	<ulink url="&link-typedef-x--w-main-window-appearance;"><classname>&ns;::w::main_window_appearance</classname></ulink>.
	The closure makes changes to the appearance object, and
	<methodname>modify</methodname>() returns a new constant
	appearance object that replaces
	<classname>&ns;::w::main_window_config</classname>'s original one.
      </para>

      <para>
	Appearance-objects, like all other library objects, are
	<link linkend="refobjelements">reference-counted objects</link>. This
	convention ensures by contract that appearance objects referenced
	by active widgets are always constant and thread-safe.
	This approach makes appearance objects modifiable only after they're
	copied from an existing constant object, and the modified appearance
	objects remain constant thereafter.
      </para>
    </section>

    <section id="appearancecache">
      <title>Caching appearance objects</title>

      <para>
	Each call to an existing appearance object's
	<methodname>modify</methodname>() creates a new object. It is more
	efficient to use the same appearance object with multiple widgets that should have the same visual appearance.
      </para>

      <para>
	If all widgets with the same appearance get created together,
	it's simple enough to create their common appearance object and use
	them when creating each one. When widgets get created in
	different places, taking advantage of static local function scope
	is a basic, thread-safe singleton implementation:
      </para>

      <blockquote>
	<informalexample>
	  <programlisting>
#include &lt;&ns;/w/progressbar_appearance.H&gt;

static &ns;::w::const_progressbar_appearance create_custom_appearance()
{
    return &ns;::w::progressbar_appearance::base::theme()->modify
        ([]
         (const auto &amp;appearance)
         {
             appearance->label_font=&ns;::w::font{"liberation mono; point_size=24"};
         });
}

static &ns;::w::const_progressbar_appearance &amp;custom_progressbar()
{
    static const &ns;::w::const_progressbar_appearance obj=
        create_custom_appearance();

    return obj;
}

// ...

&ns;::w::progressbar_config config;

    config.appearance=custom_progressbar();

    factory->create_progressbar
        ([]
         (const LIBCXX_NAMESPACE::w::progressbar &amp;container)
         {
              // ...
         },
         config);</programlisting>
	</informalexample>
      </blockquote>

      <para>
	<function>custom_progressbar</function>() returns a native reference
	to the same appearance object, that gets automatically constructed
	in a thread-safe manner. All <link linkend="progressbar">progress
	  bar</link>s will share, efficiently, the same appearance object.
      </para>
    </section>

    <section id="appearanceuixml">
      <title>Using an <acronym>XML</acronym> stylesheet to create an appearance object</title>

      <para>
	It is also possible to create a new appearance object from an
	<acronym>XML</acronym> stylesheet. See <xref linkend="uixmldoc" /> for more
	information.
      </para>
    </section>
  </section>
</chapter>
<!--
Local Variables:
mode: sgml
sgml-parent-document: ("book.xml" "book" "chapter")
End:
-->
