<!--

Copyright 2018-2019 Double Precision, Inc.
See COPYING for distribution information.

-->

<chapter id="copycutpastemenu">
  <title>Copy/Cut/Paste menu items</title>

  <mediaobject>
    <imageobject>
      <imagedata fileref="copycutpastemenu.png" format="PNG"
		 contentwidth="473px" contentdepth="145px" />
    </imageobject>
    <textobject>
      <phrase>
	Copy/Cut/Paste menu
      </phrase>
    </textobject>
    <caption>
      <para>
	This chapter gives an example of creating and implementing
	traditional <quote>Copy</quote>, <quote>Cut</quote>, and
	<quote>Paste</quote> menu options. All input fields have a default
	right pointer context popup menu with these options. This example
	shows how to add these options to an application's
	<link linkend="menu"> main menu</link>, for
	convenience, and how to customize or replace the default input
	field context popup menu.
      </para>
    </caption>
  </mediaobject>

  <para>
    Using the keyboard to execute copy, cut, and paste text to the primary
    and secondary clipboards does not require any specific application
    code, and gets <link linkend="textclipboards">automatically carried
    out in every text input field</link>.
    Explicit application code is only needed to create and implement
    explicit <quote>Copy</quote>, <quote>Cut</quote>, and
    <quote>Paste</quote> menu options.
  </para>

  <para>
    <filename>copycutpastemenu.C</filename> gives an example of
    <quote>Copy</quote>, <quote>Cut</quote>, and
    <quote>Paste</quote> menu options in the main application menu and
    in a context popup menu. <filename>copycutpastemenu.C</filename>
    creates an application window with an input field and a button; the
    button takes no explicit action. The application's main menu has a
    <quote>Copy</quote>, <quote>Cut</quote>, and
    <quote>Paste</quote> items that execute the corresponding action. These
    menu items also appear in a context popup menu that's shown by pressing
    pointer button #3 (usually the right mouse button)
    over the text input field.
  </para>

  <blockquote>
    <title><ulink url="examples/copycutpastemenu.C">copycutpastemenu.C</ulink></title>

    <informalexample>
      <programlisting><xi:include href="../examples/copycutpastemenu.C" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
    </informalexample>
  </blockquote>

  <para>
    The typical workflow for
    implementing the stock <quote>Copy</quote>, <quote>Cut</quote>, and
    <quote>Paste</quote> menu items:
  </para>

  <itemizedlist>
    <listitem>
      <para>
	A new menu gets created either creating a new application menu with the
	<link linkend="menu">menu bar layout manager</link>, or
	by creating a <link linkend="popupmenu">context popup menu</link>.
	Use the menu's
	<link linkend="list">list layout manager</link>'s
	<methodname>append_copy_cut_paste</methodname>() to add the
	<quote>Cut</quote>,
	<quote>Copy</quote>, and
	<quote>Paste</quote> entries to the menu.
      </para>
    </listitem>

    <listitem>
      <para>
	<methodname>append_copy_cut_paste</methodname>() returns an
	<ulink url="&link-typedef-x--w-copy-cut-paste-menu-items;"><classname>&ns;::w::copy_cut_paste_menu_items</classname></ulink>
	object. An optional step consists of saving this object and making
	arrangements to invoke its <methodname>update</methodname>() method
	just before the menu becomes visible.
      </para>

      <para>
	This enables or disables the menu items depending upon whether there's
	a selection that's available for copying, cutting, or pasting.
      </para>
    </listitem>
  </itemizedlist>

  <section id="copycutpasteappmenu">
    <title>Application menus with copy, cut, and paste items</title>

    <para>
      <methodname>append_copy_paste</methodname>() takes a parameter that
      specifies either the application main window, when creating
      <quote>Copy</quote>, <quote>Cut</quote>, and
      <quote>Paste</quote> application menu options, or an input field element
      when creating its context popup menu.
    </para>

    <para>
      <classname>&ns;::w::copy_cut_paste_menu_items</classname>'s
      <methodname>update</methodname>() enables or disables the
      <quote>Copy</quote>, <quote>Cut</quote>, and
      <quote>Paste</quote> options depending upon whether
      the corresponding action is available. This needs checking just before
      the corresponding menu gets displayed:
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
&ns;::w::main_window mw;

// ...

auto mblm=mw->get_menubarlayoutmanager();
auto mbf=mblm->append_menus();

// ...

// The application's "Edit" menu:

x::w::copy_cut_paste_menu_itemsptr ccp;

x::w::menu edit_menu=
        mbf->add([]
             (const auto &amp;f)
             {
                 f->create_label("Edit");
             },
             [&amp;]
             (const &ns;::w::listlayoutmanager &amp;lm)
             {
                 //! Other "Edit" menu items.

                 ccp=lm->append_copy_cut_paste(mw);
             });

edit_menu->on_popup_state_update
        ([n_copy_cut_paste, ccp=x::w::copy_cut_paste_menu_items{ccp}]
         (ONLY IN_THREAD,
          const x::w::element_state &amp;es,
          const x::w::busy &amp;mcguffin)
         {
             if (es.state_update != es.before_showing)
                 return;

             ccp->update(IN_THREAD);
         });</programlisting>
      </informalexample>
    </blockquote>

    <para>
      <ulink url="&link-typedef-x--w-menu;"><classname>&ns;::w::menu</classname></ulink>'s
      <methodname>on_popup_state_update</methodname>() &callback; gets installed
      in order to check and set the status of the options in the application's
      menu. <filename>copycutpastemenu.C</filename> installs this &callback;
      for its only <quote>File</quote> menu.
    </para>

    <para>
      This callback gets invoked whenever the popup menu gets shown
      or hidden, or its size or location changes. For this application, it's
      only necessary to carry out a specific action before the popup menu
      becomes visible. The callback receives an
      <ulink url="&link-x--w--element-state;"><classname>&ns;::w::element_state</classname></ulink>
      parameter that specifies why it's getting invoked, and
      <filename>copycutpastemenu.C</filename> checks that its
      <varname>state_update</varname> indicates
      <literal>before_showing</literal>. This specifies that the reason
      for the callback's invocation is that the popup is about to become
      visible. <filename>copycutpastemenu.C</filename> updates the status
      of its menu items accordingly.
    </para>
  </section>

  <section id="copycutpastepopup">
    <title>Context menu popups with copy, cut, and paste items</title>

    <para>
      Input fields get a default context popup menu with just
      <quote>Copy</quote>,
      <quote>Cut</quote>, and
      <quote>Paste</quote> options.
      Using
      <link linkend="popupmenu"><methodname>install_contextpopup_callback</methodname></link>()
      on an input field replaces the default popup menu with a custom one.
      <ulink url="examples/copycutpastemenu.C">copycutpastemenu.C</ulink> gives
      an example of adding the default options to a custom popup menu.
      <filename>copycutpastemenu.C</filename> creates a context popup menu
      for an input field containing just these default options, so the
      end result looks just like the default popup, but is trivially
      extendible with any other options.
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
ifield->install_contextpopup_callback
    ([]
     (ONLY IN_THREAD,
      const x::w::input_field &amp;ifield,
      const x::w::callback_trigger_t &amp;trigger,
      const x::w::busy &amp;mcguffin)
     {
          // ...

          &ns;::w::container context_popup=
              ifield->create_popup_menu
              ([&amp;]
               (const &ns;::w::listlayoutmanager &amp;llm)
               {
                   // ...

                   ifield->append_copy_cut_paste(IN_THREAD, ifield)
                           ->update(IN_THREAD);
               });
       });</programlisting>
      </informalexample>
    </blockquote>

    <para>
      <ulink url="examples/copycutpastemenu.C">copycutpastemenu.C</ulink>
      gives an example of following the rules for managing
      <link linkend="callbackrefs">references to
	the popup menu and its callbacks</link>, and correctly creating and
      destroying the context popup menu after it's no longer needed.
    </para>
  </section>
</chapter>
<!--
Local Variables:
mode: sgml
sgml-parent-document: ("book.xml" "book" "chapter")
End:
-->
