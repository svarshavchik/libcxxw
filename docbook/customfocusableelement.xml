<!--

Copyright 2018 Double Precision, Inc.
See COPYING for distribution information.

-->

<chapter id="customfocusableelement">
  <title>Custom focusable <classname>&ns;::w::element</classname></title>

  <para>
    <filename>customkeyfocus.C</filename> is an example of creating
    a custom subclass of the basic
    <ulink url="&link-typedef-x--w-element;"><classname>&ns;::w::element</classname></ulink>
    display element with keyboard focus support.
    Handling keyboard focus allows a display element to process key press
    and release events.
    <literal>TAB</literal> key moves the keyboard focus to the next
    focusable display element, one at a time.
    (<literal>SHIFT-TAB</literal> goes backwards in the order).
    Key press and release events get routed to the display element with
    the current keyboard focus.
  </para>

  <para>
    Requirements for implementing a custom display element that handles
    keyboard focus:
  </para>

  <itemizedlist>
    <listitem>
      <para>
	The &implementation_class; must be a subclass of the
	<ulink url="&link-x--w--focusable-elementObj;">
	  <classname>&ns;::w::focusable_elementObj</classname></ulink>
	template. This is a &template_mixin; that multiply-inherits from its
	template parameter and
	<ulink url="&link-x--w--focusableObj--implObj;"><classname>&ns;::w::focusableObj::implObj</classname></ulink>,
	which implements the keyboard focus support.
      </para>
    </listitem>

    <listitem>
      <para>
	The &public_class; must derive from
	<ulink url="&link-x--w--focusableObj--ownerObj;"><classname>&ns;::w::focusableObj::ownerObj</classname></ulink>,
	designating the public subclass as the responsible
	<quote>owner</quote> of the focusable display element. The
	&public_class; multiply-inherits from
	<classname>&ns;::w::focusableObj::ownerObj</classname> and a
	<classname>&ns;::w::elementObj</classname>, or some subclass of it.
      </para>

      <para>
	<classname>&ns;::w::focusableObj::ownerObj</classname>'s constructor
	takes a reference handle to
	<classname>&ns;::w::focusableObj::implObj</classname>; so passing
	it the &implementation_class;, which derives from it via
	<classname>&ns;::w::focusable_elementObj</classname>, is sufficient.
      </para>
    </listitem>
  </itemizedlist>

  <para>
    <filename>customkeyfocus.C</filename> implements a bare-bones display
    element that handles keyboard focus. The display element is a bare,
    colored
    square; initially light grey and changing to a white color when it
    acquired keyboard focus. There's a button below the element, and tabbing
    between the button and the custom display element demonstrates the color
    difference.
    Pressing <quote>r</quote>, <quote>g</quote>, and <quote>b</quote> keys
    on the keyboard, when the input focus is in the custom display element,
    results in the element's color getting updated to red, green, or blue,
    respectively:
  </para>

  <blockquote>
    <title><ulink url="examples/customkeyfocus.C">customkeyfocus.C</ulink></title>
    <informalexample>
      <programlisting><xi:include href="../examples/customkeyfocus.C" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
    </informalexample>
  </blockquote>

  <section id="process_key_event">
    <title>Overriding <methodname>keyboard_focus</methodname>() and <methodname>process_key_event</methodname>()</title>

    <para>
      An &implementation_class; that inherits from
      the <classname>&ns;::w::focusable_elementObj</classname>
      &template_mixin; can override
      <methodname>keyboard_focus</methodname>() and
      <methodname>process_key_event</methodname>().
      <methodname>keyboard_focus</methodname>() gets executed whenever the
      display element gains or loses input focus.
      <methodname>process_key_event</methodname>() gets executed to process
      a key event that occurs while the display element has keyboard input
      focus.
    </para>

    <para>
      As shown in <filename>customkeyfocus.C</filename>,
      <methodname>keyboard_focus</methodname>() override
      is responsible for invoking
      the overridden superclass.
      A <methodname>process_key_event</methodname>() override returns
      <literal>true</literal> if it processes the key press or release event;
      otherwise the overriden <methodname>process_key_event</methodname>()
      should get invoked, in order to correctly process key events.
    </para>
  </section>

  <section id="customdrawbasic">
    <title>Overriding <classname>elementObj::implObj</classname>'s basic
      <methodname>do_draw</methodname>() method</title>

    <para>
      <link linkend="customfocusableelement"><filename>customkeyfocus.C</filename></link>
      does not use the simplified drawing interface implemented by the
      <classname>&ns;::w::scratch_and_mask_buffer_draw</classname>
      template.
      <filename>customkeyfocus.C</filename> overrides the base
      <methodname>do_draw</methodname>() method that takes just two
      parameters:
    </para>

    <itemizedlist>
      <listitem>
	<para>
	  A
	  <ulink url="&link-x--w--draw-info;"><classname>&ns;::w::draw_info</classname></ulink>
	  object that's needed by fundamental drawing-related methods
	  from the parent <classname>elementObj::implobj</classname> class.
	</para>
      </listitem>

      <listitem>
	<para>
	  A list of rectangles that specify the portion or portions of the
	  display element that require drawing. In nearly all cases this is
	  just one rectangle representing the entire area taken up by the
	  display element; but it doesn't have to be. A partially-obscured
	  display element results in just the visible parts of its appearing
	  in the rectangle set.
	</para>
      </listitem>
    </itemizedlist>

    <para>
      <filename>customkeyfocus.C</filename>
      gives an example of manually redrawing the display element, one
      rectangle at a time.
    </para>

    <itemizedlist>
      <listitem>
	<para>
	  Creating a
	  <ulink url="&link-x--w--clip-region-set;"><classname>&ns;::w::clip_region_set</classname></ulink>
	  sets a clip mask on the underlying window, clipping the subsequent
	  draw operations to the display element.
	</para>
      </listitem>
      <listitem>
	<para>
	  Calling <methodname>draw_using_scratch_buffer</methodname>()
	  to redraw each portion of the display element.
	</para>
      </listitem>
    </itemizedlist>

    <para>
      The lambda that gets passed to
      <methodname>draw_using_scratch_buffer</methodname>()
      gets invoked with a picture, pixmap, and a graphic context representing
      a <link linkend="scratchbuffers">scratch buffer</link> for drawing.
      <methodname>draw_using_scratch_buffer</methodname>() is the only
      mechanism that must be used for updating the apperance of the display
      element.
      After the lambda returns, the scratch buffers get copied to the window
      after some additional, optional processing related
      to <link linkend="busy">shading inactive windows</link> and
      adjusting the image in the style of a disabled element, if the
      focusable display element is disabled.
    </para>

    <para>
      <methodname>draw_using_scratch_buffer</methodname>()'s remaining
      parameters, in addition to the closure are:
      the rectangle to be redrawn;
      the <classname>&ns;::w::draw_info</classname> object
      (always passed as two separate parameters, some internal functions
      use different objects for specific situations);
      and the
      <classname>&ns;::w::clip_region_set</classname> object in order to
      prove, by contract, that the clipping region is installed.
    </para>
  </section>

  <section id="schedule_redraw">
    <title>Drawing the updated contents of a custom display element</title>

    <para>
      <link linkend="customfocusableelement"><filename>customkeyfocus.C</filename></link>'s
      custom display element's appearance changes when it gains or
      loses keyboard input focus, and in response to
      <quote>r</quote>, <quote>g</quote>, and <quote>b</quote> keys.
      This means that it's necessary to redraw the display element when any
      of these events occur.
    </para>

    <para>
      It's possible to perform the necessary work and immediately call
      <methodname>do_draw</methodname>(), directly.
      <filename>customkeyfocus.C</filename> gives an example of a better
      way to do this, by calling
      <methodname>schedule_redraw</methodname>().
    </para>

    <para>
      <methodname>schedule_redraw</methodname>() arranges for a subsequent
      call to <methodname>do_draw</methodname>() to take place; but also
      does a few things that produce a better result:
    </para>

    <itemizedlist>
      <listitem>
	<para>
	  <methodname>schedule_redraw</methodname>() quietly does nothing
	  at all if the display element is not visible, and nothing needs
	  to be redrawn.
	  This can't happen in
          <filename>customkeyfocus.C</filename> because all events that
	  result in an explicit redrawing can only occur while the display
	  element is busy.
	</para>
      </listitem>

      <listitem>
	<para>
	  Actual redrawing is a low-priority task, done only when there's
	  nothing more urgent to do. The more urgent tasks are:
	  handling display server messages;
	  adding or creating new display elements; moving them around for
	  one reason, or another.
	  It's better to wait until all of this is done in order to avoid
	  needlessly redrawing the same display elements after every little
	  change. It's more efficient to postpone the drawing until the dust
	  settles.
	</para>

	<para>
	  <methodname>schedule_redraw</methodname>() quietly does nothing
	  if it gets called a second time before the display element gets
	  redrawn. That's the flip side of the coin.
	  A custom display element only needs to use
	  <methodname>schedule_redraw</methodname>() to indicate that it needs
	  to be redrawn. Multiple calls to
	  <methodname>schedule_redraw</methodname> result in
	  only one subsequent execution of <methodname>do_draw</methodname>().
	</para>
      </listitem>
    </itemizedlist>
  </section>

  <section id="standard_focusframe">
    <title>Creating the standard input focus frame display element</title>

    <para>
      <link linkend="customfocusableelement"><filename>customkeyfocus.C</filename></link>'s
      custom display element's default appearance is plain and unadorned.
      &appshort;'s standard display elements visually indicate which one has
      keyboard
      input focus frame by drawing a border around that display
      element. This is not something that happens automatically. Each
      display element has full control over its appearance.
    </para>

    <para>
      <filename>customkeyfocus.C</filename> custom display element
      changes its background color when it has input focus.
      Running <command>customkeyfocus</command> with the <option>-f</option>
      option also draws the standard input focus frame.
    </para>

    <para>
      An input focus frame is a &container;. &appshort;'s display elements
      are arranged in a logical hierarchy of containers, and a container
      itself is a display element; namely a display element that contains
      other display elements. An input focus frame is a container that draws
      a input focus border around the display element inside the container.
    </para>

    <para>
      A brief overview of a process for <link linkend="customimpl">creating
	a custom display element</link>:
    </para>

    <orderedlist>
      <listitem>
	<para>
	  Use a &factory;'s <methodname>get_container_impl</methodname>() to
	  obtain the new custom element's parent container
	  &implementation_object;.
	</para>
      </listitem>

      <listitem>
	<para>
	  Create the custom element's &implementation_object; instance,
	  passing to it the parent container's &implementation_object;.
	</para>
      </listitem>

      <listitem>
	<para>
	  Create the &public_object; for the custom element's
	  &implementation_object;.
	</para>
      </listitem>

      <listitem>
	<para>
	  Pass the new &public_object; to the &factory;'s
	  <methodname>created_internally</methodname>() method.
	</para>
      </listitem>
    </orderedlist>

    <para>
      Use the following process for creating a custom focusable element with
      an input focus frame.
    </para>

    <orderedlist>
      <listitem>
	<para>
	  Use a &factory;'s <methodname>get_container_impl</methodname>() to
	  obtain the new custom element's parent container
	  &implementation_object;.
	</para>
      </listitem>

      <listitem>
	<para>
	  Create an &implementation_object; for the input focus frame's
	  container.
	</para>
      </listitem>

      <listitem>
	<para>
	  Create the custom element's &implementation_object; instance,
	  passing to it the input focus frame container's
	  &implementation_object;.
	</para>
      </listitem>

      <listitem>
	<para>
	  Create the &public_object; for the custom element's
	  &implementation_object;.
	</para>
      </listitem>

      <listitem>
	<para>
	  Create the &public_object; for the input focus frame, using
	  <function>&ns;::w::create_focusframe_container</function>(), which
	  takes care of logically using
	  <methodname>created_internally</methodname>() with the
	  custom element's &public_object;.
	</para>
      </listitem>

      <listitem>
	<para>
	  Pass the input focus frame's &public_object; to the &factory;'s
	  <methodname>created_internally</methodname>() method.
	</para>
      </listitem>
    </orderedlist>

    <para>
      This logically translates to a minor sleight of hand.
      Instead of creating a custom display element for the &factory; in
      question, the input focus frame display element gets created. That
      becomes the new display element.
      But the real custom display element goes into the input focus frame,
      which is a container.
    </para>
  </section>

  <section id="standard_focusframe_impl_element">
    <title>Creating the standard input focus frame &implementation_object;</title>

    <para>
      <link linkend="customfocusableelement"><filename>customkeyfocus.C</filename></link>'s
      <ulink url="&link-function-x--w-create-nonrecursive-visibility-focusframe-impl;"><function>&ns;::w::create_nonrecursive_visibility_focusframe_impl</function></ulink>()
      and
      <ulink url="&link-function-x--w-create-always-visible-focusframe-impl;"><function>&ns;::w::create_always_visible_focusframe_impl</function></ulink>()
      assemble the &implementation_object; for a standard input focus
      frame container. They implement two ways of handling the visibility
      of the focus frame container's contents.
    </para>

    <para>
      A display element's <methodname>show</methodname>() or
      <methodname>hide</methodname>() makes the display element visible or
      invisible.
      A container's <methodname>show_all</methodname>() and
      <methodname>hide_all</methodname>() recursively updates the visibility
      of the container itself and everything inside it. This is equivalent
      to <methodname>show</methodname>() or <methodname>hide</methodname>()
      not just for the container itself, but for everything inside it,
      recursively.
    </para>

    <para>
      This matters because a given display element is visible not only
      when it's <methodname>show</methodname>()n, but only if all of its
      parent containers are also <methodname>show</methodname>()n.
      <methodname>hide</methodname>()ing a container makes the entire
      container disappear, even if some display elements in the container
      are <methodname>show</methodname>()n. Each display element maintains
      its own visibility state, and the final visibility of a given
      display element requires all of its parent containers to be visible.
    </para>

    <section id="nonrecursive_visibility">
      <title>The <classname>&ns;::w::nonrecursive_visibilityObj</classname> template mixin</title>

      <para>
	<function>&ns;::w::create_nonrecursive_visibility_focusframe_impl</function>()
	uses <ulink url="&link-x--w--nonrecursive-visibilityObj;"><classname>&ns;::w::nonrecursive_visibilityObj</classname></ulink>
	to create the
	focus frame container's &implementation_class;.
	<classname>&ns;::w::nonrecursive_visibilityObj</classname> is a
	&template_mixin; that overrides <methodname>show_all</methodname>()
	and <methodname>hide_all</methodname>() for the resulting display
	element. They become equivalent to
	<methodname>show</methodname>() and
	<methodname>hide</methodname>().
      </para>

      <para>
	This makes the resulting container behave similar to a monolithic
	display element. Otherwise, a
	<methodname>hide_all</methodname>() followed by
	<methodname>show</methodname>() results
	in the container being visible, but none of the container's
	elements being visible. This is because
	<methodname>hide_all</methodname>() hid everything, but
	<methodname>show</methodname>() made only the container visible.
      </para>

      <para>
	For a simple display element, and not a container,
	<methodname>show</methodname>() and
	<methodname>hide</methodname>() are the same as
	<methodname>show_all</methodname>() and
	<methodname>hide_all</methodname>().
	Only containers have
	other display elements that
	<methodname>show_all</methodname>() and
	<methodname>hide_all</methodname>() affects.
	This template mixin makes containers look like simple display elements
	in that respect.
      </para>


      <para>
	The
	<classname>&ns;::w::nonrecursive_visibilityObj</classname>
	&template_mixin; results in a container that behaves as a monolithic
	display element, for visibility purposes.
	<methodname>hide_all</methodname>() followed by
	<methodname>show</methodname>() makes the container's contents appear,
	as if the container is just a single display element, because
	<methodname>hide_all</methodname>() ignored the container's elements
	in the first place.
      </para>

      <note>
	<para>
	  New display elements are not visible upon creation, by default.
	  This remains the case. Each display element that gets added to this
	  container should still be
	  <methodname>show</methodname>()n (or
	  <methodname>show_all</methodname>()ed, perhaps),
	  in order for this to work
	  correctly.
	</para>

	<para>
	  This is why
	  <link linkend="customfocusableelement"><filename>customkeyfocus.C</filename></link>
	  still needs to <methodname>show</methodname>() the custom
	  display element after it gets added to a non-recursive visibility
	  input focus frame.
	</para>

      </note>
    </section>

    <section id="always_visible">
      <title>The <classname>&ns;::w::always_visibleObj</classname> template mixin</title>

      <para>
	<function>&ns;::w::create_always_visible_focusframe_impl</function>()
	uses the <ulink url="&link-x--w--always-visibleObj;"><classname>&ns;::w::always_visibleObj</classname></ulink> to create the
	focus frame container's &implementation_class;.
	<classname>&ns;::w::always_visibilityObj</classname> is a
	&template_mixin; that overrides <methodname>show_all</methodname>()
	and <methodname>hide_all</methodname>() for the resulting display
	element.
      </para>

      <para>
	<classname>&ns;::w::always_visibleObj</classname> disables
	<methodname>show_all</methodname>() and
	<methodname>hide_all</methodname>() for its container,
	but only for the container itself.
	<methodname>show_all</methodname>() and
	<methodname>hide_all</methodname>() still apply to
	all display elements in the container.
	Additionally, <classname>&ns;::w::always_visibleObj</classname>
	automatically <methodname>show</methodname>()s the container after
	it gets created.
      </para>

      <note>
	<para>
	  Only <methodname>show_all</methodname>() and
	  <methodname>hide_all</methodname>() get disabled.
	  <methodname>show</methodname>() and
	  <methodname>hide</methodname>() still have the usual effect
	  on the container.
	</para>
      </note>
    </section>

    <section id="container_visible">
      <title>The <classname>&ns;::w::container_visibleObj</classname> template mixin</title>

      <para>
	<function>&ns;::w::create_nonrecursive_visibility_focusframe_impl</function>()
	and
	<function>&ns;::w::create_always_visible_focusframe_impl</function>()

	use the <ulink url="&link-x--w--container-visible-elementObj;"><classname>&ns;::w::container_visible_elementObj</classname></ulink>
	&template_mixin;.
	&appshort; automatically provides
	<link linkend="scrollbar">scroll-bars</link>
	for the application's window if it's too big to fit on the screen.
	When that happens,
	display elements that receive keyboard focus get automatically
	scrolled into view if they are not fully visible.
      </para>

      <para>
	This &template_mixin; adjusts the scrolling so that its entire
	container gets scrolled into view instead of just some display
	element in the container. The
	<link linkend="standard_focusframe">standard input focus frame</link>
	is a container, and using this template mixin scrolls the entire
	input focus frame into view, instead of the focusable display
	element in the container, leaving one edge of the input focus frame
	scrolled out of view.
      </para>
    </section>
  </section>

  <section id="standard_focusframe_element">
    <title>Creating the standard input focus frame &public_object;</title>

    <para>
      After <link linkend="standard_focusframe_impl_element">creating the
	input focus frame's implementation object</link>,
      <link linkend="customfocusableelement"><filename>customkeyfocus.C</filename></link>
      uses it to create the custom element's &implementation_object;
      and the &public_object;, then
      calls
      <ulink url="&link-function-x--w-create-focusframe-container;"><function>&ns;::w::create_focusframe_container</function></ulink>().

      <function>&ns;::w::create_focusframe_container</function>()
      constructs the &public_object; for the input focus frame
      implementation object, and puts the new custom element into the
      new input focus frame container.
      <link linkend="customfocusableelement"><filename>customkeyfocus.C</filename></link>
      concludes the process by <link linkend="customimpl">calling the
	original factory's <methodname>created_internally</methodname>()</link>.
    </para>

    <para>
      From the original &factory;'s perspective, one new display element
      gets created. The display element is the focus frame container, and
      the focus frame container contains the real custom display element
      that gets created.
    </para>
  </section>
</chapter>
<!--
Local Variables:
mode: sgml
sgml-parent-document: ("book.xml" "book" "chapter")
End:
-->
