<!--

Copyright 2017 Double Precision, Inc.
See COPYING for distribution information.

-->

<chapter id="checkradio">
  <title>Checkboxes and radio buttons</title>

  <mediaobject>
    <imageobject>
      <imagedata fileref="checkradio.png" format="PNG"
		 contentwidth="209px" contentdepth="203px" />
    </imageobject>
    <textobject>
      <phrase>
	Checkboxes
      </phrase>
    </textobject>
    <caption>
      <para>
	This example creates a window with some checkboxes and
	radio buttons.
      </para>
    </caption>
  </mediaobject>

  <blockquote>
    <title><ulink url="examples/checkradio.C">checkradio.C</ulink></title>

    <informalexample>
      <programlisting><xi:include href="../examples/checkradio.C" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
    </informalexample>
  </blockquote>

  <section id="checkradio_create">
    <title>Creating checkboxes and radio buttons</title>

    <para>
      A &factory;'s
      <methodname>create_checkbox</methodname>() and
      <methodname>create_radio</methodname>() and methods return an
      <ulink url="&link-typedef-x--w-image-button;"><classname>&ns;::w::image_button</classname></ulink>,
      which is a &focusable;.
      Creating a radio button requires creating a
      <ulink url="&link-typedef-x--w-radio-group;"><classname>&ns;::w::radio_group</classname></ulink>
      separately, and passing it as the first parameter
      to <methodname>create_radio</methodname>() when creating a radio
      button for that radio button group.
      Radio buttons in the same radio button group are mutually exclusive
      with each other.
      The application has no further
      need to keep track of the
      <classname>&ns;::w::radio_group</classname> object
      after creating all the radio buttons. Each radio button maintains
      its own internal link with the radio group object.
    </para>

    <section id="button_labeling">
      <title>Button labels</title>

      <para>
	Traditionally, a brief text label appears next to each
	<classname>&ns;::w::image_button</classname>.
	The first parameter to <methodname>create_checkbox</methodname>()
	and the second parameter to <methodname>create_radio</methodname>()
	is a closure, or a callable object. The callable object
	receives one parameter: a &factory; that the closure should use
	to create one display element.
      </para>

      <para>
	The traditional <classname>&ns;::w::image_button</classname>
	label is, well, a <link linkend="labels">label
	  created by <methodname>create_label</methodname>()</link> but it
	can be any display element.
	This sets the checkbox's, or the radio button's initial label.
	An existing
	<ulink url="&link-typedef-x--w-image-button;"><classname>&ns;::w::image_button</classname></ulink>'s
	<methodname>update_label</methodname>() method replaces its
	existing label using the same approach.
	<filename>checkradio.C</filename> gives an example of updating
	one of the radio button's labels when the radio button gets selected
	and de-selected:
      </para>

      <blockquote>
	<informalexample>
	  <programlisting>
void set_train_label(const x::w::factory &amp;f, bool is_selected)
{
    f->create_label(is_selected ? "Train (with weekends)":"Train")->show();
}

// ...

train->update_label([selected]
                    (const x::w::factory &amp;f)
                    {
                        set_train_label(f, selected);
                    });
}</programlisting>
	</informalexample>
      </blockquote>

      <note>
	<para>
	  The label, like any other display element, must be
	  <methodname>show</methodname>()n to be visible.
	</para>
      </note>
    </section>

    <section id="customcheckboxlabels">
      <title>Customizing <classname>&ns;::w::image_button</classname> labels</title>

      <para>
	It is possible to use <methodname>create_label</methodname>() to
	construct a lengthy, word-wrapped label for an
	<classname>&ns;::w::image_button</classname>,
	which appears immediately after it.
	By default, the button and its following label are vertically
	centered with respect to each other. This may not look very well
	with tall labels.
      </para>

      <para>
	The last optional parameter to
	<methodname>create_checkbox</methodname>() and
	<methodname>create_radio</methodname>()
	is an
	<ulink url="&link-typedef-x--w-image-button-appearance;"><classname>&ns;::w::image_button_appearance</classname></ulink> object, a
	<link linkend="refobjelements">reference-counted</link> object.
	Actually it's an
	<ulink url="&link-typedef-x--w-const-image-button-appearance;"><classname>&ns;::w::const_image_button_appearance</classname></ulink>
	that represents a <literal>const</literal> object.
      </para>

      <para>
	This is a common &appshort; design pattern: an
	<quote>appearance</quote> object.
	This object specifies various appearance-related properties of
	a display element.
	The default appearance object is cached, which is why it is a constant
	object. An appearance object's <methodname>clone</methodname>() creates
	a duplicate copy of an object which can then be modified without
	impacting the cached copy.
      </para>

      <blockquote>
	<informalexample>
	  <programlisting>
#include &lt;&ns;/w/image_button_appearance.H&gt;

&ns;::w::const_image_button_appearance default_appearance=
    &ns;::w::const_image_button_appearance::base::checkbox_theme();

&ns;::w::image_button_appearance custom_appearance=default_appearance->clone();

custom_appearance->alignment=&ns;::w::valign::bottom;

factory->create_checkbox([]
                         (const &ns;::w::factory &amp;label_factory)
                         {
                             // ...
                         },
                         custom_appearance);</programlisting>
	</informalexample>
      </blockquote>

      <para>
	<methodname>checkbox_theme</methodname>() and
	<methodname>radio_theme</methodname>() return the default appearance
	objects for checkboxes and radio buttons.
	This example takes the default <methodname>checkbox_theme</methodname>()
	and <methodname>clone</methodname>()s in.
	This appearance object's
	<varname>alignment</varname> member
	adjusts the
	<ulink url="&link-enum-x--w-valign;">vertical alignment</ulink>
	of the label display element with respect to the checkbox or the
	radio button.
	Note that the button and its label is a single display element,
	in the button's &container;.
      </para>

      <para>
	It's always possible to create a label separately, as a discrete
	display element: the factory parameter to
	<methodname>create_checkbox</methodname>() and
	<methodname>create_radio</methodname>() is optional. Without it,
	this results in a
	<classname>&ns;::w::image_button</classname> all by itself: a small,
	clickable button. It's presumed that the label display element
	gets created independently, as a discrete display element of its own.
      </para>

      <para>
	The appearance object is also an optional parameter that overrides
	the <methodname>checkbox_theme</methodname>() or
	<methodname>radio_theme</methodname>() parameter.
	Both the factory and the appearance object parameters are
	individually optional. If both parameters get specified, it's required
	to specify them in this order.
      </para>

      <para>
	Normally only the small checkbox or radio button itself responds
	to pointer clicks, but it's expected that clicking on its associated
	label also activated the checkbox or the radio button. This is done
	by using <methodname>label_for</methodname>() to link a display
	element to the actual checkbox or a radio button it triggers.
	Only <quote>inert</quote> display elements that do not directly
	respond to pointer clicks on their own can have their
	<methodname>label_for</methodname>() method used, and the parameter
	must be a &focusable;:
      </para>

      <blockquote>
	<informalexample>
	  <programlisting>
bottom_label->label_for(train);</programlisting>
	</informalexample>
      </blockquote>

      <para>
	<filename>checkradio.C</filename> creates a
	<varname>bottom_label</varname>, an ordinary
	<link linkend="labels">label</link>.
	<methodname>label_for</methodname>()'s parameter is any
	&focusable;, like our
	<classname>&ns;::w::image_button</classname>.
	<methodname>label_for</methodname>() specifies that a pointer click
	on its object's display element (the display element whose
	<methodname>label_for</methodname>()) has the same effect as
	a pointer click on the parameter display element.
      </para>

      <para>
	In this case, clicking on the <varname>bottom_label</varname> has
	the same effect as click on the <varname>train</varname> radio
	button.
      </para>

      <para>
	<methodname>label_for</methodname>() designates its display element
	as a <quote>label</quote> for the &focusable; element,
	specified by its parameter.
	Invoking the display element's <methodname>label_for</methodname>()
	has the following results:
      </para>

      <itemizedlist>
	<listitem>
	  <para>
	    Clicking on the label element results in the pointer click getting
	    processed by the &focusable; element.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    The label's visual appearance also matches the focusable's visual
	    appearance when the focusable gets enabled
	    or disabled by its <methodname>set_enabled</methodname>() method.
	  </para>
	</listitem>
      </itemizedlist>

      <para>
	It is possible to define two or more labels for the same focusable;
	but a given label can be a label for only one focusable.
      </para>

      <para>
	Finally, setting a (cloned) appearance object's
	<varname>images</varname> setting
	loads custom checkbox or radio button images.
	See <xref linkend="iconimages" /> for more information.
      </para>
    </section>
  </section>

  <section id="checkradio_setstate">
    <title>Setting checkbox and radio button state</title>

    <para>
      Clicking on a checkbox or a radio button with pointer button #1
      changes its state. Checkboxes flip between an on and off state.
      A radio button always gets set to the on state, turning off the
      previous radio button in its group to the off state.
      Checkboxes and radio buttons also handle keyboard input focus.
      Tabbing to a
      checkbox or a radio button draws a thin focus frame around it;
      with <keycap>SPACE</keycap> or <keycap>ENTER</keycap> setting the
      checkbox's or the radio button's state.
    </para>

    <para>
      <methodname>set_state</methodname>() directly sets the checkbox's
      or the radio button's state:
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
button->set_state(1);</programlisting>
      </informalexample>
    </blockquote>

    <para>
      <literal>set_state(1)</literal> turns on the checkbox or the radio button,
      <literal>set_state(0)</literal> turns off the checkbox. Radio buttons
      should not be turned off directly. Turning on another radio button
      in the same radio group automatically turns off the currently turned
      on radio button.
    </para>

    <para>
      Checkboxes also respond to <literal>set_state(2)</literal>, which is
      defined as an <quote>intermediate</quote> state. Only
      <methodname>set_state</methodname>() can set the intermediate state,
      it cannot be set by clicking on the checkbox.
    </para>
  </section>

  <section id="checkradio_getstate">
    <title>Getting checkbox and radio button state</title>

    <para>
      There are two ways to get the current state of a checkbox or a radio
      button.
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
size_t n=button->get_state();</programlisting>
      </informalexample>
    </blockquote>

    <para>
      <methodname>get_state</methodname>() returns the current state of the
      checkbox or the radio button, directly. A turned off checkbox or a
      radio button returns 0. A turned on checkbox or a radio button returns
      1, and a checkbox with an
      <link linkend="checkradio_setstate">explicitly set
	<quote>intermediate</quote> state</link> returns 2.
    </para>

    <note>
      <para>
	Using <methodname>get_state</methodname>() immediately after an
	explicit
	<methodname>set_state</methodname>() may return the button's
	previous state.
	This is because the checkbox's or the radio button's state
	gets updated by &app;'s <link linkend="connection_thread">internal
	  execution thread</link>, and that hasn't happened just yet.
	<methodname>set_state</methodname>() sends an internal message
	to the execution thread, which might be busy with other things.
	Once all other urgen matters get resolved, the execution thread
	will process the message and update the button's state.
      </para>
    </note>

    <para>
      <methodname>on_activate</methodname> installs
      <link linkend="callbacks">a callback</link> that gets executed by
      the internal thread whenever it updates the checkbox's or the radio
      button's state:
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
button->on_activate([]
                    (ONLY IN_THREAD,
                     size_t value,
                     const x::w::callback_trigger_t &amp;trigger,
                     const x::w::busy &amp;mcguffin)
                    {
                        if (trigger.index() == x::w::callback_trigger_initial)
                        {
                               .. ,,,
                        }
                    });</programlisting>
      </informalexample>
    </blockquote>

    <para>
      The lambda gets executed whenever the button changes its value.
      The lambda also gets executed immediately after it gets installed,
      and receives the checkbox's current state as the
      <varname>value</varname>. Its <varname>trigger</varname> parameter
      indicates the reason for lambda's execution.
      <ulink url="&link-typedef-x--w-callback-trigger-t;"><classname>&ns;::w::callback_trigger_t</classname></ulink>
      is a <classname>std::variant</classname> and the initial invocation
      of the variant specifies
      <classname>x::w::callback_trigger_initial</classname>.
    </para>

    <note>
      <para>
	Because the lambda gets executed from the
	<link linkend="connection_thread">internal execution thread</link>
	the lambda may get invoked before or after
	<methodname>on_activate</methodname>()
	returns.
      </para>
    </note>

    <para>
      Only one callback can be installed at a time. Installing a second
      callback replaces the first one, and the second callback also gets
      executed with the <varname>trigger</varname> indicating its initial
      invocation. Since callback execution and installation
      is asynchronous, it's possible for the first callback to get executed
      one last time after
      <methodname>on_activate</methodname>() gets called to install its
      replacement callback. This happens
      if the internal execution thread already started processing a button
      click. In all cases the first callback never gets called after
      the initial execution of the second callback; so this is a confirmation
      that the callback is replaced.
    </para>

    <para>
      These callbacks get invoked to report new button values set directly,
      by pointer and button clicks; and manually with
      <methodname>set_value</methodname>(). Setting a new radio button
      results in callbacks for both the previously set and the newly set
      radio button getting invoked, in turn, reporting the change to the
      value of the previous radio button and the newly set one.
    </para>
  </section>
</chapter>
<!--
Local Variables:
mode: sgml
sgml-parent-document: ("book.xml" "book" "chapter")
End:
-->
