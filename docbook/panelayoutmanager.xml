<!--

Copyright 2018 Double Precision, Inc.
See COPYING for distribution information.

-->

<chapter id="panelayoutmanager">
  <title>The pane layout manager</title>

  <mediaobject>
    <imageobject>
      <imagedata fileref="panelayoutmanager.png" format="PNG"
		 contentwidth="350px" contentdepth="663px" />
    </imageobject>
  </mediaobject>

  <para>
    The pane layout manager is another way to conserve valuable window
    real estate and share a small amount of it with
    multiple display elements.
  </para>

  <para>
    The pane layout manager places the display elements
    in its container in one vertical
    column, or one horizontal row. Each display element becomes a
    <quote>pane</quote>. Draggable dividers separate the
    panes. The dividers look like
    thick dashed lines.
    These dividers drag and slide in both directions. dragging
    the dividing sliders visually adjusts the relative sizes of
    the panes on either
    side of the divider, accordingly. A pane on one side gets smaller,
    and the other pane gets larger.
  </para>

  <para>
    The pane layout manager also provides scroll-bars for each pane
    when the pane's display element is larger than the pane's current
    size.
  </para>

  <para>
    Passing an
    <ulink url="&link-x--w--new-panelayoutmanager;"><classname>&ns;::w::new_panelayoutmanager</classname></ulink>
    to a &factory;'s <methodname>create_focusable_container</methodname>()
    creates a &container; with a
    <ulink url="&link-typedef-x--w-panelayoutmanager;"><classname>&ns;::w::panelayoutmanager</classname></ulink>.
    The panes are placed in a vertical column by default, with the container
    getting automatically sized to accomodate the widest pane.
    Invoking <classname>&ns;::w::new_panelayoutmanager</classname>'s
    <methodname>horizontal</methodname>() results in horizontally-oriented
    panes, with the container getting automatically sized to accomodate
    the tallest pane.
  </para>

  <para>
    <filename>panelayoutmanager.C</filename> creates a vertical set of panes
    and gives an example of using
    the pane layout manager. Running this example with the
    <option>-h</option> parameter creates a horizontal set of panes.
  </para>

  <blockquote>
    <title><ulink url="examples/panelayoutmanager.C">panelayoutmanager.C</ulink></title>

    <informalexample>
      <programlisting><xi:include href="../examples/panelayoutmanager.C" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
    </informalexample>
  </blockquote>

  <section id="panecontainersize">
    <title>Pane container's size</title>

    <blockquote>
      <informalexample>
	<programlisting>
&ns;::w::new_panelayoutmanager npl{
   &ns;::w::dim_axis_arg{10, 50, 100}
};</programlisting>
      </informalexample>
    </blockquote>

    <para>
      <classname>&ns;::w::new_panelayoutmanager</classname>'s constructor
      takes one parameter, aa
      <ulink url="&link-x--w--dim-axis-arg;"><classname>&ns;::w::dim_axis_arg</classname></ulink>.
      This sets the the pane container's size. The pane container's size gets
      constrained with the bounds set by this parameter. Adding new panes
      and removing existing panes from the container adjusts its size strictly
      within these bounds. If they get exceeded, the individual panes' sizes
      get proportionately scaled to keep the overall container's size within
      the specified bounds.
    </para>
  </section>

  <section id="creatingpanes">
    <title>Creating new panes</title>

    <para>
      <ulink url="&link-typedef-x--w-panelayoutmanager;"><classname>&ns;::w::panelayoutmanager</classname></ulink>'s
      <methodname>append_panes()</methodname>,
      <methodname>insert_panes()</methodname>,
      <methodname>replace_panes()</methodname>, and
      <methodname>replace_all_panes()</methodname>
      return a
      <ulink url="&link-typedef-x--w-panefactory;"><classname>&ns;::w::panefactory</classname></ulink>,
      which is a &factory;.
      Every display element created by the factory becomes a new pane in the
      pane layout manager's container.
    </para>

    <para>
      Individual properties related to each new pane come from the
      pane factory's &appearance_object;:
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
&ns;::w::pane_appearance custom=f->appearance->clone();

custom->size=20.0;

// ...

f->appearance=custom;</programlisting>
      </informalexample>
    </blockquote>

    <para>
      The <varname>size</varname> sets the
      new element's initial size. This is just a suggestion, since the
      pane container, with all of its elements, always gets constrained by
      its <link linkend="creatingpanes">specified size</link>.
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
&ns;::w::new_panelayoutmanager npl{
   &ns;::w::dim_axis_arg{40} // 40 millimeter-long container
};

factory->create_focusable_container(
     [&amp;]
     (const &ns;::w::container &amp;new_container)
     {
          &ns;::w::panelayoutmanager plm=new_container->get_layoutmanager();

          &ns;::w::panefactory f=plm->append_panes();

          &ns;::w::pane_appearance custom=f->appearance->clone();

          custom->size=20.0; // 20 millimeters (almost)

          f->appearance=custom;
          f->create_label("Lorem Ipsum")->show();

          // The pane factory automatically resets itself to the default
          // pane appearance for each new pane, so we simply reinstall
          // the custom appearance requesting a 20mm pane:

          f->appearance=custom;
          f->create_label("Lorem Ipsum")->show();
     }, npl);
</programlisting>
      </informalexample>
    </blockquote>

    <para>
      This example creates a 40 millimeter-long container, with two initial
      panes. A custom pane &appearance_object; specifies a 20 millimeter size,
      so the pane
      container's alloted 40 millimeter size gets evenly divided between them.
    </para>

    <para>
      The actual size of each element in this container is slightly less than
      20 millimeters. The draggable divider between the two panes takes
      up some space too, and it has to fit within its container's 40 millimeter
      size. The two new panes' sizes get slightly adjusted, in order to leave
      sufficient space for the dividers.
    </para>

    <para>
      The sizes set by <methodname>set_initial_size</methodname>(), in this
      manner, are just guidelines, or hints, and the actual size of each new
      element gets proportionately adjusted, together with the sizes of any
      existing panes, so that the entire container stays within its bounds.
    </para>
  </section>

  <section id="removingpanes">
    <title>Removing panes</title>


    <blockquote>
      <informalexample>
	<programlisting>
f->insert_panes(0);

f->remove_pane(1);</programlisting>
      </informalexample>
    </blockquote>


    <para>
      The pane layout manager consecutively numbers its panes, starting with
      pane #0.
      The factory returned by
      <methodname>append_panes()</methodname> adds new panes after all, if any,
      existing panes in the container.
      <methodname>insert_panes()</methodname> adds new panes before an
      existing pane in the container.
      The panes created by
      <methodname>replace_panes()</methodname>'s factory replace the existing
      panes in the container.
      Finally, calling
      <methodname>replace_all_panes()</methodname> removes all existing
      panes, and the returned factory adds new panes to the now-empty pane
      container.
    </para>

    <para>
      <methodname>remove_pane</methodname>() removes an existing pane in
      the container.
      <methodname>remove_all_panes</methodname>() removes all panes from the
      container.
      <methodname>replace_all_panes()</methodname> is equivalent to calling
      <methodname>remove_all_panes</methodname>() followed by
      <methodname>append_panes</methodname>().
    </para>

    <para>
      <methodname>size</methodname>() returns the number of elements in the
      pane, and <methodname>get</methodname>() returns an existing element
      in the pane.
    </para>
  </section>

  <section id="panefocusability">
    <title>Input focus and selection lists or tables</title>

    <para>
      The pane layout manager uses &focusable; display elements internally,
      specifically the dividing sliders between the individual panes, and
      the <link linkend="scrollbar">scroll-bars</link> that scroll the
      elements bigger than their pane, into view. This is why
      the pane layout manager gets used with
      <methodname>create_focusable_container</methodname>().
    </para>

    <para>
      The pane layout manager automatically manages the individual
      tabbing order for its scroll-bars and sliders. The focusable container
      is considered to be a single focusable display element, and moving its
      tabbing order moves the order of all the scroll-bars and sliders as
      a group.
      Setting a focusable element's tabbing order before or after the
      pane's focusable container moves the input focus to it before or after
      all of the pane's sliders and scroll-bars; with one exception.
    </para>

    <para>
      The exceptions are <link linkend="list">selection lists</link> and
      <link linkend="tables">tables</link>.
      Putting a selection list or a table into a pane
      automatically incorporates the
      selection list or table into the pane's own natural tabbing order.
      The input
      focus gets tabbed in and out of the selection list or table
      in order with the
      pane's focusable elements.
    </para>

    <section id="paneconfigurelist">
      <title>Configuring lists and tables in panes</title>

      <blockquote>
	<informalexample>
	  <programlisting>
auto pf=plm->append_panes();

&ns;::w::new_listlayoutmanager nlm{highlighted_list};

nlm.columns=3;
pf->configure_new_list(nlm);

&ns;::w::pane_appearance custom=pf->appearance->clone();

custom->size=30.0;

pf->size=custom;

pf->create_focusable_container([]
                   (const auto &amp;creator)
                   {
                       // ...
                   },
                   nlm)->show();</programlisting>
	</informalexample>
      </blockquote>

      <para>
	<link linkend="panelayoutmanager"><filename>panelayoutmanager.C</filename></link>
	shows how to use <methodname>configure_new_list</methodname>() with
	a pane factory when adding a
	selection list or a table, for optimal appearance.
      </para>

      <para>
	<methodname>configure_new_list</methodname>()'s parameter
	is either a
	<link linkend="list"><classname>&ns;::w::new_listlayoutmanager</classname></link>
	or a
	<link linkend="tables"><classname>&ns;::w::new_tablelayoutmanager</classname></link>;
	and
	<methodname>configure_new_list</methodname>() gets called just
	before using the pane factory to create a new focusable container
	with a list layout manager or the table layout manager.
      </para>

      <para>
	<methodname>configure_new_list</methodname>() install new
	&appearance_object;s in both the pane
	factory's and the passed-in
	<classname>&ns;::w::new_listlayoutmanager</classname>
	or
	<classname>&ns;::w::new_tablelayoutmanager</classname>.
	These appearance objects are adjusted
	with optimal settings:
      </para>

      <itemizedlist>
	<listitem>
	  <para>
	    Specifying a <methodname>variable_height</methodname>() for
	    the new selection list or table, so that it automatically matches
	    its pane's height, when the pane's height gets adjusted by
	    its dividing sliders.
	  </para>
	</listitem>

	<listitem>
	  <para>
	    Eliminating the selection list/table element's drawn border, because
	    the pane layout manager provides a border for all of its panes,
	    already.
	  </para>
	</listitem>

	<listitem>
	  <para>
	    Disabling the pane's scroll-bar. The selection list or table
	    provides its
	    own scroll-bar, when needed.
	    in the list.
	  </para>
	</listitem>

	<listitem>
	  <para>
	    Removing the small amount of padding in the list's pane. The
	    selection list provides the same amount of padding itself.
	  </para>
	</listitem>

	<listitem>
	  <para>
	    Setting the pane element alignment options to fill out the element
	    in the pane to always match the size of the pane. This automatically
	    adjusts the list's height to match the pane's, making the
	    selection list responsible for its own scrolling.
	  </para>
	</listitem>
      </itemizedlist>

      <para>
	Since <methodname>configure_new_list</methodname>() installs new
	appearance objects, any customizations to them must occur after
	<methodname>configure_new_list</methodname>().
      </para>
    </section>

    <section id="panesynclists">
      <title>Panes with synchronized lists</title>

      <blockquote>
	<informalexample>
	  <programlisting>
auto pf=plm->append_panes();

&ns;::w::new_listlayoutmanager nlm{highlighted_list};

nlm.columns=3;
pf->configure_new_list(nlm);

auto custom=pf->appearance.clone();

custom->size=30;

pf->appearance=custom;

pf->create_focusable_container([]
                   (const auto &amp;creator)
                   {
                       // ...
                   },
                   nlm)->show();

pf->configure_new_list(nlm);

custom=pf->appearance.clone();

custom->size=50;

pf->appearance=custom;

pf->create_focusable_container([]
                   (const auto &amp;creator)
                   {
                       // ...
                   },
                   nlm)->show();</programlisting>
	</informalexample>
      </blockquote>

      <para>
	This example creates two panes with selection lists. Each
	selection list <link linkend="listcolumns">has three columns</link>.
	What's not explicitly apparent is that both lists' columns' widths
	are synchronized.
      </para>

      <para>
	Normally each selection list controls its columns individually; and
	they're wide enough to accomodate the widest individual item in all rows
	in that column, in that selection list.
	The two selection lists are independent of each other. The first one's
	columns' widths	get computed based on the first list's items' widths.
	The widths of columns in the second list are set based on the widths
	of the individual items in the second list. So, normally, the
	widths of columns in the two lists are different because
	the lists have different items; and the same column will has
	a different width in each list.
      </para>

      <para>
	In this example, the two selection lists appear as two panes,
	one list on top of each other, and their columns will always line up.
	This looks like a single list, with a divider element that splits
	them. But they're really two independent selection lists.
      </para>

      <para>
	This is an indirect result of the two selection lists
	getting created from the same
	<classname>&ns;::w::new_listlayoutmanager</classname>.
	<classname>&ns;::w::new_listlayoutmanager</classname>'s
	constructor creates a new
	<ulink url="&link-typedef-x--w-synchronized-axis;"><classname>&ns;::w::synchronized_axis</classname></ulink>
	object for its <varname>synchronized_columns</varname> member.
      </para>

      <para>
	A new selection list container that's created by an
	<classname>&ns;::w::new_listlayoutmanager</classname>'s
	gets linked
	to the <varname>synchronized_columns</varname> from the
	<classname>&ns;::w::new_listlayoutmanager</classname> instance.
	The computed widths of the selection list's columns are based not
	only on that selection list's items, but also based on the items of all
	other selection list's that link to the same
	<varname>synchronized_columns</varname> object.
	It's possible to create selection lists from different
	<classname>&ns;::w::new_listlayoutmanager</classname>s provided
	that the first one's <varname>synchronized_columns</varname> class
	member gets manually copied to the second one's.
      </para>

      <para>
	Additionally, merely linking multiple selection lists to the same
	<varname>synchronized_columns</varname> is not sufficient by itself.
	To have lists' columns line up with each other requires taking
	some additional steps:
      </para>

      <itemizedlist>
	<listitem>
	  <para>
	    The selection lists must have the same number of columns.
	  </para>
	</listitem>

	<listitem>
	  <para>
	    The selection lists' scroll-bars' visibility status must be the
	    same.
	    All of the lists' scroll-bars must be visible, or invisible.
	    It's possible to have
	    a mixture of lists with visible and invisible scroll-bar's, if
	    their visibility
	    is
	    <literal>&ns;::w::scrollbar_visibility::automatic_reserved</literal>.
	  </para>
	</listitem>

	<listitem>
	  <para>
	    The selection lists have to be sized to the same width, by their
	    respective containers.
	  </para>
	</listitem>
      </itemizedlist>

      <para>
	The above example ticks off each requirement as follows:
      </para>

      <itemizedlist>
	<listitem>
	  <para>
	    Both selection lists have three columns, and a
	    <varname>vertical_scrollbar</varname> with
	    <literal>&ns;::w::scrollbar_visibility::automatic_reserved</literal>.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    They get placed into the same (vertical) pane container. The
	    vertical pane container automatically sizes itself to accomodate
	    the widest pane, and
	    <literal>&ns;::w::halign::fill</literal> make sure that the
	    two selection lists get stretched horizontally to the pane
	    container's full width.
	  </para>
	</listitem>
      </itemizedlist>
    </section>
  </section>
</chapter>
<!--
Local Variables:
mode: sgml
sgml-parent-document: ("book.xml" "book" "chapter")
End:
-->
